<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaBase</title>
      <link href="/posts/javabase/"/>
      <url>/posts/javabase/</url>
      
        <content type="html"><![CDATA[<h2 id="一、javaBase"><a href="#一、javaBase" class="headerlink" title="一、javaBase"></a>一、javaBase</h2><h4 id="1-1-Java特性"><a href="#1-1-Java特性" class="headerlink" title="1.1 Java特性"></a>1.1 Java特性</h4><blockquote><ol><li>简单性</li><li>面向对象</li><li>可移植性（跨平台）</li><li>高性能</li><li>分布式</li><li>动态性（反射）</li><li>多线程</li><li>安全性（安全）</li><li>健壮性</li></ol></blockquote><h4 id="1-2-Java三大版本"><a href="#1-2-Java三大版本" class="headerlink" title="1.2 Java三大版本"></a>1.2 Java三大版本</h4><blockquote><ol><li>Java SE: 标准版（桌面程序）</li><li>Java ME: 嵌入式开发（手机、小家电）</li><li>Java EE: E企业级开发（web端，服务器开发）</li></ol></blockquote><h4 id="1-3-JDK、JRE、JVM是什么？"><a href="#1-3-JDK、JRE、JVM是什么？" class="headerlink" title="1.3 JDK、JRE、JVM是什么？"></a>1.3 JDK、JRE、JVM是什么？</h4><blockquote><p>jdk:在jre之上扩充一些开发工具，让我们开发者使用的</p><p>jre:运行时环境，只要安装了jre，就可以运行我们的java程序了、一般我们只需要下载安装jadk即可，因为jdk包含了jre。</p><p>jvm:java虚拟机，把它当做一种规范，可以用软件来实现，也可以用硬件来实现。它就相当于在所有的操作系统上模拟了一个小小的cpu，去处理我们java相关的东西。java的跨平台核心是使用了java虚拟机，在不同的操作系统上安装jvm。</p><p>Java是大小写敏感的语言</p></blockquote><h4 id="1-4-Java程序的运行机制"><a href="#1-4-Java程序的运行机制" class="headerlink" title="1.4 Java程序的运行机制"></a>1.4 Java程序的运行机制</h4><p><strong>编译型</strong></p><p>​        把整个程序编译</p><p><strong>解释性</strong></p><p>​        给出命令，执行语句（网页js,便解释，边执行）</p><p>java属于上面两种类型，先编译，再解释</p><p><img src="/posts/javabase/image-20220217213733331.png" alt="image-20220217213733331"></p><h2 id="二、java基础语法"><a href="#二、java基础语法" class="headerlink" title="二、java基础语法"></a>二、java基础语法</h2><h4 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1 注释"></a>2.1 注释</h4><p>注释并不会被执行，是写给我们写代码的人看的</p><p>单行注释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//单行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多行注释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*多行注释*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文档注释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @Description Hello World* @Autor: Dahammer*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-标识符"><a href="#2-2-标识符" class="headerlink" title="2.2 标识符"></a>2.2 标识符</h4><p>Java 所有的组成部分都需要名字。类名、变量名、以及方法名都被成为标识符。所有的标识符都应该以A-Z或者a-z、美元符号$、下划线_开始</p><h4 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h4><p>强类型语言：要求变量的使用要严格符合规定，所有变量都必须先定义才能使用。</p><p>弱类型语言： JS</p><p>强类型语言安全，但是速度慢！</p><p>java是一种强类型语言，要求十分严格。</p><ul><li><strong>基本数据类型</strong></li></ul><ol><li>整数型：byte(1字节)、short(2字节)、int(4字节)、long(8字节)long类型要在后面加上L，（可以省略，超出int的范围时需要加L）</li><li>浮点型：float(4字节)、double(8字节)float类型 要在数字后面加f</li><li>字符型：char（2字节）</li><li>布尔型：boolean（1位）是非对错</li></ol><ul><li><strong>引用数据类型</strong></li></ul><p>除了基本数据类型之外的，都叫引用类型。</p><ol><li>类</li><li>接口</li><li>数组</li><li>枚举</li></ol><h4 id="2-4-什么是字节"><a href="#2-4-什么是字节" class="headerlink" title="2.4 什么是字节"></a>2.4 什么是字节</h4><ol><li>位(bit): 是计算机内部数据，存储的最小单位.11001100是一哥八位二进制</li><li>字节（byte）：是计算机中数据处理的基本单位，习惯上用大写B来表示；1B（byte字节）=8bit(位)</li><li>字符：是指计算机中使用的字母、数字和符号</li></ol><ul><li><p>常见的单位换算</p><p>1bit 表示 1位</p><p>1byte 表示一哥字节 1B = 8bit</p><p>1024b = 1kb</p><p>1024M = 1G</p><p>1024G = 1TB</p></li></ul><h4 id="2-5-进制问题"><a href="#2-5-进制问题" class="headerlink" title="2.5 进制问题"></a>2.5 进制问题</h4><ul><li><strong>进制说明</strong></li></ul><p>二进制： 0b</p><p>十进制：默认</p><p>八进制：0逢八进1</p><p>十六进制：0X逢十六进1</p><p>银行业务用什么表示？用BigDecimal类 数学工具类 不能使用浮点数。</p><ul><li>float:浮点数是有限的射入误差，大约接近但不等于</li><li>double: 最好完全使用浮点数进行比较</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i1 <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//8</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//16</span>        <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">0.1f</span> <span class="token comment">//0.1</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//0.1</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> f <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>字符扩展</strong></li></ul><pre class="line-numbers language-jav" data-language="jav"><code class="language-jav">char c1 = 'a';char c2 = '中'; System.out.println(c1); System.out.println((int)c1);//97 强制转换 System.out.println(c2); System.out.println((int)c2); //20013<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的字符本质还是数学</p><p>编码问题 Unicode表： (97 = a, 65 =A)编码占了两个字节</p><p>转义字符</p><p>\t制表符</p><p>\n换行</p><h4 id="2-6-类型转换"><a href="#2-6-类型转换" class="headerlink" title="2.6 类型转换"></a>2.6 类型转换</h4><ul><li>通过查看byte包装类型得到：byte 最大值信息</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> MIN_VALUE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> MAX_VALUE <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于java是强类型语言，所以要进行有些运算的时候，需要用到类型转换。</p><p>低—–&gt;高</p><p>byte、short、char、int、float、long、double</p><p>运算中，不同类型的数据先转换为同一类型，然后进行运算。（小数优先级高于整数）</p><ul><li><strong>强制类型转换</strong></li></ul><p>高到低</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//128</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//128.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>总结：</strong></li></ul><ol><li>不能对布尔类型进行转换。</li><li>不能把对象类型转换为不相干的类型</li><li>在吧高容量转换为低容量的时候，需要强制转换。</li><li>转换的时候可能存在内存溢出，或者精度问题。</li></ol><h4 id="2-7-变量"><a href="#2-7-变量" class="headerlink" title="2.7 变量"></a>2.7 变量</h4><p>Java是一门强类型语言，每一个变量必须声明其类型。</p><p>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p><p>格式：</p><p>​      数据类型 变量名 值;</p><p>作用域：</p><p>​    局部变量：类中方法内：局部变量必须声明和赋值</p><p>​    成员变量：类中方法外：示例变量从属于对象，如果不自行初始化，这个类型的默认值：0.0.0/布尔值默认是：false、除了基本类型，其余的默认是null</p><p>​    </p><h4 id="2-8-常量"><a href="#2-8-常量" class="headerlink" title="2.8 常量"></a>2.8 常量</h4><p>常量：初始化后不能变动的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> 数据类型 常量名 <span class="token operator">=</span> 常量值<span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修饰符不存在先后顺序。</p><h4 id="2-9运算符"><a href="#2-9运算符" class="headerlink" title="2.9运算符"></a>2.9运算符</h4><blockquote><p>算数运算符：+ 、-、*、/、++、–</p><p>赋值运算符：=</p><p>关系运算符：==、！=、&lt;、&gt;、&lt;=、&gt;=、instanceof</p><p>逻辑运算符：&amp;&amp; || !</p><p>位运算符：&amp; 、|、 ^、 &gt;&gt;、 &lt;&lt;、 &gt;&gt;&gt;</p><p>条件运算符：?</p><p>扩展赋值运算符：+=、-+、*=、/=</p></blockquote><ul><li><strong>一元运算符</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">自增 <span class="token operator">++</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//++在后，先赋值，后+1</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment">//++在前，先+1，再赋值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span><span class="token comment">//自减 --</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>逻辑运算符</strong></li></ul><p>与 and &amp;&amp;</p><p>或 or </p><p>非 取反</p><ul><li><strong>位运算</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">        <span class="token comment">/*        A = 0011 1100        B = 0000 1101-------------------------------------------------------        拿上面的数字跟下面的去比较        A&amp;B  如果两个都是1，才为1            = 0000 1100        A|B  如果对应为都是0，结果为0，否则是1 = 0011 1101        A^B  如果如果两个相同，则为0，否则为1  = 0011 0001        ~B   取反，如果是1则为0，如果是0则为1  = 1111 0010         */</span>面试题：<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">=</span> 怎么计算最快？<span class="token comment">/*2*8=16  2*2*2*2效率极高0000 0000  00000 0001  10000 0010  20000 0011  30000 0100  40000 1000  80001 0000  16 &lt;&lt; 左移  把数字 * 2 &gt;&gt; 右移  把数字 / 2 */</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16</span>面试题：<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b  <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1020</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>三元运算符</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">x <span class="token operator">?</span> y <span class="token operator">:</span> z如果x <span class="token operator">==</span> ture<span class="token punctuation">,</span>则结果为y，否则为z<span class="token class-name">String</span> flag <span class="token operator">=</span> score <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">?</span> <span class="token string">"不及格"</span> <span class="token operator">:</span> <span class="token string">"及格"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//及格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-10-包机制"><a href="#2-10-包机制" class="headerlink" title="2.10 包机制"></a>2.10 包机制</h4><p>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间。</p><p>包语句的语法格式为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span>  <span class="token namespace">pgk1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>pck2<span class="token punctuation">[</span><span class="token punctuation">.</span>pck3<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>package 必须放在类中所有语句的最上面（第一行代码）</p><p>导包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span>  <span class="token namespace">pgk1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>pck2<span class="token punctuation">[</span><span class="token punctuation">.</span>pck3<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>classname <span class="token operator">|</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、java流程控制"><a href="#三、java流程控制" class="headerlink" title="三、java流程控制"></a>三、java流程控制</h2><h4 id="3-1-Scanner-类"><a href="#3-1-Scanner-类" class="headerlink" title="3.1 Scanner 类"></a>3.1 Scanner 类</h4><p>通过scanner 类的next() 与nextLine()方法获取输入的字符串，在读取我们一般需要使用hashNext() 与 hasNextLine() 判断是否还有输入的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//从键盘接收数据</span>    <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用next方式接收："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断是否还有输入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//next() 只读取第一个字符串</span>        <span class="token comment">//String str = sc.next();</span>        <span class="token comment">//nextLine() 获取一行数据</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户输入是："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>next():</strong></p><ol><li>一定要读取到有效字符后才可以结束输入。</li><li>对输入有效字符之前遇到的空白，next（）方法会自动将其去掉。</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>next（）方法不能得到有空格的不能得到有空格的字符串</li></ol><p><strong>nextLine()</strong></p><ol><li>以Enter为结束符，也就是说 nextLine() 方法返回的是输入回车之前的所有字符</li><li>可以获得空白。</li></ol><h4 id="3-2-顺序结构"><a href="#3-2-顺序结构" class="headerlink" title="3.2 顺序结构"></a>3.2 顺序结构</h4><p>Java的基本结构就是顺序结构，除非特别指明，否则按照顺序一句一句执行。</p><p>语句与语句之间，框与框之间是按从上到下的顺序进行的，它是由于若干个依次执行的处理步骤组成的，它是任何一个算法都离不开的一种基本算法结构。</p><h4 id="3-3-选择结构"><a href="#3-3-选择结构" class="headerlink" title="3.3 选择结构"></a>3.3 选择结构</h4><p>​    我们很多时候需要去判断一个东西是否可行，然后我们才去执行，这样一个过程在程序中用if语句来表示。</p><p>语法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//如果布尔表达式为true，则进入if语句块了，执行里面代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/posts/javabase/image-20220219035217289.png" alt="image-20220219035217289"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//如果布尔表达式为true，则进入if语句块，执行里面代码</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>     <span class="token comment">//如果布尔表达式为false，则进入else语句块，执行里面代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/javabase/image-20220219035245048.png" alt="image-20220219035245048"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//如何布尔表达式1为true</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//如何布尔表达式2为true</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//如何布尔表达式3为true</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment">//如果以上的表达式都不满足，则执行这里</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/javabase/image-20220219035333623.png" alt="image-20220219035333623"></p><h4 id="3-4-switch-多选择语句"><a href="#3-4-switch-多选择语句" class="headerlink" title="3.4 switch 多选择语句"></a>3.4 switch 多选择语句</h4><p>switch case 语句判断一个变量和与一系列值中某个值相等，每个值称为一个分支，switch语句中的变量类型可以是：</p><ol><li>byte、short、int、或者是char</li><li>从 Java SE 7开始</li><li>switch 开始支持字符串 String 类型了</li><li><strong>同时case 标签必须为字符串常量或字面量</strong></li></ol><p>case 穿透现象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">swtich</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> value<span class="token operator">:</span>      <span class="token comment">//语句  </span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//可选</span>    <span class="token keyword">case</span> value<span class="token operator">:</span>      <span class="token comment">//语句  </span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//可选</span>    <span class="token keyword">default</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>可选       <span class="token comment">//语句  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-循环结构"><a href="#3-5-循环结构" class="headerlink" title="3.5 循环结构"></a>3.5 循环结构</h4><ul><li><strong>while循环</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//循环内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只要布尔表达式为true，循环就会一直执行下去</p><p>大多数情况是会让循环停止下拉，我们需要一个让表达式失效的方式来结束循环</p><p>少部分情况需要循环一直执行，比如服务器的请求响应监听等</p><ul><li>do..while循环</li></ul><blockquote><p>do..while 循环至少会让循环体里的语句执行一遍</p><p>while 先判断后执行</p><p>do..while x先执行后判断</p></blockquote><ul><li>for循环</li></ul><p>for循环的执行次数在执行前就确定了</p><blockquote><p>for(初始值；布尔表达式;迭代){</p><p>​    //代码语句</p><p>}</p></blockquote><p><strong>打印99乘法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>i<span class="token operator">*</span>j<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>break、continue</p><p>​    break 用于强行退出循环，不执行中循环体中剩余代码。</p><p>continue 用于终止某次循环过程，即跳过循环体尚未执行的语句，继续下一次循环</p><h2 id="四、Java方法"><a href="#四、Java方法" class="headerlink" title="四、Java方法"></a>四、Java方法</h2><blockquote><p>java方法是语句的集合，他们在一起执行一个功能。</p><ol><li>方法是解决一类问题的步骤的有序集合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他类中被调用</li></ol><p>设计方法的时候要保证方法的原子性，就是一个方法只完成一个功能</p></blockquote><h4 id="4-1-方法的定义："><a href="#4-1-方法的定义：" class="headerlink" title="4.1 方法的定义："></a>4.1 <strong>方法的定义：</strong></h4><p>Java的方法类似于其他语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义一个方法包含以下语法。</p><ol><li>修饰符：修饰符，这个是可选的，告诉编译器如何调用该方法，定义该方法的访问类型</li><li>返回值类型：</li></ol><p>​        方法可能会有返回值，return Value Type是方法返回值的数据类型。</p><p>​        有些方法可能没有返回值。在这种情况下，return Value Type 是关键字void</p><ol start="3"><li>方法名：是方法的实际名称</li><li>参数类型：<ol><li>参数像一个占位符。当方法 被调用时，传值给参数这个值被称为实参或者变量</li><li>参数列表是指方法的参数类型、顺序、参数个数</li><li>参数是可选的，方法可以不包含任何参数</li></ol></li><li>方法体：方法体包含具体的语句，定义该方法的功能</li></ol><p>格式</p><blockquote><p>对象名.方法名([参数]) </p><p>了解：值传递、引用传递</p></blockquote><h4 id="4-2-方法重载"><a href="#4-2-方法重载" class="headerlink" title="4.2 方法重载"></a>4.2 方法重载</h4><p>​    重载就是在<strong>一个类</strong>中，有相同的函数名称，但是形参不同的函数</p><ul><li>方法重载的规则：<ul><li>方法名称必须相同</li><li>参数列表必须不同<ul><li>参数个数、参数类型、参数位置排列不同等</li></ul></li><li>返回值类型可以相同也可以不相同</li></ul></li></ul><p>注意：仅仅返回值类型不同不足以成为方法的重载</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现理论：</p><p>​    方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，编译器报错.</p><h4 id="4-3-可变参数"><a href="#4-3-可变参数" class="headerlink" title="4.3 可变参数"></a>4.3 可变参数</h4><p>jdk1.5开始，Java支持传递同类型的可变参数给一个方法</p><p>在方法声明中，在指定参数类型后加一个省略号(…)</p><p>​    一个方法中只能传递一个可变参数，它必须是方法的font color = blue &gt;最后一个参数。任何普通参数必须在它之前声明。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//可变参数返回数组</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-递归"><a href="#4-4-递归" class="headerlink" title="4.4 递归"></a>4.4 递归</h4><p>A方法调用B方法，很容易理解</p><p>递归就是：A方法调用A方法，就是自己调用自己</p><p>递归结构包含两个部分：</p><p>递归头：什么时候不调用自身方法，如果没有头，将陷入死循环</p><p>递归体：什么时候调用自身方法</p><p>什么是阶乘？</p><p>阶乘就是值从1乘以2乘以3乘以4一直乘到所要求的数</p><p>例如所要求的的数就是4，则阶乘式是1 * 2  * 3 * 4，得到的积是24,24就是4的阶乘。</p><p>求阶乘</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//求4的阶乘</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>使用栈的机制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/javabase/image-20220220221610391.png" alt="image-20220220221610391"></p><h2 id="五、数组"><a href="#五、数组" class="headerlink" title="五、数组"></a>五、数组</h2><h4 id="5-1-数组的定义"><a href="#5-1-数组的定义" class="headerlink" title="5.1 数组的定义"></a>5.1 数组的定义</h4><blockquote><ol><li>数组是相同类型数据的有序集合</li><li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成</li><li>其中，每一个数据称作一个数组元素，每一个数组元素通过一个下标来访问他们。<ol><li>数组下标从0开始</li></ol></li></ol></blockquote><h4 id="5-2-数组声明和创建"><a href="#5-2-数组声明和创建" class="headerlink" title="5.2 数组声明和创建"></a>5.2 数组声明和创建</h4><p>在类型后面加[] 或者在数组后面加[]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">dataType 数组名<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> dataType<span class="token punctuation">[</span>数组长度<span class="token punctuation">]</span>dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> dataType<span class="token punctuation">[</span>数组长度<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/posts/javabase/image-20220220223446502.png" alt="image-20220220223446502"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取数组长度</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组长度是："</span><span class="token operator">+</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>数组长度是：<span class="token number">10</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-3-Java内存分析"><a href="#5-3-Java内存分析" class="headerlink" title="5.3 Java内存分析"></a>5.3 Java内存分析</h4><p>堆 </p><p>​    存储new 出来的对象和数组</p><p>可以被所有的线程共享，不会存放别的对象引用</p><p>栈</p><p>​    存放基本变量类型（会包括这个基本类型的具有数值）</p><p>​    引用类型变量（会存放这个引用在堆里面的具体地址）</p><p>方法区</p><p>​    可以被所有线程共享</p><p>​    包含了所有的class和static变量</p><p><img src="/posts/javabase/image-20220221154617007.png" alt="image-20220221154617007"></p><h4 id="5-4-三种初始化"><a href="#5-4-三种初始化" class="headerlink" title="5.4 三种初始化"></a>5.4 三种初始化</h4><ol><li>静态初始化 -创建+赋值</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>动态初始化 -包含默认初始化</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>动态初始化包含：数组的默认初始化</p><p>​    数组是引用类型。它的元素相当于类的实例变量，因此数组已经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化、</p><h4 id="5-5-数组的四个基本特点"><a href="#5-5-数组的四个基本特点" class="headerlink" title="5.5 数组的四个基本特点"></a>5.5 数组的四个基本特点</h4><ol><li>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的</li><li>其元素必须是相同类型，不允许出现混合类型。</li><li>数组的元素可以是任意数据类型，包括基本类型和引用类型、</li><li>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中，因此数组无论保存原始类型还是其他对象类型，数组对象本身在堆中</li></ol><p><strong>ArrayIndexOutOfBoundsException：数组下标越界异常！</strong></p><p>总结：</p><pre><code>1. 数组是相同数据类型的有序集合1. 数组也是对象。数组元素相当于对象的成员变量1. 数组长度是确定的，不可改变</code></pre><h4 id="5-6-求数组最大值"><a href="#5-6-求数组最大值" class="headerlink" title="5.6 求数组最大值"></a>5.6 求数组最大值</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组的最大值是："</span><span class="token operator">+</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-7-打印数组"><a href="#5-7-打印数组" class="headerlink" title="5.7 打印数组"></a>5.7 打印数组</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-8-反转数组"><a href="#5-8-反转数组" class="headerlink" title="5.8 反转数组"></a>5.8 反转数组</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-9-多维数组"><a href="#5-9-多维数组" class="headerlink" title="5.9 多维数组"></a>5.9 多维数组</h4><p>多维数组可以看成是数组的数组。比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>定义了一个<span class="token number">3</span>行<span class="token number">2</span>列的数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/posts/javabase/image-20220221160738626.png" alt="image-20220221160738626"></p><h4 id="5-10-Arrays-类"><a href="#5-10-Arrays-类" class="headerlink" title="5.10 Arrays 类"></a>5.10 Arrays 类</h4><ol><li>数组的工具类java.utils.Arrays</li><li>由于数组对象本身没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用</li><li>Arrays 类中的方法都是static修饰的静态动作，在使用的时候可以直接使用类名，进行调用。</li><li>具备以下常用功能<ol><li>给数组赋值：通过fill方法</li><li>给数组排序：通过sort方法，按升序</li><li>比较数组：通过equals方法比较数组中元素值是否相等</li><li>查找数组元素：通过binarySearch 方法对排序号的数组进行二分查找法操作</li></ol></li></ol><p><strong>Arrays.toString实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"null"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> iMax <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iMax <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> iMax<span class="token punctuation">)</span>            <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">']'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-11-冒泡排序"><a href="#5-11-冒泡排序" class="headerlink" title="5.11 冒泡排序"></a>5.11 冒泡排序</h4><p>​    冒泡排序无疑是最出名的排序算法之一，总共有八大排序！</p><p>​    冒泡排序、两层循环、外层冒泡轮数、里层依次比较。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//1.比较数组中两个相邻的元素，如果第一个数比第二个数大，就交互位置</span>    <span class="token comment">//2.每一次比较，都会产生一个最大，或者最小的数字</span>    <span class="token comment">//3.下一轮可以少一次排序</span>    <span class="token comment">//4.依次循环，直到结束！</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//外层循环，判断我们这个要走几次</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//内层循环，比较判断两个数，如果第一个数比第二个数大，则交换位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-12-稀疏数组"><a href="#5-12-稀疏数组" class="headerlink" title="5.12 稀疏数组"></a>5.12 稀疏数组</h4><p>当一个数组中大部分元素为0，或者为同一值的数组时候，可以使用稀疏数组来保存该数组。</p><p>稀疏数组的处理方式是：</p><p>​    记录数组一共有几行几列，有多少个不同值</p><p>​    把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</p><p><img src="/posts/javabase/image-20220224140757825.png" alt="image-20220224140757825"></p><p>控制台输出</p><p><img src="/posts/javabase/image-20220224140842400.png" alt="image-20220224140842400"></p><p>全部代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> P1 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个11 * 11的二维数组，0为 默认 1为白子、2为黑子</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//打印二维数组</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原二维数组======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取维数组的有效值</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>anInt <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二维数组的有效值是："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构建稀疏数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//遍历二维数组，为稀疏数组赋值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    arr2<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    arr2<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    arr2<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换为稀疏数组================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//还原</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还原"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr3<span class="token punctuation">[</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">print</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 打印二维数组     *     * @param arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"[ "</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、面向对象编程"><a href="#六、面向对象编程" class="headerlink" title="六、面向对象编程"></a>六、面向对象编程</h2><h4 id="6-1-面向过程-amp-面向对象"><a href="#6-1-面向过程-amp-面向对象" class="headerlink" title="6.1 面向过程&amp;面向对象"></a>6.1 面向过程&amp;面向对象</h4><p>面向过程思想：</p><p>​    步骤清晰简单、第一步做什么、第二步做什么</p><p>​    面向过程适合处理一些较为简单的问题</p><p>面向对象思想：</p><p>​    分类的思维模式，解决问题首先会解决问题需要那些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</p><p>什么是面向对象?</p><p>​    面向对象编程(OOP)</p><p>​    面向对象编程的本质就是：以类的方式组织代码，以对象的方式组织(封装)数据；</p><p>三大特性：</p><ol><li>封装</li><li>继承</li><li>多态</li></ol><p>从认识角度考虑是先有对象后有类。对象，是具体的事务。类是抽象的，是对对象的抽象</p><p>从代码运行角度考虑是先有类后有对象。类是对象的模板</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/posts/managermodel/"/>
      <url>/posts/managermodel/</url>
      
        <content type="html"><![CDATA[<h2 id="一、设计模式七大原则"><a href="#一、设计模式七大原则" class="headerlink" title="一、设计模式七大原则"></a>一、设计模式七大原则</h2><h4 id="1-1-单一职责原则"><a href="#1-1-单一职责原则" class="headerlink" title="1.1 单一职责原则"></a>1.1 单一职责原则</h4><ol><li>降低类复杂度，一个类只负责一项职责。</li><li>提高类的可读性、可维护性</li><li>只要逻辑足够简单，类中的方法数量足够少，可以违反单一职责原则。</li></ol><h4 id="1-2-接口隔离原则"><a href="#1-2-接口隔离原则" class="headerlink" title="1.2 接口隔离原则"></a>1.2 接口隔离原则</h4><ol><li>一个类对另一个类的依赖应该建立在最小的接口上</li></ol><h4 id="1-3-依赖倒转原则"><a href="#1-3-依赖倒转原则" class="headerlink" title="1.3 依赖倒转原则"></a>1.3 依赖倒转原则</h4><ol><li>核心是面向接口编程</li><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li></ol><p>注意事项：</p><ol><li>低模块尽量都要有抽象类或者接口，或者两者都有，程序稳定性更好。</li><li>变量的声明类型尽量是抽象类或者接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化</li><li>继承时遵循里式替换原则</li></ol><h4 id="1-4-里式替换原则"><a href="#1-4-里式替换原则" class="headerlink" title="1.4 里式替换原则"></a>1.4 里式替换原则</h4><ol><li>所有引用基类的地方能够透明地使用其子类的对象</li><li>在使用继承时，遵循里式替换原则，在子类中尽量不要重写父类的方法</li><li>继承实际让两个类耦合性增强了，可通过聚合、组合、依赖解决问题</li></ol><p>-&gt; 通用做法是：原来的父类和子类都继承了一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合、组合等 </p><h4 id="1-5-开闭原则"><a href="#1-5-开闭原则" class="headerlink" title="1.5 开闭原则"></a>1.5 开闭原则</h4><ol><li>最基础、重要的设计原则</li><li>开：对功能的扩展开放（对提供方）；关：修改关闭（使用方）</li><li>ocp: 尽量通过扩展软件实体的行为，不是通过修改已有代码</li></ol><p>-&gt; 将父类做成抽象类，并提供一个抽象方法，让子类去继承实现。如此我们有新的种类时，只需要让新的种类继承父类，实现抽象方法即可，使用方的代码就不需要关闭。满足开闭原则</p><h4 id="1-6-迪米特法则"><a href="#1-6-迪米特法则" class="headerlink" title="1.6 迪米特法则"></a>1.6 迪米特法则</h4><ol><li>最少知道原则，即一个类对自己依赖的类知道的越少越好，即降低耦合度；对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。</li><li>直接‘朋友’：每个对象都会有与其他对象有耦合关系，耦合方式很多：依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数和方法的返回值中的类为直接朋友；而出现在局部变量中的类不是直接朋友，也就是说，陌生的对象/类 不要以局部变量的形式出现在类的内部。</li></ol><p>注意事项：迪米特法则核心是降低类之间的耦合。</p><h4 id="1-7-合成复用原则"><a href="#1-7-合成复用原则" class="headerlink" title="1.7 合成复用原则"></a>1.7 合成复用原则</h4><ol><li>原则是尽量使用合成/聚合的方式，而不是使用继承</li></ol><ul><li> 设计原则核心思想</li></ul><ol><li>找出应用中需要修改的地方，把它们独立出来，跟不需要修改的代码隔离。</li><li>针对接口编程，而不是针对实现编程。</li><li>为了交互对象之间的松耦合设计</li></ol><h2 id="二、UML图"><a href="#二、UML图" class="headerlink" title="二、UML图"></a>二、UML图</h2><ol><li><h5 id="uml基本详情"><a href="#uml基本详情" class="headerlink" title="uml基本详情"></a>uml基本详情</h5></li></ol><ul><li>是一种用于软件系统分析和设计的语言工具</li></ul><ol start="2"><li><h5 id="uml图"><a href="#uml图" class="headerlink" title="uml图"></a>uml图</h5></li></ol><ul><li>用例图</li><li>静态结构图：类图、对象图、包图、组件图、部署图</li><li>动态行为图：交互图（时序图与协作图）、状态图、活动图</li></ul><p>说明：</p><ul><li>类图是描述类与类（对象）的静态关系，是uml图中最核心的</li><li>类之间的关系：依赖、泛化（继承）、实现、关联、聚合与组合。</li></ul><ol start="3"><li><h5 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h5></li></ol><h4 id="2-1-依赖"><a href="#2-1-依赖" class="headerlink" title="2.1 依赖"></a>2.1 <strong>依赖</strong></h4><p> -&gt; 主要在类中用到了对方，他们之间就存在依赖</p><p>依赖的构成：</p><ol><li>类的成员属性</li><li>方法的返回类型</li><li>接收的参数类型</li><li>方法中使用到</li></ol><p><img src="/posts/managermodel/image-20220106150455146.png" alt="image-20220106150455146"></p><h4 id="2-2-泛化"><a href="#2-2-泛化" class="headerlink" title="2.2 泛化"></a>2.2 <strong>泛化</strong></h4><p>：实际上就是继承关系，是依赖关系的特立。</p><p>-&gt;如果A类继承了B类，我们就能说是A和B存在泛化关系</p><p><img src="/posts/managermodel/image-20220106152007624.png" alt="image-20220106152007624"></p><h4 id="2-3-实现"><a href="#2-3-实现" class="headerlink" title="2.3 实现"></a>2.3 <strong>实现</strong></h4><p>：实现关系实际上就是A类实现B接口，他是依赖关系的特例；</p><p><img src="/posts/managermodel/image-20220106152202745.png" alt="image-20220106152202745"></p><h4 id="2-4-关联关系"><a href="#2-4-关联关系" class="headerlink" title="2.4 关联关系"></a>2.4 <strong>关联关系</strong></h4><ol><li>关联关系实际上就是类与类之间的关系，他是依赖关系的特例。</li><li>关联具有导航性，即双向关系或者单向关系（单向一对一关系、双向一对一关系）</li><li>关系具有多重性（一对一，多对多）</li></ol><h4 id="2-5-聚合关系"><a href="#2-5-聚合关系" class="headerlink" title="2.5 聚合关系"></a>2.5 <strong>聚合关系</strong></h4><ol><li>表示整体和部分的关系，整体与部门可以分开。聚合关系是关联关系的特例；所以它具有关联的导航性（B聚合A）与多重性（多个属性聚合了A）。</li></ol><p><img src="/posts/managermodel/image-20220106165140344.png" alt="image-20220106165140344"></p><h4 id="2-6-组合关系"><a href="#2-6-组合关系" class="headerlink" title="2.6 组合关系"></a>2.6 组合关系</h4><ol><li>组合关系也是整体与部分的关系，但是整体与部分不能分开。</li></ol><p><img src="/posts/managermodel/image-20220106165428700.png" alt="image-20220106165428700"></p><p>聚合和组合区别：</p><p> 聚合中整体与部分能看；组合中整体与部分不能分开</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">IDCard</span> card<span class="token punctuation">;</span><span class="token comment">//聚合</span>    <span class="token keyword">private</span> <span class="token class-name">Head</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//组合</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Head</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/managermodel/image-20220106172854711.png" alt="image-20220106172854711"></p><p>-&gt; 如果在程序中Person实体中定义了对IDCard进行级联删除，即删除Person时连同IDCard一起删除，那么IDCard和Person就是组合了</p><h2 id="三、设计模式分类"><a href="#三、设计模式分类" class="headerlink" title="三、设计模式分类"></a>三、设计模式分类</h2><ul><li><p>./设计模式分为三种类型，共23种</p><ol><li><strong>创建型模式</strong>：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式、</li><li><strong>结构型模式</strong>：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</li><li><strong>行为型模式</strong>：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter模式）、状态模式、策略模式、职责链模式（责任链模式）。</li></ol></li><li><p>./设计模式介绍：</p><ol><li>模式不是代码，是某类问题的通用解决方案。</li><li>本质上是提高软件的维护性、通用性和扩展性，并降低软件的复杂度。</li></ol></li></ul><h4 id="3-1-单例模式"><a href="#3-1-单例模式" class="headerlink" title="3.1 单例模式"></a>3.1 <strong>单例模式</strong></h4><p>-&gt; 采用方法，对某个类只能存在一个对象实例，并该类只提供一个取得其对象实例的方法（静态方法）。</p><h5 id="3-1-1单例模式八种写法"><a href="#3-1-1单例模式八种写法" class="headerlink" title="3.1.1单例模式八种写法"></a>3.1.1<strong>单例模式八种写法</strong></h5><ol><li>*<em>饿汉式（静态常量）**</em></li><li>*<em>饿汉式（静态代码块）**</em></li><li>懒汉式（线程不安全）</li><li>懒汉式（线程安全，同步方法）</li><li>懒汉式（线程不安全，同步代码块）</li><li>*<em>双重检查**</em></li><li>*<em>静态内部类**</em></li><li>*<em>枚举**</em></li></ol><h4 id="3-2-饿汉式（静态常量）"><a href="#3-2-饿汉式（静态常量）" class="headerlink" title="3.2 饿汉式（静态常量）"></a>3.2 <strong>饿汉式（静态常量）</strong></h4><p>-&gt;应用实例：</p><ol><li>构造器私有化 （防止其他对象/类 创建对象(new)）</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法 getInstance</li><li>代码实现</li></ol><p> <strong>优缺点说明：</strong></p><ol><li>优点：这种写法简单，在类装载的时候就完成实例化。避免了线程同步问题。</li><li>缺点：在类装载时就完成实例化，没有达到Lazy Loading（懒加载）的效果。例如：如果从未用过这个实例的话，就会造成内存的浪费。</li><li>这种方式基于classloder机制避免了多线程的同步问题，不过,instance在类装载时候就实例化了，在单例模式中大多数都是在调用getInstance方法，但是导致类装载的原因有很多种，不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化Instance就没有达到lazy loading的效果</li><li>饿汉式（静态常量）这种单例模式<strong>可用</strong>，但是可能造成内存浪费。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atiguigu1<span class="token punctuation">.</span>singleton</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton</span> instance2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hasCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hasCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token comment">//1、构造器私有化，外部能New</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token comment">//2、本类内部创建对象实例</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.提供一个公有的静态方法，返回实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3饿汉式（静态代码块）"><a href="#3-3饿汉式（静态代码块）" class="headerlink" title="3.3饿汉式（静态代码块）"></a>3.3<strong>饿汉式（静态代码块）</strong></h4><p><strong>优缺点说明</strong>：</p><ol><li>这种方式和上面饿汉式（静态常量）的方式类似，只不过将实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化的实例。优缺点和上面的一样的。<ol><li>饿汉式（静态代码块）这种    单例模式<strong>可用</strong>，但是也是可能造成内存浪费。</li></ol></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//在静态代码块中，创建单例对象</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-懒汉式（线程不安全）"><a href="#3-4-懒汉式（线程不安全）" class="headerlink" title="3.4 懒汉式（线程不安全）"></a>3.4 <strong>懒汉式（线程不安全）</strong></h4><p><strong>优缺点说明</strong>：</p><ol><li>起到了Lazy Loading的效果，但是只能在单线程下使用。</li><li>如果在多线程下，一个线程进入方法中的if判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例，所以在多线程环境下不可使用这种方式。</li><li>结论：在实际开发中，不使用懒汉式。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//懒汉式（线程不安全）</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">//提供一个静态的共有方法，当使用该方法的时候，才去创建instance</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-懒汉式（线程安全，同步方法）"><a href="#3-5-懒汉式（线程安全，同步方法）" class="headerlink" title="3.5 懒汉式（线程安全，同步方法）"></a>3.5 <strong>懒汉式（线程安全，同步方法）</strong></h4><p><strong>优缺点说明</strong>：</p><p>-&gt;在静态getInstance()方法前面加 synchronized</p><ol><li>解决了线程不安全问题</li><li>效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法我们需求是只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低了。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//懒汉式（线程安全，同步方法）</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">//提供了一个静态的共有方法，加入同步处理的代码，解决线程安全问题</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-懒汉式（线程不安全，同步代码块）"><a href="#3-6-懒汉式（线程不安全，同步代码块）" class="headerlink" title="3.6 懒汉式（线程不安全，同步代码块）"></a>3.6 <strong>懒汉式（线程不安全，同步代码块）</strong></h4><p>-&gt; 这种港式，本事想对第四种{ 懒汉式（线程安全，同步方法）}实现方式的改进，因为同步方法效率态度，改为同步方法里面的产生实例化的代码块。</p><p>但是这种同步并不能起到线程同步的作用。跟第三种实现方式遇到的情形一致，假如一个线程进入了if(singleton == null)判断语句块中，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便回产生多个实例。不能保证线程安全。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7-双重检查"><a href="#3-7-双重检查" class="headerlink" title="3.7 双重检查"></a>3.7 双重检查</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//双重检查</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">//提供一个静态的公有方法，加入双重检查代码，解决线程安全问题，同时解决懒加载问题</span>    <span class="token comment">//同时保证了效率，推荐使用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明</strong>：</p><ol><li>Double-Check概念是多线程开发中常用到的，代码中，我们进行了两次if(singleton == null)检查，可以保证线程安全。</li><li>实例化代码只用了一次，后面再次访问时，判断if(singleton == null),直接return实例化对象；延迟加载；效率较高</li><li>实际开发中，推荐使用双重检查做单例设计模式（推荐使用）</li></ol><h4 id="3-8-静态内部类"><a href="#3-8-静态内部类" class="headerlink" title="3.8 静态内部类"></a>3.8 静态内部类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//静态内部类</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">//写一个静态内部类，该类中有一个静态属性Singleton</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstance</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//提供一个静态的公有方法，直接返回SingletonInstance.INSTANCE</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonInstance</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明</strong>：</p><ol><li>采用了类装载的机制来保证初始化实例时只有一个线程</li><li>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</li><li>类的静态属性只会在第一次加载类的时候初始化，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程无法进入。</li><li>避免了线程不安全，利用静态内部类特点实现延迟加载，效率高（推荐使用）</li></ol><h4 id="3-9-枚举"><a href="#3-9-枚举" class="headerlink" title="3.9 枚举"></a>3.9 枚举</h4><pre class="line-numbers language-.java" data-language=".java"><code class="language-.java">public class SingletonTest {    public static void main(String[] args) {        Singleton instance = Singleton.INSTANCE;        Singleton instance2 = Singleton.INSTANCE;        System.out.println(instance == instance2);        System.out.println(instance.hashCode());        System.out.println(instance2.hashCode());        instance.sayOK();    }}enum Singleton {    INSTANCE;    public void sayOK(){        System.out.println("yyds");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明</strong>：</p><ol><li>借助JDK1.5中添加的枚举来实现单例模式，不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。（推荐使用）</li></ol><ul><li><strong>单例模式注意事项和细节说明</strong></li></ul><ol><li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</li><li>当想实例化一个单例类的时候，必须记住使用相应的获取对象的方法，而不是使用new</li><li>单例模式使用的场景：需要频繁的进行创建和销毁的对象，创建对象时耗时过多或者耗费资源过多（即：重量级对象），但又经常用到的对象，工具类对象、频繁访问数据库或文件的对象（比如数据源、session工厂等）</li></ol><h2 id="四、工厂模式"><a href="#四、工厂模式" class="headerlink" title="四、工厂模式"></a>四、工厂模式</h2><ul><li><p>工厂模式的意义</p><p>将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展和维护。</p></li><li><p>三种工厂模式(简单工厂模式、工厂方法模式、抽象工厂模式)</p></li><li><p>设计模式的依赖抽象原则（不要依赖具体类）</p></li></ul><p>注意：</p><ol><li>创建对象实例时，不要直接new类，而是把这个new类的动作放在一个工厂的方法中，并返回。（变量不要直接持有具体类的引用）</li><li>不要让类继承具体类，而是继承抽象类或者是实现interface（接口）</li><li>不要覆盖基类中已经实现的方法</li></ol><p>Pizza项目需求：</p><ol><li>披萨种类（GreekPizza、CheesePizza）</li><li>披萨的制作过程：prepare、bake、cut、box</li><li>完成披萨订单功能</li></ol><h4 id="4-1-传统方式"><a href="#4-1-传统方式" class="headerlink" title="4.1 传统方式"></a>4.1 传统方式</h4><p><img src="/posts/managermodel/image-20220110140955752.png" alt="image-20220110140955752"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Pizza实体</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//不同的Pizza不同的制作方法，做成一个抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"bake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"cutting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"boxing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//CheesePizza</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 给制作奶酪披萨 准备原材料 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//OrderPizza pizza制作过程</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token comment">// 构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 订购披萨的类型</span>        <span class="token class-name">String</span> orderType<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"greek"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GreekPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">" greek披萨 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">" cheese披萨 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//输出pizza 制作过程</span>            pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//getType方法，可以获取客户希望订购的披萨种类</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza 种类:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//pizza订单</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>传统方式的优缺点</li></ul><ol><li><p>优点是好理解，简单易操作</p></li><li><p>缺点是违反了设计模式的ocp原则，即<strong>对扩展开放，对修改关闭</strong>。即当我们给类增加新功能的时候，尽量不修改代码，或者可能少修改代码。</p></li><li><p>例如，如果我们在上面功能还要再加新的Pizza种类，我们要修改如下</p><p>新增（扩展开放）：</p><p><img src="/posts/managermodel/image-20220111100736460.png" alt="image-20220111100736460"></p><p>修改（修改关闭）：-&gt;如果增加一个pizza类，主要是订购pizza的代码都要修改</p></li></ol><p><img src="/posts/managermodel/image-20220110141535993.png" alt="image-20220110141535993"></p><ul><li><strong>简单工厂模式进行修改</strong></li></ul><p>把创建pizza对象封装到一个类中，这样我们有新的pizza种类时，只需要修改该类即可，其它有创建到Pizza对象的代码就不需要修改了</p><h4 id="4-2-简单工厂模式"><a href="#4-2-简单工厂模式" class="headerlink" title="4.2 简单工厂模式"></a>4.2 简单工厂模式</h4><ul><li><strong>基本介绍</strong></li></ul><ol><li>简单工厂模式是属于创建型模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式。</li><li>定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码）。</li><li>在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式。</li></ol><p><img src="/posts/managermodel/image-20220110142218814.png" alt="image-20220110142218814"></p><ul><li>实例代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 新增加pizza种类 简单工厂创建用来实例化对象的代码 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token punctuation">{</span>    <span class="token comment">//更改orderType 返回对应的Pizza 对象 简单工厂模式1</span>    <span class="token keyword">public</span>  <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用简单工厂模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"greek"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GreekPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">" 希腊披萨 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">" 奶酪披萨 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//简单工厂模式 也叫 静态工厂模式 简单工厂模式2</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza2</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用简单工厂模式2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"greek"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GreekPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">" 希腊披萨 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">" 奶酪披萨 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment">/** * 简单工厂模式1 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza2</span> <span class="token punctuation">{</span>    <span class="token comment">//定义一个简单工厂对象</span>    <span class="token class-name">SimpleFactory</span> simpleFactory<span class="token punctuation">;</span>    <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza2</span><span class="token punctuation">(</span><span class="token class-name">SimpleFactory</span> simpleFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setFactory</span><span class="token punctuation">(</span>simpleFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFactory</span><span class="token punctuation">(</span><span class="token class-name">SimpleFactory</span> simpleFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//用户输入</span>        <span class="token class-name">String</span> orderType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment">//设置简单工厂对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>simpleFactory <span class="token operator">=</span> simpleFactory<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>simpleFactory<span class="token punctuation">.</span><span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出pizza</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pizza <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订购披萨失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 写一个方法，可以获取客户希望订购的披萨种类</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza 种类:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 简单工厂模式2 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza3</span> <span class="token punctuation">{</span>    <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> orderType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza <span class="token operator">=</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">.</span><span class="token function">createPizza2</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出pizza</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pizza <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 订购披萨失败 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 写一个方法，可以获取客户希望订购的披萨种类</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza 种类:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * main方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//常规方式</span><span class="token comment">//        new OrderPizza();</span>        <span class="token comment">//简单工厂模式1</span><span class="token comment">//        new OrderPizza2(new SimpleFactory());</span>        <span class="token comment">//简单工厂模式2</span>        <span class="token keyword">new</span> <span class="token class-name">OrderPizza3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-工厂方法模式"><a href="#4-3-工厂方法模式" class="headerlink" title="4.3 工厂方法模式"></a>4.3 工厂方法模式</h4><ul><li><p>工厂方法模式介绍</p><ol><li>工厂方法模式设计方案：将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现。</li><li>工厂方法模式：定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化推迟到子类。</li></ol><p>披萨项目新的需求：客户在点披萨时，可以点不同口味的披萨，比如 BJCheessPizza，BJPepperPizza，LDCheessPizza，LDPepperPizza</p></li></ul><p><img src="/posts/managermodel/image-20220110160727209.png" alt="image-20220110160727209"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 将Pizza 类做成抽象 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//准备原材料, 不同的披萨不一样，因此，我们做成抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" baking;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" cutting;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" boxing;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJCheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"北京的奶酪pizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 北京的奶酪pizza 准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJPepperPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"北京的胡椒pizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 北京的胡椒pizza 准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 工厂模式 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token comment">//定义一个抽象方法，createPizza , 让各个工厂子类自己实现</span>    <span class="token keyword">abstract</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 订购披萨的类型</span>        <span class="token class-name">String</span> orderType<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//抽象方法，由工厂子类完成</span>            pizza <span class="token operator">=</span> <span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出pizza制作过程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pizza <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订购失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 写一个方法，可以获取客户希望订购的披萨种类</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza 种类:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJOrderPizza</span> <span class="token keyword">extends</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//main</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">BJOrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-抽象工厂模式"><a href="#4-4-抽象工厂模式" class="headerlink" title="4.4 抽象工厂模式"></a>4.4 抽象工厂模式</h4><ul><li><strong>基本介绍</strong></li></ul><ol><li>抽象工厂模式：定义了一个interface用于创建相关或有依赖关系的对象簇，而无需指明具体的类。</li><li>抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合。</li><li>从设计层面看，抽象工厂模式就是对简单工厂模式的改进（进一步的抽象）。</li><li>将工厂抽象成两层，AbsFactory(抽象工厂)和具体实现的工厂子类。可以根据创建对象类型使用对应的工厂子类。这样将单个的简单工厂类变成工厂簇。更利于代码的维护和扩展。</li></ol><p><img src="/posts/managermodel/image-20220110172306164.png" alt="image-20220110172306164"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 将Pizza 类做成抽象 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//准备原材料, 不同的披萨不一样，因此，我们做成抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" baking;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" cutting;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" boxing;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//实现抽象类1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJCheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"北京的奶酪pizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 北京的奶酪pizza 准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//实现抽象类2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJPepperPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"北京的胡椒pizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 北京的胡椒pizza 准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 一个抽象工厂模式的抽象层(接口) */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbsFactory</span> <span class="token punctuation">{</span>    <span class="token comment">//让下面的工厂子类来 具体实现</span>    <span class="token keyword">public</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//实现抽象工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbsFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~使用的是抽象工厂模式~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//封装方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token class-name">AbsFactory</span> factory<span class="token punctuation">;</span>    <span class="token comment">// 构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token class-name">AbsFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setFactory</span><span class="token punctuation">(</span><span class="token class-name">AbsFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> orderType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// factory 可能是北京的工厂子类，也可能是伦敦的工厂子类</span>            pizza <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pizza <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 订购ok</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订购失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 写一个方法，可以获取客户希望订购的披萨种类</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza 种类:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//main方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BJFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、原型模式"><a href="#五、原型模式" class="headerlink" title="五、原型模式"></a>五、原型模式</h2><p><strong>题型</strong>：克隆sheep</p><p>现在有一只羊tom，姓名为:tom，年龄为:1，颜色为:白色，请编写程序创建和tom羊属性完全相同的10只羊。</p><p><img src="/posts/managermodel/image-20220111103454825.png" alt="image-20220111103454825"></p><h4 id="5-1-传统方式"><a href="#5-1-传统方式" class="headerlink" title="5.1 传统方式"></a>5.1 传统方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Sheep [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", color="</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//传统的方法</span><span class="token class-name">Sheep</span> sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"白色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Sheep</span> sheep2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Sheep</span> sheep3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Sheep</span> sheep4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Sheep</span> sheep5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//....</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>传统格式的优缺点</strong></p><ol><li>优点是比较好理解，简单易操作。</li><li>在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率低。</li><li>总是需要重新初始化对象，而不是动态地获得对象运行时的状态，不灵活。</li></ol><p>改进：java中Object类是所有类的根类，Object类提供了一个clone()方法，该方法可以将一个java对象复制一份，但是需要实现clone的Java类必须实现一个接口Cloneable，该接口表示该类能够复制且具有复制的能力-》原型模式</p><h4 id="5-2-原型模式"><a href="#5-2-原型模式" class="headerlink" title="5.2 原型模式"></a>5.2 原型模式</h4><p><strong>基本介绍</strong></p><ol><li>原型模式（Prototype）：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象</li><li>原型模式是一种创建型设计模式，允许一个对象再创建另一个可定制的对象，无需知道如何创建的细节。</li><li>工作原理是：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，即，对象.clone()</li></ol><p><img src="/posts/managermodel/image-20220111103815844.png" alt="image-20220111103815844"></p><p>-<strong>&gt;原型结构图说明</strong></p><ol><li>Prototype：原型类，声明一个克隆自己的接口。</li><li>ConcretePrototype：具体的原型类，实现一个克隆自己的操作</li><li>Client：让一个原型对象克隆自己，从而创建一个新的对象（属性一样）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">"蒙古羊"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Sheep</span> friend<span class="token punctuation">;</span> <span class="token comment">//是对象, 克隆是会如何处理</span>    <span class="token keyword">public</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Sheep [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", color="</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">", address="</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Sheep</span> sheep <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            sheep <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Sheep</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//            e.printStackTrace();</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sheep<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">||</span><span class="token operator">||</span><span class="token operator">|</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原型模式完成对象的创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sheep</span> sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"白色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sheep<span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"黑色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sheep</span> sheep2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Sheep</span><span class="token punctuation">)</span>sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//克隆</span>        <span class="token class-name">Sheep</span> sheep3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Sheep</span><span class="token punctuation">)</span>sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//克隆</span>        <span class="token class-name">Sheep</span> sheep4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Sheep</span><span class="token punctuation">)</span>sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//克隆</span>        <span class="token class-name">Sheep</span> sheep5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Sheep</span><span class="token punctuation">)</span>sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//克隆</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sheep2 ="</span> <span class="token operator">+</span> sheep2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sheep2 ="</span> <span class="token operator">+</span> sheep3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sheep2 ="</span> <span class="token operator">+</span> sheep4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sheep2 ="</span> <span class="token operator">+</span> sheep5<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sheep2 ="</span> <span class="token operator">+</span> sheep2 <span class="token operator">+</span> <span class="token string">"sheep2.friend="</span> <span class="token operator">+</span> sheep2<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sheep3 ="</span> <span class="token operator">+</span> sheep3 <span class="token operator">+</span> <span class="token string">"sheep3.friend="</span> <span class="token operator">+</span> sheep3<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sheep4 ="</span> <span class="token operator">+</span> sheep4 <span class="token operator">+</span> <span class="token string">"sheep4.friend="</span> <span class="token operator">+</span> sheep4<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sheep5 ="</span> <span class="token operator">+</span> sheep5 <span class="token operator">+</span> <span class="token string">"sheep5.friend="</span> <span class="token operator">+</span> sheep5<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-2-1-浅拷贝和深拷贝"><a href="#5-2-1-浅拷贝和深拷贝" class="headerlink" title="5.2.1 浅拷贝和深拷贝"></a>5.2.1 <strong>浅拷贝和深拷贝</strong></h5><p><strong>浅拷贝：</strong></p><ol><li>对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值赋值一份给新的对象。</li><li>对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数值、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。</li><li>克隆羊是浅拷贝。</li><li>浅拷贝是使用默认的clone()方法实现 sheep =(Sheep)super.clone</li></ol><p><strong>深拷贝：</strong></p><ol><li>复制对象的所有基本数据类型的成员变量值</li><li>为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象（包括对象的引用类型）进行拷贝。</li><li>深拷贝实现方式1：重写clone方法来实现深拷贝</li><li>深拷贝实现方式2：通过对象序列化实现深拷贝</li></ol><ul><li><strong>原型模式的注意事项</strong></li></ul><ol><li>创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率。</li><li>不用重新初始化对象，而是动态地获得对象运行时的状态</li><li>如果原始对象发生变化（增加或者减少属性），其他克隆对象的也会发生相应的变化，无需修改代码</li><li>在实现深克隆的时候可能需要比较复杂的代码。</li><li>缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了ocp原则。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepCloneableTarget</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cloneName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cloneClass<span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">DeepCloneableTarget</span><span class="token punctuation">(</span><span class="token class-name">String</span> cloneName<span class="token punctuation">,</span> <span class="token class-name">String</span> cloneClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneName <span class="token operator">=</span> cloneName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneClass <span class="token operator">=</span> cloneClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//因为该类的属性，都是String , 因此我们这里使用默认的clone完成即可</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">||</span><span class="token operator">||</span><span class="token operator">|</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepProtoType</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//String 属性</span>    <span class="token keyword">public</span> <span class="token class-name">DeepCloneableTarget</span> deepCloneableTarget<span class="token punctuation">;</span><span class="token comment">// 引用类型</span>    <span class="token keyword">public</span> <span class="token class-name">DeepProtoType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//深拷贝 - 方式 1 使用clone 方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> deep <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//这里完成对基本数据类型(属性)和String的克隆</span>        deep <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对引用类型的属性，进行单独处理</span>        <span class="token class-name">DeepProtoType</span> deepProtoType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepProtoType</span><span class="token punctuation">)</span> deep<span class="token punctuation">;</span>        deepProtoType<span class="token punctuation">.</span>deepCloneableTarget <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepCloneableTarget</span><span class="token punctuation">)</span> deepCloneableTarget<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deepProtoType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//深拷贝 - 方式2 通过对象的序列化实现 (推荐)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建流对象</span>        <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//序列化.</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前这个对象以对象流的方式输出</span>            <span class="token comment">//反序列化</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DeepProtoType</span> copyObj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepProtoType</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> copyObj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">//关闭流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">||</span><span class="token operator">||</span><span class="token operator">||</span><span class="token operator">||</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token class-name">DeepProtoType</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeepProtoType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"宋江"</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>deepCloneableTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeepCloneableTarget</span><span class="token punctuation">(</span><span class="token string">"大牛"</span><span class="token punctuation">,</span> <span class="token string">"小牛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方式1 完成深拷贝</span>        <span class="token class-name">DeepProtoType</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepProtoType</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p.name="</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"p.deepCloneableTarget="</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>deepCloneableTarget<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2.name="</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"p2.deepCloneableTarget="</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span>deepCloneableTarget<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方式2 完成深拷贝</span>        <span class="token class-name">DeepProtoType</span> p3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepProtoType</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p.name="</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"p.deepCloneableTarget="</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>deepCloneableTarget<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p3.name="</span> <span class="token operator">+</span> p3<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"p3.deepCloneableTarget="</span> <span class="token operator">+</span> p3<span class="token punctuation">.</span>deepCloneableTarget<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、建造者模式"><a href="#六、建造者模式" class="headerlink" title="六、建造者模式"></a>六、建造者模式</h2><p>项目盖房需求：</p><ol><li>需要建房子：打桩、砌墙、封顶</li><li>有普通房、高楼、别墅各种房子，但是要求不要相同</li></ol><h4 id="6-1-传统方式"><a href="#6-1-传统方式" class="headerlink" title="6.1 传统方式"></a>6.1 传统方式</h4><p><img src="/posts/managermodel/image-20220112142810740.png" alt="image-20220112142810740"></p><p>分析</p><ol><li>传统方式有点比较好理解，简单易操作</li><li>设计的程序结构，过于简单，没有设计缓存层对象，程序的扩展和维护不好，这种设计方案，把产品（即：房子）和创建产品的过程（即：建造房子流程）封装在一起，耦合性增强</li><li>解决方案：将产品和产品建造过程解耦 =&gt;建造者模式</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractHouse</span> <span class="token punctuation">{</span>    <span class="token comment">//打地基</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//砌墙</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//封顶</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHouse</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHouse</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 普通房子打地基 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 普通房子砌墙 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 普通房子封顶 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CommonHouse</span> commonHouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commonHouse<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-建造者模式"><a href="#6-2-建造者模式" class="headerlink" title="6.2 建造者模式"></a>6.2 建造者模式</h4><p><strong>基本介绍</strong></p><ol><li>建造者模式，又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不用表现（属性）的对象。</li><li>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节</li></ol><p><strong>建造者模式的四个角色</strong></p><ol><li>Product（产品角色）：一个具体的产品对象</li><li>Builder(抽象建造者) ：创建一个Product对象的各个部件指定的接口/抽象类。</li><li>ConcreteBulder(具体建造者) : 继承/实现接口，构建和搭配各个部件。</li><li>Director(指挥者) ： 构建一个使用Builder接口的对象。它主要是用于创建一个复杂的对象，它主要有两个作用，一是：隔离客户与对象的生产过程。二是：负责控制产品对象的生产过程</li></ol><p><strong>建造者模式的注意事项</strong>： </p><ol><li>客户端(Client)不必知道产品内容组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象</li><li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。</li><li>可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li>增加新的具体建造者无需修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”</li><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类实现这种变化，导致系统变得很庞大，这时候需要考虑是否选择建造者模式</li></ol><p><strong>抽象工厂模式和建造者模式区别</strong></p><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。而建造模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p><p><img src="/posts/managermodel/image-20220112144402352.png" alt="image-20220112144402352"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//产品-&gt;Product</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> basic<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> wall<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> roofed<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> basic<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBasic</span><span class="token punctuation">(</span><span class="token class-name">String</span> basic<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>basic <span class="token operator">=</span> basic<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> wall<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWall</span><span class="token punctuation">(</span><span class="token class-name">String</span> wall<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wall <span class="token operator">=</span> wall<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRoofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roofed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoofed</span><span class="token punctuation">(</span><span class="token class-name">String</span> roofed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roofed <span class="token operator">=</span> roofed<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 抽象的建造者</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">House</span> house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将建造的流程写好, 抽象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//建造房子好， 将产品(房子) 返回</span>    <span class="token keyword">public</span> <span class="token class-name">House</span> <span class="token function">buildHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> house<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//继承抽象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHouse</span> <span class="token keyword">extends</span> <span class="token class-name">HouseBuilder</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 普通房子打地基5米 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 普通房子砌墙10cm "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 普通房子屋顶 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighBuilding</span> <span class="token keyword">extends</span> <span class="token class-name">HouseBuilder</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 高楼的打地基100米 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 高楼的砌墙20cm "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 高楼的透明屋顶 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//指挥者，这里去指定制作流程，返回产品</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseDirector</span> <span class="token punctuation">{</span>    <span class="token class-name">HouseBuilder</span> houseBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//构造器传入 houseBuilder</span>    <span class="token keyword">public</span> <span class="token class-name">HouseDirector</span><span class="token punctuation">(</span><span class="token class-name">HouseBuilder</span> houseBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>houseBuilder <span class="token operator">=</span> houseBuilder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//通过setter 传入 houseBuilder</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHouseBuilder</span><span class="token punctuation">(</span><span class="token class-name">HouseBuilder</span> houseBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>houseBuilder <span class="token operator">=</span> houseBuilder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如何处理建造房子的流程，交给指挥者</span>    <span class="token keyword">public</span> <span class="token class-name">House</span> <span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> houseBuilder<span class="token punctuation">.</span><span class="token function">buildHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//client</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//盖普通房子</span>        <span class="token class-name">CommonHouse</span> commonHouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//准备创建房子的指挥者</span>        <span class="token class-name">HouseDirector</span> houseDirector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseDirector</span><span class="token punctuation">(</span>commonHouse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//完成盖房子，返回产品(普通房子)</span>        <span class="token class-name">House</span> house <span class="token operator">=</span> houseDirector<span class="token punctuation">.</span><span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//盖高楼</span>        <span class="token class-name">HighBuilding</span> highBuilding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HighBuilding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重置建造者</span>        houseDirector<span class="token punctuation">.</span><span class="token function">setHouseBuilder</span><span class="token punctuation">(</span>highBuilding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//完成盖房子，返回产品(高楼)</span>        houseDirector<span class="token punctuation">.</span><span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、适配器模式"><a href="#七、适配器模式" class="headerlink" title="七、适配器模式"></a>七、适配器模式</h2><p><strong>基本介绍</strong></p><ol><li>适配器模式将某个类的接口 转换成客户端期望的另一个借口表示，主要目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器(wrapper)</li><li>适配器模式属于结构型模式</li><li>主要分为三类：类适配器模式、对象适配器模式、接口适配器模式</li></ol><p><strong>工作原理</strong></p><ol><li>适配器模式：将一个类的接口转换成另一种接口。让原本接口不兼容的类可以兼容</li><li>从用户的角度看不到被适配者，是解耦的</li><li>用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法</li><li>用户受到反馈结果，感觉只是和目标接口交互，如图</li></ol><p><img src="/posts/managermodel/image-20220112164840221.png" alt="image-20220112164840221"></p><ul><li><strong>适配器模式的注意事项</strong></li></ul><ol><li><p>三种命名方式，是根据【被适配器】src是以怎样的形式给【适配器】Adapter（在Adapter里的形式）来命名的</p></li><li><p>类适配器：以类给到，在Adapter里，就是将src当做类，继承</p><p>对象适配器：以对象给到，在Adapter里，将src作为一个对象，持有</p><p>接口适配器：以接口给到，在Adapter里，将src作为一个接口，实现</p></li><li><p>Adapter模式最大的作用还是将原本不兼容的接口融合在一起工作</p></li></ol><h4 id="7-1-类适配器模式"><a href="#7-1-类适配器模式" class="headerlink" title="7.1 类适配器模式"></a>7.1 类适配器模式</h4><p><strong>基本介绍</strong></p><p>先有Adapter类（适配器），通过继承被适配者(src类)，实现目标类(dst类)接口，完成src &gt; dst 的适配</p><p>应用实例：</p><p>充电器本身相当于适配器(Adapter)，插口220V交流电相当于src(即被适配者)，我们的目标(dst)即转换成5v直流电，能够给电器充电</p><p><img src="/posts/managermodel/image-20220112171804114.png" alt="image-20220112171804114"></p><ul><li><strong>类适配器注意事项</strong></li></ul><ol><li>Java是单继承机制，所以类适配器需要继承src类这点算是一个缺点，因为这要求dst必须是接口，有一定的局限性。</li><li>src类的方法在Adapter中都会暴露出来，也增加了使用的成本。</li><li>由于其继承了src类，所以它可以根据需求重写src类的方法，使得Adapter的灵活性增强了。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//被适配的类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voltage220V</span> <span class="token punctuation">{</span>    <span class="token comment">//输出220V的电压</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> src <span class="token operator">=</span><span class="token number">220</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压="</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> src<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//适配接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//适配器类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Voltage220V</span> <span class="token keyword">implements</span> <span class="token class-name">IVoltage5V</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取到220V电压</span>        <span class="token keyword">int</span> srcV <span class="token operator">=</span> <span class="token function">output220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dstV <span class="token operator">=</span> srcV <span class="token operator">/</span> <span class="token number">44</span><span class="token punctuation">;</span><span class="token comment">//转成 5v</span>        <span class="token keyword">return</span> dstV<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment">//充电</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charging</span><span class="token punctuation">(</span><span class="token class-name">IVoltage5V</span> iVoltage5V<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVoltage5V<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压为5V, 可以充电~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iVoltage5V<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压大于5V, 不能充电~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//main</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" === 类适配器模式 ===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-对象适配器模式"><a href="#7-2-对象适配器模式" class="headerlink" title="7.2 对象适配器模式"></a>7.2 对象适配器模式</h4><ul><li><strong>基本介绍</strong></li></ul><ol><li>基本思路和类的适配器模式相同，只是将适配器(Adapter类)作修改，不是继承（被适配器）src类，而是持有src类的实例，以解决兼容性的问题。即：持有src类，实现适配接口(dst类接口)，完成src-&gt;dst的适配</li><li>根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系。</li><li>对象适配器模式是适配器模式常用的一种</li></ol><p><strong>应用实例</strong>：</p><p>充电器问题，只需要修改适配器即可</p><p><img src="/posts/managermodel/image-20220113093231511.png" alt="image-20220113093231511"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//适配器类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span>  <span class="token keyword">implements</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">Voltage220V</span> voltage220V<span class="token punctuation">;</span> <span class="token comment">// 关联关系-聚合</span><span class="token comment">//通过构造器，传入一个 Voltage220V 实例</span><span class="token keyword">public</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token class-name">Voltage220V</span> voltage220v<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>voltage220V <span class="token operator">=</span> voltage220v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> dst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> voltage220V<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> src <span class="token operator">=</span> voltage220V<span class="token punctuation">.</span><span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取220V 电压</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用对象适配器，进行适配~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dst <span class="token operator">=</span> src <span class="token operator">/</span> <span class="token number">44</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配完成，输出的电压为="</span> <span class="token operator">+</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> dst<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" === 对象适配器模式 ===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Voltage220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对象适配器模式注意事项</strong></p><ol><li>对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。根据合同复用原则，使用组合替代继承，所以它解决了类适配器必须继承src的局限性问题，也不再要求dst必须接口。</li><li>使用成本更低、更灵活。</li></ol><h4 id="7-3-接口适配器模式"><a href="#7-3-接口适配器模式" class="headerlink" title="7.3 接口适配器模式"></a>7.3 <strong>接口适配器模式</strong></h4><ol><li> 适配器模式或缺省适配器模式</li><li>当不需要全部实现接口提供的方法时，可先设计一个抽象实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该对象类的子类可有选择地覆盖父类的某些方法来实现需求。</li><li>适用于一个接口不想使用其所有的方法的情况、  </li></ol><p><strong>应用实例</strong></p><ol><li>Android中的属性动画ValueAnimator类可以通过addListener（AnimatorListener listener）方法添加监听器，常规写法如下</li></ol><p><img src="/posts/managermodel/image-20220113104530234.png" alt="image-20220113104530234"></p><ol start="2"><li>有时候不想实现Animator.AnimatorListener接口的全部方法，我们只想监听onAnimationStart，我们会如下写：</li></ol><p><img src="/posts/managermodel/image-20220113104757683.png" alt="image-20220113104757683"></p><ol start="3"><li>AnimatorListenerAdapter类，就是一个接口适配器，代码如下，它空实现了Animator.AnimatorListener类（src）的所有方法</li></ol><p><img src="/posts/managermodel/image-20220113104928945.png" alt="image-20220113104928945"></p><ol start="4"><li><p>AnimatorListener是一个接口</p><p><img src="/posts/managermodel/image-20220113105000720.png" alt="image-20220113105000720"></p></li><li><p>程序里的匿名内部类就是Listener具体实现类</p></li></ol><p><img src="/posts/managermodel/image-20220113105036520.png" alt="image-20220113105036520"></p><ol start="6"><li>案例说明</li></ol><p><img src="/posts/managermodel/image-20220113105101313.png" alt="image-20220113105101313"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//在AbsAdapter 我们将 Interface4 的方法进行默认实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbsAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Interface4</span><span class="token punctuation">{</span>    <span class="token comment">//默认实现</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AbsAdapter</span> absAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbsAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//只需要去覆盖我们 需要使用 接口方法</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用了m1的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        absAdapter<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、桥接模式"><a href="#八、桥接模式" class="headerlink" title="八、桥接模式"></a>八、桥接模式</h2><p><strong>应用实例</strong></p><p>对不同手机类型的不同品牌实现操作编程（比如：开机、关机、上网、打电话等）</p><h4 id="8-1-传统方式"><a href="#8-1-传统方式" class="headerlink" title="8.1 传统方式"></a>8.1 传统方式</h4><p><img src="/posts/managermodel/image-20220113141802372.png" alt="image-20220113141802372"></p><p><strong>问题分析：</strong></p><ol><li>扩展性问题（类爆炸）：如果再增加手机的样式（旋转式），就需要增加各个品牌手机的类，同样如果我们增加一个手机品牌，也要在各个手机样式类下增加。</li><li>违反了单一职责原则，当我们增加手机样式时，要同时增加所有品牌的手机，这样增加了代码维护成本，所以用桥接模式</li></ol><h4 id="8-2-桥接模式"><a href="#8-2-桥接模式" class="headerlink" title="8.2 桥接模式"></a>8.2 桥接模式</h4><ul><li><strong>基本介绍</strong></li></ul><ol><li>桥接模式(Bridge模式)：将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变。</li><li>是一种结构型模设计模式</li><li>Bridge模式基于类的最小设计原则，通过使用封装、聚合以及继承等行为让不同的类承担不同的职责。它的主要特点是把抽象(Abstraction)与行为实现(Implementation)分离开来，从而可以保持各部分的独立性以及应对他们的功能扩展。</li></ol><p><img src="/posts/managermodel/image-20220113143441408.png" alt="image-20220113143441408"></p><p><img src="/posts/managermodel/image-20220113175530967.png" alt="image-20220113175530967"></p><ul><li><strong>桥接模式注意事项</strong></li></ul><ol><li>实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统。</li><li>对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部分由具体业务来完成。</li><li>桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护成本。</li><li>桥接模式的引入增加了系统的理解和设计维度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程。</li><li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围有一定的局限性，即需要有这样的应用场景。</li></ol><ul><li><strong>桥接模式的其他应用场景</strong></li></ul><ol><li><p>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</p></li><li><p>常见的应用场景：</p><p>-JDBC驱动程序</p><p>-银行转账系统</p><p>转账分类：网上转账，柜台转账、AMT转账</p><p>转账用户类型：普通用户，银卡用户，金卡用户..</p><p>-消息管理</p><p>消息类型：即时消息，延时消息</p><p>消息分类：手机短信，邮件消息，QQ消息</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMi</span> <span class="token keyword">implements</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 小米手机开机 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 小米手机关机 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 小米手机打电话 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment">//组合品牌</span>    <span class="token keyword">private</span> <span class="token class-name">Brand</span> brand<span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        brand<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        brand<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//折叠式手机类，继承 抽象类 Phone</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FoldedPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">FoldedPhone</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 折叠样式手机 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 折叠样式手机 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 折叠样式手机 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpRightPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">UpRightPhone</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 直立样式手机 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 直立样式手机 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 直立样式手机 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取折叠式手机 (样式 + 品牌 )</span>        <span class="token class-name">Phone</span> phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FoldedPhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XiaoMi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone1<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpRightPhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XiaoMi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone2<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、装饰者模式"><a href="#九、装饰者模式" class="headerlink" title="九、装饰者模式"></a>九、装饰者模式</h2><p><strong>订单项目</strong></p><ol><li>咖啡种类/单品咖啡：Espresso(意大利浓咖啡)、ShortBlack、LongBlack(没事咖啡)、Decaf（无因咖啡）</li><li>调料：Milk、Soy（豆浆）、Chocolate</li><li>要求在拓展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便</li><li>使用OO的来计算不同种类咖啡的费用:客户可以点单品咖啡，也可以单品咖啡+调料组合。</li></ol><h4 id="9-1-传统方式"><a href="#9-1-传统方式" class="headerlink" title="9.1 传统方式"></a>9.1 <strong>传统方式</strong></h4><ul><li><strong>方案1</strong></li></ul><p><img src="/posts/managermodel/image-20220114102837825.png" alt="image-20220114102837825"></p><ol><li>Drink是一个抽象类，表示饮料。</li><li>des就是对咖啡的描述，比如咖啡的名字</li><li>cost()方法就是计算费用，Drink类中做成一个抽象方法</li><li>Decaf就是单品咖啡，继承Drink，并实现cost</li><li>Espress&amp;&amp;Milk就是单品咖啡+调料，这个组合很多</li><li>问题：这种设计会导致有很多类，当我们增加一个单品咖啡，或者一个新的调料，类的数量就会倍增，就会出现类爆炸。</li></ol><ul><li><strong>方案2</strong></li></ul><p><img src="/posts/managermodel/image-20220114104742845.png" alt="image-20220114104742845"></p><ol><li>方案2可以控制类的数量，不至于造成很多的类</li><li>在增加或者删除调料种类时，代码的维护量很大</li><li>考虑到用户可以添加多份调料时，可以将hasMilk 返回一个对应int</li><li>考虑用装饰者模式</li></ol><h4 id="9-2-装饰者模式"><a href="#9-2-装饰者模式" class="headerlink" title="9.2 装饰者模式"></a>9.2 装饰者模式</h4><ul><li><strong>装饰者模式定义</strong></li></ul><ol><li>装饰者模式：动态的将新功能附加到对象上，在对象功能扩展方面，它比继承更加有弹性，装饰者模式也体现了开闭原则(OCP)</li><li>这里提到的动态地将新功能附加到对象和ocp原则，在后面的应用实例上面会以代码的形式体现</li></ol><ul><li>装饰者模式原理</li></ul><p><img src="/posts/managermodel/image-20220116132104819.png" alt="image-20220116132104819"></p><p>装饰者模式设计咖啡</p><p><img src="/posts/managermodel/image-20220114110807093.png" alt="image-20220114110807093"></p><p><img src="/posts/managermodel/image-20220114111005103.png" alt="image-20220114111005103"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Drink</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> des<span class="token punctuation">;</span><span class="token comment">//描述</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price <span class="token operator">=</span><span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//计算费用的抽象方法</span>    <span class="token comment">//子类来实现</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShortBlack</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ShortBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" shortblack "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">4.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeCaf</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">DeCaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" 无因咖啡 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Espresso</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" 意大利咖啡 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">6.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongBlack</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">LongBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" longblack "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">5.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Drink</span> obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//组合</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// getPrice 自己价格</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// obj.getDes() 输出被装饰者的信息</span>        <span class="token keyword">return</span> des <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" &amp;&amp; "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//具体的Decorator， 这里就是调味品</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chocolate</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" 巧克力 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">3.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调味品 的价格</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" 牛奶 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Soy</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Soy</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" 豆浆 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeBar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 装饰者模式下的订单：2份巧克力+一份牛奶的LongBlack</span>        <span class="token comment">// 1. 点一份 LongBlack</span>        <span class="token class-name">Drink</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"费用1="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"描述="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. order 加入一份牛奶</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶 费用 ="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶 描述 = "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. order 加入一份巧克力</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶 加入一份巧克力  费用 ="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶 加入一份巧克力 描述 = "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. order 加入一份巧克力</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶 加入2份巧克力   费用 ="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶 加入2份巧克力 描述 = "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Drink</span> order2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeCaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order2 无因咖啡  费用 ="</span> <span class="token operator">+</span> order2<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order2 无因咖啡 描述 = "</span> <span class="token operator">+</span> order2<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span>order2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order2 无因咖啡 加入一份牛奶  费用 ="</span> <span class="token operator">+</span> order2<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order2 无因咖啡 加入一份牛奶 描述 = "</span> <span class="token operator">+</span> order2<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、组合模式"><a href="#十、组合模式" class="headerlink" title="十、组合模式"></a>十、组合模式</h2><ul><li><strong>学校院系展示需求</strong></li></ul><p>编写程序展示一个学校院系结构：需求是，要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系，如图：</p><p><img src="/posts/managermodel/image-20220206112451799-16441178948321.png" alt="image-20220206112451799"></p><h4 id="10-1-传统方式"><a href="#10-1-传统方式" class="headerlink" title="10.1 传统方式"></a>10.1 传统方式</h4><p><img src="/posts/managermodel/image-20220206112528627-16441179298402.png" alt="image-20220206112528627"></p><p><strong>传统方式解决学院院系展示存在的问题分析</strong></p><ol><li>将学院看做是学校的子类，系是学院的子类，这样实际上是站在组织大小来进行分层次的</li><li>实际上我们的要求是：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系，因此这种方案，不能很好实现管理的操作，比如学院、系的添加，删除，遍历等。</li><li>解决方案：把学校、院、系都看做是组织结构，他们之间没有继承关系，而是一种树形结构，可以更好的实现管理操作。 =&gt;<strong>组合模式</strong></li></ol><h4 id="10-2-组合模式"><a href="#10-2-组合模式" class="headerlink" title="10.2 组合模式"></a>10.2 组合模式</h4><ul><li><strong>基本介绍</strong></li></ul><ol><li>组合模式（Composite Pattern），又叫部分整理模式，它创建了对象组的树形结构，将对象组合成树状结构以表示“整体-部分”的层次关系。</li><li>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。</li><li>这种类型的./设计模式属于结构型模式。</li><li>组合模式使得用户对单个对象和组合对象的访问具有一致性，即：组合能让客户以一致的方式处理个别对象以及组合对象</li></ol><ul><li><strong>组合模式原理类图</strong></li></ul><p><img src="/posts/managermodel/image-20220206115319869-16441196027033.png" alt="image-20220206115319869"></p><p>对原理机构图的说明（即：组合模式的角色以及职责）</p><ol><li>Component：这是组合中对象生命接口，在适当情况下，实现所有类共有的接口默认行为，用于访问和管理Component 子部件，Component可以是抽象类或者接口</li><li>Leaf：在组合中表示叶子节点，叶子节点没有子节点。</li><li>Composite：非叶子节点，用于存储子部件，在Component接口实现子部件的相关操作，比如增加（add）,删除。</li></ol><ul><li><strong>组合模式解决学校院系展示的应用实例</strong></li></ul><p>应用实例要求：</p><ol><li>编写程序展示一个学校院系结构：需求是，要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。</li><li>思路分析图解（类图）</li></ol><p><img src="/posts/managermodel/image-20220206115900424-16441199416004.png" alt="image-20220206115900424"></p><p><strong>代码实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OrganizationComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//名字</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> des<span class="token punctuation">;</span> <span class="token comment">//说明</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//默认实现</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//默认实现</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OrganizationComponent</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方法print，做成抽象方法,子类都要实现</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">University</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrganizationComponent</span><span class="token punctuation">&gt;</span></span> organizationComponents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrganizationComponent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">University</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//print方法，就是输出University 包含的学院</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent <span class="token operator">:</span> organizationComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>            organizationComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Colleage</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span><span class="token punctuation">{</span>    <span class="token comment">//包含Department</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrganizationComponent</span><span class="token punctuation">&gt;</span></span> organizationComponents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrganizationComponent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//将来实际业务中，Colleage的 add和University add不一定完全一样</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Colleage</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//print方法，就是输出University 包含的学院</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent <span class="token operator">:</span> organizationComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>            organizationComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span><span class="token punctuation">{</span>    <span class="token comment">//add,remove不用写了， 也没有集合，因为他是叶子节点</span>    <span class="token keyword">public</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//从大到小创建对象 学校</span>        <span class="token class-name">OrganizationComponent</span> university <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">University</span><span class="token punctuation">(</span><span class="token string">"清华大学"</span><span class="token punctuation">,</span> <span class="token string">"中国顶级大学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建学院</span>        <span class="token class-name">OrganizationComponent</span> computerColleage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Colleage</span><span class="token punctuation">(</span><span class="token string">"计算机学院"</span><span class="token punctuation">,</span> <span class="token string">"计算机学院"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OrganizationComponent</span> foreignLanguageColleage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Colleage</span><span class="token punctuation">(</span><span class="token string">"外国语学院"</span><span class="token punctuation">,</span> <span class="token string">"外国语学院"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建各个学院下面的系(专业)</span>        computerColleage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"软件工程"</span><span class="token punctuation">,</span><span class="token string">"软件工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        computerColleage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"信息工程"</span><span class="token punctuation">,</span><span class="token string">"信息工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        computerColleage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"计算机与科学"</span><span class="token punctuation">,</span><span class="token string">"计算机与科学"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foreignLanguageColleage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"英语"</span><span class="token punctuation">,</span><span class="token string">"英语"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foreignLanguageColleage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"日语"</span><span class="token punctuation">,</span><span class="token string">"日语"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将学院加入到学校</span>        university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>computerColleage<span class="token punctuation">)</span><span class="token punctuation">;</span>        university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>foreignLanguageColleage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        university.print();</span>        computerColleage<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>组合模式的注意事项和细节</li></ul><ol><li>简化客户端操作，客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题。</li><li>具有较强的扩展性。当我们要更改组合对象时候，我们只需要调整内部的层次关系，客户端不用做出任何改动。</li><li>方便创建出复杂的层次结构，客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的树形结构。</li><li>需要遍历组织机构，或者处理的对象具有树形结构时，非常适合使用组合模式</li><li>要求较高的抽象性，如果节点和叶子有很多差异性的话，比如很多方法和属性都不一样，不适合使用组合模式</li></ol><ul><li><strong>组合模式在JDK集合的源码分析</strong></li></ul><ol><li><p>Java的集合类-HashMap就使用了组合模式</p></li><li><p>代码分析+Debug 源码</p><p><img src="/posts/managermodel/image-20220216162330840.png" alt="image-20220216162330840"></p></li><li><p>类图</p></li></ol><p><img src="/posts/managermodel/image-20220216162349309.png" alt="image-20220216162349309"></p><h2 id="十一、外观模式"><a href="#十一、外观模式" class="headerlink" title="十一、外观模式"></a>十一、外观模式</h2><p><strong>影院管理项目</strong></p><p><img src="/posts/managermodel/image-20220216150538797.png" alt="image-20220216150538797"></p><h4 id="11-1-传统方式"><a href="#11-1-传统方式" class="headerlink" title="11.1 传统方式"></a>11.1 传统方式</h4><p><img src="/posts/managermodel/image-20220216150800497.png" alt="image-20220216150800497"></p><ul><li><strong>传统方式解决影院管理问题分析</strong></li></ul><ol><li>在ClientTest的main方法中，创建各个子系统的对象，并直接去调佣子系统(对象)相关方法，会造成调用过程混乱，没有清晰的过程。</li><li>不利于在ClientTest中，去维护对子系统的操作。</li><li>解决思路：定义一个高层接口，给子系统中的一组接口提供一个一致的界面(比如在高层接口提供四个方法ready、play、pause、end),用来访问子系统中的一群接口</li><li>也就是说，就是通过定义一个一致的接口(界面类)用以屏蔽内部子系统的细节，使得调用端只需要跟这个接口发生调用，而无需关心对这个子系统的内部细节 =&gt;外观模式</li></ol><h4 id="11-2-外观模式"><a href="#11-2-外观模式" class="headerlink" title="11.2 外观模式"></a>11.2 外观模式</h4><ul><li><strong>外观模式基本介绍</strong></li></ul><ol><li>外观模式，也叫“过程模式：外观模式为子系统中的一组接口提供一个一致的界面”，此模式定义了一个高层接口，这个接口使得这子系统更加容易使用</li><li>外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需要跟这个接口发生调用，而无需关心这个子系统的内部细节。</li></ol><ul><li>外观模式原理类图</li></ul><p><img src="/posts/managermodel/image-20220216152309384.png" alt="image-20220216152309384"></p><blockquote><ul><li>类图说明</li></ul><ol><li>外观模式（Facade）：为调用端提供统一的调用接口，外观类知道哪些子系统负责处理请求，从而将调用端的请求代理给适当子系统对象</li><li>调用者(Client)：外观接口的调用者</li><li>子系统的集合：指模块或者子系统，处理Facade 对象指派的任务，他是功能的实际提供者</li></ol></blockquote><ul><li><p><strong>外观模式解决影院管理</strong></p><ol><li>外观模式可以理解为转换一群接口，客户只要调用一个接口，而不用调用多个接口才能达到目的。比如：在pc上安装软件的时候经常有一键安装选项（省去选择安装目录、安装组件等等），还有就是手机的重启功能（把关机和启动合为一个操作）</li><li>外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用。</li><li>示意图说明：</li></ol><p><img src="/posts/managermodel/image-20220216151704913.png" alt="image-20220216151704913"></p></li></ul><ul><li>外观模式应用实例</li></ul><ol><li>应用实例要求</li><li>使用外观模式来完成家庭影院项目</li><li>思路分析和图解（类图）</li></ol><p><img src="/posts/managermodel/image-20220216152017599.png" alt="image-20220216152017599"></p><ol start="4"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DVDPlayer</span> <span class="token punctuation">{</span>    <span class="token comment">//使用单例模式，使用饿汉式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DVDPlayer</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DVDPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DVDPlayer</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dvd on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dvd off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dvd is playing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dvd is pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Popcorn</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Popcorn</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Popcorn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Popcorn</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"popcorn on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"popcorn off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"popcorn is poping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TheatreLight</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TheatreLight</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TheatreLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TheatreLight</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Theatre on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Theatre off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bright</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Theatre bright."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Theatre dim."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeTheatreFacade</span> <span class="token punctuation">{</span>    <span class="token comment">//定义各个子系统对象</span>    <span class="token keyword">private</span> <span class="token class-name">TheatreLight</span> theatreLight<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Popcorn</span> popcorn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Stereo</span> stereo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Projector</span> projector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Screen</span> screen<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DVDPlayer</span> dvdPlayer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HomeTheatreFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>theatreLight <span class="token operator">=</span> <span class="token class-name">TheatreLight</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>popcorn <span class="token operator">=</span> <span class="token class-name">Popcorn</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stereo <span class="token operator">=</span> <span class="token class-name">Stereo</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>projector <span class="token operator">=</span> <span class="token class-name">Projector</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> <span class="token class-name">Screen</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dvdPlayer <span class="token operator">=</span> <span class="token class-name">DVDPlayer</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//操作分成四部</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        popcorn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        popcorn<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        screen<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stereo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        theatreLight<span class="token punctuation">.</span><span class="token function">dim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        popcorn<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        theatreLight<span class="token punctuation">.</span><span class="token function">bright</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        screen<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projector<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stereo<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HomeTheatreFacade</span> homeTheatreFacade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HomeTheatreFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheatreFacade<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheatreFacade<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheatreFacade<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheatreFacade<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>外观模式在MyBatis框架应用的源码分析</li></ul><ol><li>Mybatis中的Configuration去创建MetaObject 对象使用到外观模式</li><li>代码分析+Debug源码+示意图</li></ol><p><img src="/posts/managermodel/image-20220216162846795.png" alt="image-20220216162846795"></p><ol start="3"><li>对源码中使用到的外观模式的角色类图</li></ol><p><img src="/posts/managermodel/image-20220216163844018.png" alt="image-20220216163844018"></p><ul><li><strong>外观模式的注意事项和细节</strong></li></ul><ol><li>外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性</li><li>外观模式对客户端与子系统的耦合关系 -解耦。让子系统内部的模块更容易维护和扩展</li><li>通过合理的使用外观模式，可以帮助我们更好的划分访问的层次</li><li>当系统需要进行分层设计时候，可以考虑使用Facade模式</li><li>在维护一个遗留的大型系统的时候，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade类，来提供遗留系统的比较清晰简单的接口，让新系统与Favade类交互，提高复用性。</li><li>不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好，要以让系统有层次，利于维护为目的。</li></ol><h2 id="十二、享元模式"><a href="#十二、享元模式" class="headerlink" title="十二、享元模式"></a>十二、享元模式</h2><ul><li>展示网站项目需求</li></ul><p><img src="/posts/managermodel/image-20220216183002141.png" alt="image-20220216183002141"></p><h5 id="12-1-传统方式"><a href="#12-1-传统方式" class="headerlink" title="12.1 传统方式"></a>12.1 传统方式</h5><ul><li><strong>传统方案解决网站展现项目</strong></li></ul><ol><li>直接复制粘贴一份，然后根据客户不同要求，进行定制修改</li><li>给每个网站租用一个空间</li><li>方案设计示意图</li></ol><p><img src="/posts/managermodel/image-20220216185611060.png" alt="image-20220216185611060"></p><ul><li>传统方案解决网站展现项目-问题分析</li></ul><ol><li>需要的网站结构相似度很搞，而且不是高访问量网站，如果分成多个虚拟空间来处理，相当于一个相同网站的实例对象很多，造成服务器的资源浪费</li><li>解决思路：整合到一个网站中，共享其相关的代码和数据，对于硬盘、内存、CPU、数据库空间等服务器资源都可以达成共享，减少服务器资源。</li><li>对于代码来说，由于是一份实例，维护和扩展都更加容易</li><li>上面的解决思路就可以使用 享元模式来解决</li></ol><h5 id="12-2-享元模式"><a href="#12-2-享元模式" class="headerlink" title="12.2 享元模式"></a>12.2 享元模式</h5><ul><li><strong>享元模式基本介绍</strong></li></ul><ol><li>享元模式 也叫 蝇量模式：运用共享技术有效地支持大量细粒度的对象</li><li>常用于系统底层开发，解决系统的性能问题，像数据库连接池，里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个。</li><li>享元模式能够解决重复对象的内存浪费的问题，当系统中有大量相似对象，需要缓冲池时。不需总是创建新对象，可以从缓冲池里拿。这样可以降低系统内存，同时提高效率。</li><li>享元模式经典的应用场景就是池技术，String 常量池，数据库连接池、缓冲池等等都是享元模式的应用，享元模式是池技术的重要实现方式。</li></ol><p><img src="/posts/managermodel/image-20220216212341313.png" alt="image-20220216212341313"></p><ul><li>享元模式的原理类图</li></ul><p><img src="/posts/managermodel/image-20220216212407144.png" alt="image-20220216212407144"></p><blockquote><ul><li>对类图的说明</li></ul><ol><li>FlyWeight 是抽象的享元角色，他是产品的抽象类，同时定义出对象的外部状态和内部状态（后面介绍的）接口或实现</li><li>ConcreteFlyWeight 是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务。</li><li>UnShareConcreteFlyWeight 是不可共享的角色 一般不会出现在享元工厂。</li><li>FlyWeightFactory 享元工厂类，用于构建一个池容器(集合)，同时提供从池中获取对象方法</li></ol></blockquote><ul><li>内部状态和外部状态</li></ul><blockquote><p>比如围棋、五子棋、跳棋，它们都有大量的棋子对象，围棋和五子棋只有黑白两色，跳棋颜色多一点，所以棋子颜色就是棋子的内部状态，而各个棋子之间的差别就是位置的不同，当我们落子后，落子颜色是定的，但位置是变化的，所以棋子坐标就是棋子的外部状态</p></blockquote><ol><li>享元模式提出了两个要求，细粒度和共享对象。这里就设计到内部状态和外部状态了，即将对象的信息分为两个部分：内部状态和外部状态。</li><li>内部状态指对象共享出来的信息，存储在享元对象内部且不会随环境的改变而改变</li><li>外部状态指对象得以依赖的一个标记，是随环境改变而改变的、不可共享的状态。</li><li>举个例子：围棋理论上有361个空位可以放棋子，每盘棋都有可能有两三百个棋子对象产生，因为内存空间有限，一台服务器很难支持更多的玩家玩围棋游戏，如果用享元模式来处理棋子，那么棋子对象就可以减少到只有两三个实例，这样就很好的解决了对象的开小问题。</li></ol><ul><li><strong>享元模式解决网站展现项目</strong></li></ul><ol><li>应用实例要求</li></ol><p>​    使用享元模式完成后，前面提出的网站外包问题</p><ol start="2"><li>思路分析和图解（类图）</li></ol><p><img src="/posts/managermodel/image-20220216213939044.png" alt="image-20220216213939044"></p><ol start="3"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">WebSite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抽象方法</span><span class="token punctuation">}</span><span class="token comment">//具体网站</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteWebSite</span> <span class="token keyword">extends</span> <span class="token class-name">WebSite</span><span class="token punctuation">{</span>    <span class="token comment">//共享的部分，内部状态</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//网站发布的形式(类型)</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteWebSite</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网站的发布形式为："</span><span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">"使用者是："</span><span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//网站工厂类，根据需要返回压一个网站</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSiteFactory</span> <span class="token punctuation">{</span>    <span class="token comment">//集合，充当池的作用</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ConcreteWebSite</span><span class="token punctuation">&gt;</span></span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据网站的类型，返回一个网站，如果没有就创建一个网站，并放入到池中，并返回</span>    <span class="token keyword">public</span> <span class="token class-name">WebSite</span> <span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pool<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//若有就创建一个网站，并放入到池中</span>            pool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteWebSite</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">WebSite</span><span class="token punctuation">)</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取网站分类的总数（池中有多少个网站类型）</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWebSiteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个工厂类</span>        <span class="token class-name">WebSiteFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSiteFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//客户要一个以新闻形式发布的网站</span>        <span class="token class-name">WebSite</span> webSite1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"新闻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webSite1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//客户要一个以博客形式发布的网站</span>        <span class="token class-name">WebSite</span> webSite2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"博客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webSite2<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//客户要一个以博客形式发布的网站</span>        <span class="token class-name">WebSite</span> webSite3 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"博客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webSite3<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Polo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一共有多少个网站分类："</span><span class="token operator">+</span> factory<span class="token punctuation">.</span><span class="token function">getWebSiteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>享元模式在JDK-Integer的应用源码分析</strong></li></ul><ol><li>Integer中的享元模式</li><li>代码分析</li></ol><p><img src="/posts/managermodel/image-20220218151043482.png" alt="image-20220218151043482"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyWeight</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> z <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y <span class="token operator">==</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>        <span class="token class-name">Integer</span> x1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>        <span class="token class-name">Integer</span> x2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x1 <span class="token operator">==</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果Integer.valueOf(x) x在-128~~127之间，就是使用享元模式，如果不在就重新创建新的Integer</p><p>小结：</p><ol><li>在valueOf方法中，先判断值是否在IntegerCache中，如果不在，就创建新的Integer（new），否则直接从缓存池返回</li><li>valueOf() ,就是用到享元模式</li><li>如果使用valueOf方法得到一个Integer实例，范围在-128~127，执行速度比new快</li></ol></blockquote><ul><li><strong>享元模式注意事项和细节</strong></li></ul><ol><li>在<strong>享元模式这样理解，’享‘就表示共享，’元‘表示对象</strong></li><li>在系统有大量的对象，这些对象消耗大量的内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式</li><li>用唯一表示码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，用HashMap/HashTable存储</li><li>享元模式大大减少了对象的创建，降低了程序内存的占用，提高效率</li><li>享元模式提高了系统的复杂度，需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变，这是我们使用享元模式需要注意的地方</li><li>使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制</li><li>享元模式经典的应用场景就是需要缓冲池的场景，比如String常量池，数据库连接池</li></ol><h2 id="十三、代理模式"><a href="#十三、代理模式" class="headerlink" title="十三、代理模式"></a>十三、代理模式</h2><ul><li><strong>代理模式的基本介绍</strong></li></ul><ol><li>代理模式：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象，这样做的好处是可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。</li><li>被代理的对象可以使远程对象，创建开销大的对象或需要完全控制的对象。</li><li>代理模式有不同的形式，主要有三种，静态代理，动态代理（jdk代理、接口代理）和Cglib代理（可以在内存动态地创建对象，而不是实现接口，他是属于动态代理的范畴）</li><li>代理模式示意图</li></ol><p><img src="/posts/managermodel/image-20220218155603253.png" alt="image-20220218155603253"></p><h5 id="13-1-静态代理"><a href="#13-1-静态代理" class="headerlink" title="13.1 静态代理"></a>13.1 静态代理</h5><ul><li><strong>静态代码模式的基本介绍</strong>    </li></ul><p>​    静态代理在使用时，需要定义接口或者父类，被代理对象（即目标对象）与代理对象一起实现相同的接口或者是继承相同父类</p><ul><li><strong>应用实例</strong></li></ul><blockquote><p>具体实现</p><ol><li>定义一个接口：ITeacherDao</li><li>目标对象TeacherDao实现接口ITeacherDao</li><li>使用静态代理方式，就需要在代理对象TeacherDAOProxy中也实现ITeacherDAO</li><li>调用的时候通过调用代理对象的方法来调用目标对象</li><li>特别提醒：代理对象与目标对象要实现相同的接口，然后通过调用相同的方法来调用目标对象的方法</li></ol><ul><li>思路分析图解(类图)</li></ul><p><img src="/posts/managermodel/image-20220218161954191.png" alt="image-20220218161954191"></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITeacherDao</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//授课的方法</span><span class="token punctuation">}</span><span class="token comment">//目标对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师授课中...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//代理对象，静态代理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ITeacherDao</span> target<span class="token punctuation">;</span> <span class="token comment">//目标对象，通过接口来聚合</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">TeacherDaoProxy</span><span class="token punctuation">(</span><span class="token class-name">ITeacherDao</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始代理...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可以额外增加的方法</span>        target<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//核心方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可以额外增加的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建目标对象（被代理对象）</span>        <span class="token class-name">TeacherDao</span> teacherDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建代理对象，同时将被代理对象传递给代理对象</span>        <span class="token class-name">TeacherDaoProxy</span> teacherDaoProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDaoProxy</span><span class="token punctuation">(</span>teacherDao<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过代理对象，调用到被代理对象的方法</span>        <span class="token comment">//即：执行的是代理对象的方法，代理对象再去调用目标对象的方法</span>        teacherDaoProxy<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>静态代理的优缺点</strong></li></ul><ol><li>优点：在不修改目标对象的功能前提下，能通过代理对象对目标功能的扩展。</li><li>缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类</li><li>一旦接口增加方法，目标对象与代理对象都要维护。</li></ol><h5 id="13-2-动态代理"><a href="#13-2-动态代理" class="headerlink" title="13.2 动态代理"></a>13.2 动态代理</h5><ul><li><strong>动态代理的基本介绍</strong></li></ul><ol><li>代理对象，不需要实现接口，但是目标对象要实现接口，否则不能用动态代理</li><li>代理对象的生成，是利用Jdk的API，动态的在内存中构建代理对象。</li><li>动态代理也叫作：JDK代理、接口代理</li></ol><ul><li><strong>jdk中生成代理对象API</strong></li></ul><ol><li>代理类所在包：java.lang.reflect.Proxy</li><li>JDK实现代理只需要使用newProxyInstance方法，但是该方法需要接收三个参数，完整的写法是：static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHanler h)</li></ol><ul><li><strong>动态代理应用实例</strong></li></ul><ol><li>应用实例要求：将前面的静态代理改进成动态代理模式(即：JDK代理模式)</li><li>思路图解(类图)</li></ol><p><img src="/posts/managermodel/image-20220218165948980.png" alt="image-20220218165948980"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITeacherDao</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//授课方法</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//目标对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师正在授课中......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hey:"</span><span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//代理对象</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>    <span class="token comment">//维护目标对象，object</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token comment">//构造器，对target进行初始化</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//给目标对象 生成一个代理对象</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*            public static Object newProxyInstance(ClassLoader loader,                                          Class&lt;?&gt;[] interfaces,                                          InvocationHandler h)          1. ClassLoader loader： 指定当前目标对象使用的类加载器，获取加载器的方法固定          2. Class&lt;?&gt;[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型          3. InvocationHandler: 事情处理，执行目标对象的方法时，会触发事情处理器的方法，会把当前执行的目标对象方法作为参数传入         */</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jdk代理开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//反射机制调用目标对象的方法</span>                <span class="token class-name">Object</span> returnVal <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK代理提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建目标对象</span>        <span class="token class-name">ITeacherDao</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//给目标对象，创建代理对象,可以转换成ITeacherDao</span>        <span class="token class-name">ITeacherDao</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ITeacherDao</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出：proxyInstance：com.atiguigu1.proxy.dynamic.TeacherDao@2503dbd3</span><span class="token comment">//        System.out.println("proxyInstance：" + proxyInstance);</span>        <span class="token comment">//输出：proxyInstance：class com.sun.proxy.$Proxy0 （内存中动态生成了代理对象）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"proxyInstance："</span> <span class="token operator">+</span> proxyInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过代理对象，调用目标对象的方法</span><span class="token comment">//        proxyInstance.teach();</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-3-Cglib代理"><a href="#13-3-Cglib代理" class="headerlink" title="13.3 Cglib代理"></a>13.3 Cglib代理</h4><h5 id="13-3-1-Cglib代理模式的基本介绍"><a href="#13-3-1-Cglib代理模式的基本介绍" class="headerlink" title="13.3.1 Cglib代理模式的基本介绍"></a>13.3.1 <strong>Cglib代理模式的基本介绍</strong></h5><ol><li>静态代理和JDK代理模式都要求目标对象是实现一个接口，但是有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可使用目标对象子类来实现代理-这就是Cglib代理</li><li>Cglib代理也叫作子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展，有些书也将Cglib代理归属到动态代理。</li><li>Cglib是一个强大的高性能的代码生成包，它可以在运行期间扩展Java类与实现java接口。它广泛的被许多AOP的框架使用。例如SpringAOP,实现方法拦截</li><li>在AOP编程中如何选择代理模式：<ol><li>目标对象需要实现接口，用JDK代理</li><li>目标对象不需要实现接口，用Cglib代理</li></ol></li><li>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类</li></ol><h5 id="13-3-2-Cglib代理模式实现步骤"><a href="#13-3-2-Cglib代理模式实现步骤" class="headerlink" title="13.3.2 Cglib代理模式实现步骤"></a>13.3.2 Cglib代理模式实现步骤</h5><ol><li>引入cglib的jar文件</li></ol><p><img src="/posts/managermodel/image-20220219153543135.png" alt="image-20220219153543135"></p><ol start="2"><li>在内存中动态构建子类，注意代理的类不能为final，否则报错</li></ol><p>​    java.lang.ILLegalArgumentExceotion:</p><ol start="3"><li>目标对象的方法如果为final/static，那么就不会被拦截，即不会执行目标对象额外的业务方法。</li></ol><h5 id="13-3-3-Cglib代理模式应用实例"><a href="#13-3-3-Cglib代理模式应用实例" class="headerlink" title="13.3.3 Cglib代理模式应用实例"></a>13.3.3 <strong>Cglib代理模式应用实例</strong></h5><p>应用实例要求：</p><p>​    将前面的案例用Cglib代理模式实现</p><p>思路图解（类图）</p><p><img src="/posts/managermodel/image-20220219153930539.png" alt="image-20220219153930539"></p><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//目标对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师授课中，我是cglib代理模式，不需要实现接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodProxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment">//维护一个目标对象</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token comment">//构造器，传入一个被代理的对象</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//返回一个代理对象，是target对象的代理对象</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 创建一个工具类</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        2. 设置父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        3. 设置回调函数</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        4.创建子类对象，即代理对象</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    重写intercept 方法，会调用目标对象的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib代理模式 开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> returnVal <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib代理模式 ——  提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建目标对象</span>        <span class="token class-name">TeacherDao</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        获取到代理对象，并且将目标对象传递给代理对象</span>        <span class="token class-name">TeacherDao</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TeacherDao</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        执行代理对象的方法，触发intecept方法，从而实现对目标对象的调用</span>        <span class="token class-name">String</span> res <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="13-3-4-几种常见的代理模式介绍-几种变体"><a href="#13-3-4-几种常见的代理模式介绍-几种变体" class="headerlink" title="13.3.4 几种常见的代理模式介绍 -几种变体"></a>13.3.4 几种常见的代理模式介绍 -几种变体</h5><ol><li><p>防火墙代理</p><p>内网通过代理穿透防火墙，实现对公网的访问</p></li><li><p>缓存代理</p><p>比如：当请求图片文件等资源时候，先到缓存代理取，如果取到资源则ok，如果取不到资源，再到公网或者数据库取，然后缓存。</p><p><img src="/posts/managermodel/image-20220219163523894.png" alt="image-20220219163523894"></p></li><li><p>远程代理</p><p>远程对象的本地代表，通过它可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息。</p></li><li><p>同步带利：主要使用在多线程编程中，完成多线程之间同步工作</p></li></ol><h2 id="十四、模块方法模式"><a href="#十四、模块方法模式" class="headerlink" title="十四、模块方法模式"></a>十四、模块方法模式</h2><ul><li><strong>豆浆制作问题</strong></li></ul><p>编写制作豆浆的程序，说明如下：</p><p><img src="/posts/managermodel/image-20220219164223951.png" alt="image-20220219164223951"></p><h4 id="14-1-模块方法模式"><a href="#14-1-模块方法模式" class="headerlink" title="14.1 模块方法模式"></a>14.1 模块方法模式</h4><h5 id="14-1-1-模块方法模式基本介绍"><a href="#14-1-1-模块方法模式基本介绍" class="headerlink" title="14.1.1 模块方法模式基本介绍"></a>14.1.1 模块方法模式基本介绍</h5><ol><li>模块方法模式(Template Method Pattern),又叫做模块模式(Tenokate pattern)，z在一个抽象类公开定义了执行它的方法的模板，它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方法进行。</li><li>简单点说，模块方法模式，定义一个操作中的算法的骨架，而将一些步骤延迟到子类中使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤</li><li>这种类型的设计模式属于行为性模式。</li></ol><h5 id="14-1-2-模块方法模式的原理类图"><a href="#14-1-2-模块方法模式的原理类图" class="headerlink" title="14.1.2 模块方法模式的原理类图"></a>14.1.2 模块方法模式的原理类图</h5><p><img src="/posts/managermodel/image-20220219181335128.png" alt="image-20220219181335128"></p><ul><li>对原理类图的说明-即（木块方法模式的角色及职责）</li></ul><ol><li>AbstractClass 抽象类，类中实现了模块方法（template），定义了算法的骨架，具体子类需要去实现，其它的抽象方法operationr2,3,4</li><li>ConcreteClass 实现抽象方法 operationr2,3,4, 以完成算法中特点子类的步骤</li></ol><h5 id="14-1-3-模块方法模式解决豆浆制作问题"><a href="#14-1-3-模块方法模式解决豆浆制作问题" class="headerlink" title="14.1.3 模块方法模式解决豆浆制作问题"></a>14.1.3 模块方法模式解决豆浆制作问题</h5><ol><li>思路分析和图解（类图）</li></ol><p><img src="/posts/managermodel/image-20220219182002737.png" alt="image-20220219182002737"></p><ol start="2"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象类，表示豆浆</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token comment">//    模板方法，make,模板方法可以做成final,不让子类去覆盖</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">best</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    选材料</span>    <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步：选择好的新鲜黄豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    添加不同的配料，抽象方法，子类具体实现</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//    浸泡</span>    <span class="token keyword">void</span> <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步，黄豆和配料开始浸泡，需要3小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">best</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四步，黄豆和配料放到豆浆机去打碎 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBeanSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加入上好的红豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PeanutSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加入上好的花生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        制作红豆豆浆</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作红豆豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoyaMilk</span> redBeanSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBeanSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redBeanSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作花生豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoyaMilk</span> peanutSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PeanutSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        peanutSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="14-1-4-模块方法模式的钩子方法"><a href="#14-1-4-模块方法模式的钩子方法" class="headerlink" title="14.1.4 模块方法模式的钩子方法"></a>14.1.4 模块方法模式的钩子方法</h5><ol><li>在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事情，子类可以视情况要不要覆盖它，该方法成为“钩子”</li><li>还是用上面做黄豆的例子来讲解，比如，我们还希望制作纯豆浆，不添加任何的配料，请使用钩子方法对前面的末班方法进行改造。</li><li>代码</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象类，表示豆浆</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token comment">//    模板方法，make,模板方法可以做成final,不让子类去覆盖</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">customerWantCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">best</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    选材料</span>    <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步：选择好的新鲜黄豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    添加不同的配料，抽象方法，子类具体实现</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//    浸泡</span>    <span class="token keyword">void</span> <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步，黄豆和配料开始浸泡，需要3小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">best</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四步，黄豆和配料放到豆浆机去打碎 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    钩子方法，决定是否需要添加配料</span>    <span class="token keyword">boolean</span> <span class="token function">customerWantCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PureSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        空实现</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">customerWantCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        制作红豆豆浆</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作红豆豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoyaMilk</span> redBeanSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBeanSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redBeanSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作花生豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoyaMilk</span> peanutSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PeanutSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        peanutSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作纯豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoyaMilk</span> pureSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PureSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pureSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="14-1-5-模板方法模式在Spring框架应用的源码分析"><a href="#14-1-5-模板方法模式在Spring框架应用的源码分析" class="headerlink" title="14.1.5 模板方法模式在Spring框架应用的源码分析"></a>14.1.5 模板方法模式在Spring框架应用的源码分析</h5><ol><li>Spring IOC容器初始化时运用到的模板方法模式</li><li>代码分析+角色分析+说明类图</li></ol><p><img src="/posts/managermodel/image-20220219185705592.png" alt="image-20220219185705592"></p><p><img src="/posts/managermodel/image-20220219212304512.png" alt="image-20220219212304512"></p><ol start="3"><li>针对源码的类图（说明层次关系）</li></ol><p><img src="/posts/managermodel/image-20220219185732292.png" alt="image-20220219185732292"></p><h5 id="14-1-6-模块方法模式的注意事项和细节"><a href="#14-1-6-模块方法模式的注意事项和细节" class="headerlink" title="14.1.6 模块方法模式的注意事项和细节"></a>14.1.6 模块方法模式的注意事项和细节</h5><ol><li>基本思想是：算法只存在于一个地方，也就是在父类中，容易修改。需要修改算法时候，主要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改。</li><li>实现了最大化代码复用。父类的模板方法和已经实现的某些步骤会被子类继承而直接使用</li><li>既统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现。</li><li>该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大。</li><li>一般模板的方法都机上final关键字。防止子类重写模板方法</li><li>模板方法模式使用场景：当要完成在某个过程，该过程要执行一些列步骤，这一系列的步骤基本相同，但其个别步骤在实现时，可能不同，通常考虑用模板方法模式来处理、</li></ol><h2 id="十五、命令模式"><a href="#十五、命令模式" class="headerlink" title="十五、命令模式"></a>十五、命令模式</h2><ul><li>智能生活项目需求</li></ul><p><img src="/posts/managermodel/image-20220220200134352.png" alt="image-20220220200134352"></p><h4 id="15-1-命令模式基本介绍"><a href="#15-1-命令模式基本介绍" class="headerlink" title="15.1 命令模式基本介绍"></a>15.1 命令模式基本介绍</h4><ol><li>命令模式（Command Pattern）：在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个</li></ol><p>​        我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计</p><ol start="2"><li>命名模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。</li><li>在命名模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求（即命名，同时命令模式也可以支持可撤销的操作。）</li><li>通俗易懂的理解：将军发布命令，士兵去执行，其中有几个角色：将军（命令发布者）、士兵（命令的具体执行者），命令（连接将军和士兵）</li></ol><p>​    Invoker是调用者（将军）、Receiver是被调用者（士兵）、MyCommand是命令，实现了Command接口，持有接收对象。</p><h4 id="15-2-命令模式的原理类图"><a href="#15-2-命令模式的原理类图" class="headerlink" title="15.2  命令模式的原理类图"></a>15.2  命令模式的原理类图</h4><p><img src="/posts/managermodel/image-20220220200344435.png" alt="image-20220220200344435"></p><blockquote><p>对原理类图的说明-即（命令模式的角色以及职责）</p><ol><li>Invoker：是调用者</li><li>Command：是命令角色，需要执行的所有命令都在这里，可以是接口或者抽象类</li><li>Receiver：接收者角色，知道如何实施和执行一个请求相关的操作</li><li>ConcreteCommand：将一个接收对象与一个动作绑定，调用接收者相应的操作，实现execute</li></ol></blockquote><h4 id="15-3-命令模式解决智能生活项目"><a href="#15-3-命令模式解决智能生活项目" class="headerlink" title="15.3 命令模式解决智能生活项目"></a>15.3 命令模式解决智能生活项目</h4><p>应用实例要求</p><ol><li>编写程序，使用命令模式</li><li>思路分析和图解</li></ol><p><img src="/posts/managermodel/image-20220222151309629.png" alt="image-20220222151309629"></p><ol start="3"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建命令接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span><span class="token comment">//    执行动作（操作）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      撤销动作（操作）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LigheReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电灯打开了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电灯关闭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment">//    聚合LigheReceiver</span>    <span class="token class-name">LigheReceiver</span> light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span><span class="token class-name">LigheReceiver</span> light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//      调用接收者方法</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token class-name">LigheReceiver</span> light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span><span class="token class-name">LigheReceiver</span> light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//没有任何命令，即空执行：用于初始化每个按钮，当调用空命令时候，对象什么都不做，</span><span class="token comment">//其实这样是一种设计模式，可以省掉对空的判断</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token class-name">LigheReceiver</span> light<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteController</span> <span class="token punctuation">{</span>    <span class="token comment">//    开按钮的命令数组</span>    <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token punctuation">]</span> onCommands<span class="token punctuation">;</span>    <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token punctuation">]</span> offCommands<span class="token punctuation">;</span>    <span class="token comment">//    执行撤销的命令</span>    <span class="token class-name">Command</span> undoCommand<span class="token punctuation">;</span>    <span class="token comment">//   构造器，完成对按钮初始化</span>    <span class="token keyword">public</span> <span class="token class-name">RemoteController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        offCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            onCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            offCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//    给我们的按钮设置你需要的命令</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">Command</span> onCommand<span class="token punctuation">,</span> <span class="token class-name">Command</span> offCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token operator">=</span> onCommand<span class="token punctuation">;</span>        offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token operator">=</span> offCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    按下开按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//no 0</span><span class="token comment">//        找到你按下的按钮,并调用对应的方法</span>        onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        记录这次的操作，用于撤销</span>        undoCommand <span class="token operator">=</span> onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    按下关按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//no 0</span><span class="token comment">//        找到你按下的按钮,并调用对应的方法</span>        offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        记录这次的操作，用于撤销</span>        undoCommand <span class="token operator">=</span> offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    按下撤销按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        undoCommand<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        使用命令设计模式，完成通过遥控器，对电灯的操作</span><span class="token comment">//        创建电灯的对象（接受者）</span>        <span class="token class-name">LigheReceiver</span> ligheReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LigheReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        创建电灯相关的开关命令</span>        <span class="token class-name">LightOnCommand</span> lightOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>ligheReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LightOffCommand</span> lightOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>ligheReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        需要一个遥控器</span>        <span class="token class-name">RemoteController</span> remoteController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        给我们的遥控器设置命令,比如no = 0 是电灯的开和关操作</span>        remoteController<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lightOnCommand<span class="token punctuation">,</span> lightOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按下灯开的按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按下灯关的按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按下灯撤销的按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-4-命令模式在Spring框架JdbcTemplate应用的源码分析"><a href="#15-4-命令模式在Spring框架JdbcTemplate应用的源码分析" class="headerlink" title="15.4 命令模式在Spring框架JdbcTemplate应用的源码分析"></a>15.4 命令模式在Spring框架JdbcTemplate应用的源码分析</h4><p><img src="/posts/managermodel/image-20220222155300997.png" alt="image-20220222155300997"></p><ol><li>模式角色分析说明</li></ol><p><img src="/posts/managermodel/image-20220222155411889.png" alt="image-20220222155411889"></p><h4 id="15-5-命令模式的注意事项和细节"><a href="#15-5-命令模式的注意事项和细节" class="headerlink" title="15.5 命令模式的注意事项和细节"></a>15.5 命令模式的注意事项和细节</h4><ol><li>将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者。调用者只要调用命令对象的execute()方法就可以让接收者工作，而不必知道具体的接收者对象是谁、是如何实现的，命令对象会负责让接收者执行请求的动作，也就是说：“请求发起者”和“请求执行者”之间的解耦是通过命令对象实现，命令对象起到了纽带桥梁作用。</li><li>容易设计一个命令队列。只要把命令对象放到队列，就可以多线程的执行命令。</li><li>容易实现对请求的撤销和重做。</li><li>命令模式不足：可能导致某些系统有过多的具体命令类，增加了系统的复杂度，这点在使用的时候要注意</li><li>空命令也是一种设计模式，它为我们省去了判空的操作，在上面的实例中，如果没有用空命令，我们每按下一个按键就要判空，这给我们编码带来一定的麻烦。</li><li>命令模式经典的应用场景：界面的一个按钮都是一条命令、模拟CMD（DOS命令）订单撤销/恢复、触发-反馈机制</li></ol><h2 id="十六、访问者模式"><a href="#十六、访问者模式" class="headerlink" title="十六、访问者模式"></a>十六、访问者模式</h2><h4 id="16-1-传统方案"><a href="#16-1-传统方案" class="headerlink" title="16.1 传统方案"></a>16.1 传统方案</h4><p><img src="/posts/managermodel/image-20220222164616702.png" alt="image-20220222164616702"></p><h4 id="16-2-访问者模式基本介绍"><a href="#16-2-访问者模式基本介绍" class="headerlink" title="16.2 访问者模式基本介绍"></a>16.2 访问者模式基本介绍</h4><ol><li>访问者模式(Visitor Pattern),封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</li><li>主要将数据结构与拘束操作分离，解决数据结构和操作的耦合性问题</li><li>访问者模式的基本工作原理是：在被访问的类型里面加一个对外提供接待访问的接口</li><li>访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联),同时需要避免让这些操作“污染”这些对象的类，可以选用访问者模式解决。</li></ol><h4 id="16-3-访问者模式的原理类图"><a href="#16-3-访问者模式的原理类图" class="headerlink" title="16.3 访问者模式的原理类图"></a>16.3 访问者模式的原理类图</h4><p><img src="/posts/managermodel/image-20220222172213936.png" alt="image-20220222172213936"></p><blockquote><p>对原理类图的说明-</p><p>即（访问者模式的角色以及职责）</p><ol><li>Visitor 是抽象访问者，为该对象结构中的ConcreteElement的每一个类声明一个visit操作</li><li>ConcreteVistior：是一个具体的访问值，实现每个有Visitor声明的操作，是每个操作实现的部分</li><li>ObjectStruture能枚举它的元素，可以提供一个高层的接口，用来允许访问者访问元素</li><li>Element定义一个accept方法，接收一个访问者对象</li><li>ConcreteElement为具体元素，实现了accept方法</li></ol></blockquote><h4 id="16-4-访问者模式应用实例"><a href="#16-4-访问者模式应用实例" class="headerlink" title="16.4 访问者模式应用实例"></a>16.4 访问者模式应用实例</h4><p>应用实例要求</p><ol><li>将人分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对改个手不同的评价（评价有不同的种类，比如 成功、失败等），请使用访问者模式来实现</li><li>思路分析和图解(类图)</li></ol><p><img src="/posts/managermodel/image-20220222170714726.png" alt="image-20220222170714726"></p><ol start="3"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>    <span class="token comment">//    得到男性的测评</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//    得到女性的测评</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> woman<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">//    提供一个方法，让访问者可以访问</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//说明</span><span class="token comment">//1.这里我们使用到了双分派，即首先在客户端程序中，将具体的状态作为参数传递Woman中（第一次分派）</span><span class="token comment">//2.然后Woman类中调用作为参数的“具体方法”中方法getWomanResult，同时将自己（this）作为参数传入，完成第二次分派</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Success</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人给的评价是该歌手成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> woman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人给的评价是该歌手成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fail</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人给的评价是该歌手失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> woman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人给的评价是该歌手失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wait</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人给的评价是该歌手待定.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> woman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人给的评价是该歌手待定.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">//数据结构，管理很多人(Man,Woman)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectStructure</span> <span class="token punctuation">{</span>    <span class="token comment">//    维护了一个集合</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    增加到list</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>        persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    移除</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>        persons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    显示测评情况</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Person</span> p <span class="token operator">:</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectStructure</span> objectStructure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        成功</span>        <span class="token class-name">Success</span> success <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Fail</span> fail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>fail<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Wait</span> wait <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>应用实例小结-双分派</li></ol><p>上面提到了双分派，所谓的双分派是指不管类怎么变化，我们都能找到期望的方法运行，双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型</p><p>以上述实例，假设我们得到添加一个Wait的状态类，考察Man 类和Woman类的反应，由于使用了双分派，只需要增加一个Action子类即可在客户端调用，不需要改动任何其他类的代码</p><h4 id="16-5-访问者模式的注意事项和细节"><a href="#16-5-访问者模式的注意事项和细节" class="headerlink" title="16.5 访问者模式的注意事项和细节"></a>16.5 访问者模式的注意事项和细节</h4><p><strong>优点</strong></p><ol><li>访问者模式符合单一职责原则，让程序具有优秀的扩展性、灵活性非常高</li><li>访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器、适用于数据结构相对稳定的系统</li></ol><p><strong>缺点</strong></p><ol><li>具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的，这样造成了具体元素变更比较困难</li><li>违背了依赖倒转原则，访问者依赖的是具体元素，而不是抽象元素</li><li>因此。如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较适合</li></ol><h2 id="十七、迭代器模式"><a href="#十七、迭代器模式" class="headerlink" title="十七、迭代器模式"></a>十七、迭代器模式</h2><h4 id="17-1-传统方案"><a href="#17-1-传统方案" class="headerlink" title="17.1 传统方案"></a>17.1 传统方案</h4><p><img src="/posts/managermodel/image-20220223135105495.png" alt="image-20220223135105495"></p><p><strong>传统的设计方案</strong></p><p><img src="/posts/managermodel/image-20220223135130828.png" alt="image-20220223135130828"></p><ul><li><strong>传统方式的问题分析</strong></li></ul><ol><li>将学院你做事学校的子类，系是学院的子类，这样实际上就是站在组织大小进行分层次的</li><li>实际上我们的要求是:在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系，因此这种方案，不能很好实现的遍历操作</li><li>解决方案=&gt;迭代器模式</li></ol><h4 id="17-2-迭代器模式基本介绍"><a href="#17-2-迭代器模式基本介绍" class="headerlink" title="17.2 迭代器模式基本介绍"></a>17.2 迭代器模式基本介绍</h4><p><strong>基本介绍</strong></p><ol><li>迭代器模式是常用的设计模式，属于行为型模式</li><li>如果我们的集合元素是不同的方式实现的，有数组，还有java的集合类，或者还有其他方式，当客户端要遍历这些集合元素的时候就要使用多重遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决。</li><li>迭代器模式，提供一种遍历集合元素的统一接口，用一致的方法遍历集合元素，不需要知道集合对象的底层表示，即：不暴露其内部的结构</li></ol><ul><li><strong>迭代器模式的原理类图</strong></li></ul><p><img src="/posts/managermodel/image-20220223185428143.png" alt="image-20220223185428143"></p><ul><li>对原理类图的说明（迭代器模式的角色以及职责）</li></ul><ol><li>Itertor:迭代器接口，是系统提供，含义hasNext，next,remove</li><li>ConcretrIterator:具体的迭代器类，管理迭代</li><li>Aggregate:一个统一的聚合接口，将客户端和具体聚合解耦</li><li>ConcreteAggreage:具体的聚合持有对象集合，并且提供一个方法，返回一个迭代器，该迭代器可以正确遍历集合</li><li>Client:客户端，通过Iterator和Aggregate依赖子类</li></ol><h4 id="17-3-迭代器模式应用实例"><a href="#17-3-迭代器模式应用实例" class="headerlink" title="17.3 迭代器模式应用实例"></a>17.3 迭代器模式应用实例</h4><ol><li>应用实例要求</li></ol><p>编写程序展示一个学校院系结构：需求是这样，要在一个页面中展示出学校的院系组成，一个学校又多个学院，一个学院有多个系</p><ol start="2"><li>设计思路分析</li></ol><p><img src="/posts/managermodel/image-20220223185503549.png" alt="image-20220223185503549"></p><ol start="3"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//系</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Colleage</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//    增加系的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//    返回一个迭代器，遍历</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConputerColleageIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token comment">//  这里我们需要知道department是以怎样的方式存放 =》数组</span>    <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">;</span>    <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//遍历的位置</span>    <span class="token keyword">public</span> <span class="token class-name">ConputerColleageIterator</span><span class="token punctuation">(</span><span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departments <span class="token operator">=</span> departments<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    判断是否还有下一个元素</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&gt;=</span> departments<span class="token punctuation">.</span>length <span class="token operator">||</span> departments<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Department</span> department <span class="token operator">=</span> departments<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>        position <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> department<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    删除的方法，默认空实现</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoColleageIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> departments<span class="token punctuation">;</span> <span class="token comment">//信息工程学院是以List方式存放系</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//索引</span>    <span class="token keyword">public</span> <span class="token class-name">InfoColleageIterator</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> departments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departments <span class="token operator">=</span> departments<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> departments<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            index <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> departments<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerColleage</span> <span class="token keyword">implements</span> <span class="token class-name">Colleage</span><span class="token punctuation">{</span>    <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">;</span>    <span class="token keyword">int</span> numOfDepartment <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//保存当前数组的对象个数</span>    <span class="token keyword">public</span> <span class="token class-name">ComputerColleage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        departments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"Java专业"</span><span class="token punctuation">,</span><span class="token string">"Java专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"PHP专业"</span><span class="token punctuation">,</span><span class="token string">"PHP专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"大数据专业"</span><span class="token punctuation">,</span><span class="token string">"大数据专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"计算机学院"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Department</span> department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">[</span>numOfDepartment<span class="token punctuation">]</span> <span class="token operator">=</span> department<span class="token punctuation">;</span>        numOfDepartment <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConputerColleageIterator</span><span class="token punctuation">(</span>departments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoColleage</span> <span class="token keyword">implements</span> <span class="token class-name">Colleage</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> departmentList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InfoColleage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        departmentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"信息安全专业"</span><span class="token punctuation">,</span><span class="token string">"信息安全专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"网络安全专业"</span><span class="token punctuation">,</span><span class="token string">"网络安全专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"数据安全专业"</span><span class="token punctuation">,</span><span class="token string">"数据安全专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"信息工程学院"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Department</span> department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>        departmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>department<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">InfoColleageIterator</span><span class="token punctuation">(</span>departmentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutPutImpl</span> <span class="token punctuation">{</span>    <span class="token comment">//    学院集合</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Colleage</span><span class="token punctuation">&gt;</span></span> colleageList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OutPutImpl</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Colleage</span><span class="token punctuation">&gt;</span></span> colleageList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colleageList <span class="token operator">=</span> colleageList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    遍历所有学院，然后调用printDepartment 输出各个学院的系</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printColleage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        从colleageList取出所有学院，Java中的List已经实现Iterator</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Colleage</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> colleageList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//            取出一个学院</span>            <span class="token class-name">Colleage</span> colleage <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===="</span> <span class="token operator">+</span> colleage<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printDepartment</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token punctuation">)</span> colleage<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到对应的迭代器</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//    输出学院输出系</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printDepartment</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Department</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Department</span><span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        创建学院</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Colleage</span><span class="token punctuation">&gt;</span></span> colleageList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ComputerColleage</span> computerColleage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerColleage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InfoColleage</span> infoColleage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfoColleage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colleageList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>computerColleage<span class="token punctuation">)</span><span class="token punctuation">;</span>        colleageList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>infoColleage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutPutImpl</span> outPutImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutPutImpl</span><span class="token punctuation">(</span>colleageList<span class="token punctuation">)</span><span class="token punctuation">;</span>        outPutImpl<span class="token punctuation">.</span><span class="token function">printColleage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="17-4-迭代器模式在JDK-ArrayList集合应用的源码分析"><a href="#17-4-迭代器模式在JDK-ArrayList集合应用的源码分析" class="headerlink" title="17.4 迭代器模式在JDK-ArrayList集合应用的源码分析"></a>17.4 迭代器模式在JDK-ArrayList集合应用的源码分析</h4><ol><li>JDK的ArrayList集合中就使用了迭代器模式</li><li>代码分析+类图+说明</li></ol><p><img src="/posts/managermodel/image-20220223194433834.png" alt="image-20220223194433834"></p><p><img src="/posts/managermodel/image-20220223200034392.png" alt="image-20220223200034392"></p><p>3.对类图的角色分析和说明</p><ol><li>内部类Itr充当具体实现迭代器Iterator的类，作为ArrayList内部类</li><li>List就是充当了聚合接口，含有一个iterator()方法，返回一个迭代器对象</li><li>ArrayList是实现聚合接口List的子类，实现了iterator()</li><li>Iterator接口系统提供</li><li>迭代器模式解决了不同集合(ArrayList,LinkedList)统一遍历问题</li></ol><h4 id="17-5迭代器模式的注意事项和细节"><a href="#17-5迭代器模式的注意事项和细节" class="headerlink" title="17.5迭代器模式的注意事项和细节"></a>17.5迭代器模式的注意事项和细节</h4><p><strong>优点</strong></p><ol><li>提供了一个统一的方法遍历对象，客户不用再考虑聚合的类型，使用一种方法就可以遍历对象了</li><li>隐藏了聚合的内部结构，客户端要遍历聚合的时候只能取到迭代器，而不会知道决和的具体组成</li><li>提供了一种设计思想，就是一个类应该只有一个引起变化的原因(叫做单一责任原则)。在聚合类中，我们把迭代器分开，就是要把管理对象集合和遍历对象集合的责任分开，这样一来集合改变的话，只影响到聚合对象。而如果遍历方法改变的话，只影响到了迭代器</li><li>而要展示一组相似对象。或者遍历一组相同对象时使用，适合使用迭代器模式</li></ol><p><strong>缺点</strong></p><p>每个聚合对象都是要一个迭代器，会产生多个迭代器不好管理</p><h2 id="十八、观察者模式"><a href="#十八、观察者模式" class="headerlink" title="十八、观察者模式"></a>十八、观察者模式</h2><h4 id="18-1-传统方案"><a href="#18-1-传统方案" class="headerlink" title="18.1 传统方案"></a>18.1 传统方案</h4><p><img src="/posts/managermodel/image-20220223201840055.png" alt="image-20220223201840055"></p><p><strong>天气预报设计方案-普通方案 WeatherData类</strong></p><p><img src="/posts/managermodel/image-20220223201952796.png" alt="image-20220223201952796"></p><ol><li>通过getXxx方法，可以让第三方接入，并且得到相关信息</li><li>当数据有更新时候，气象站通过调用dataChange()去更新数据。当第三方再次获取时，就能得到最新数据，当然也可以推送</li></ol><p><img src="/posts/managermodel/image-20220223202105010.png" alt="image-20220223202105010"></p><p>CurrentConditions(当前天气的情况)</p><p>可以理解成是我们气象局的网站//推送</p><ul><li>代码实现</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 显示当前天气情况(可以理解成是气象站自己的网站) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditions</span> <span class="token punctuation">{</span><span class="token comment">//    温度、气压、湿度</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span><span class="token comment">//    更新天气情况，是由WeatherData来调用，使用推送模式</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    显示</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****Today mTemperature:"</span> <span class="token operator">+</span> temperature <span class="token operator">+</span> <span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****Today mPressure:"</span> <span class="token operator">+</span> pressure <span class="token operator">+</span> <span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****Today mHumidity:"</span> <span class="token operator">+</span> humidity <span class="token operator">+</span> <span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 类是核心 * 1. 包含最新的天气情况信息 * 2. 含有CurrentConditions对象 * 3. 当数据有更新的时候，就调用CurrentConditions对象update方法(含display)，这样他们(接入方)就看到最新的消息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperatrue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CurrentConditions</span> currentConditions<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token class-name">CurrentConditions</span> currentConditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentConditions <span class="token operator">=</span> currentConditions<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getTemperatrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> temperatrue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pressure<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> humidity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        调用接入方的update</span>        currentConditions<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token function">getTemperatrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    当数据有更新时候，就调用setData</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperatrue<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperatrue <span class="token operator">=</span> temperatrue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span><span class="token comment">//        调用dataChange,将最新的信息推送给接入方currentConditions</span>        <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        创建接入方currentConditions</span>        <span class="token class-name">CurrentConditions</span> currentConditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentConditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        创建WeatherData 并将接入方currentConditions传递到WeatherData中</span>        <span class="token class-name">WeatherData</span> weatherData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span>currentConditions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        更新天气情况</span>        weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======== "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        天气情况变化</span>        weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>问题分析</strong></li></ul><ol><li>其他第三方接入气象站获取数据的问题</li><li>无法在运行时动态的添加第三方(新浪网站)</li><li>违反ocp原则=&gt;观察者模式</li></ol><p>//在WeatherData中，当增加一个第三方，都需要创建一个对应的第三方的公告板对象，并加入到dataChange,不利于维护，也不是动态加入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        调用接入方的update</span>        currentConditions<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token function">getTemperatrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="18-2-观察者模式原理"><a href="#18-2-观察者模式原理" class="headerlink" title="18.2 观察者模式原理"></a>18.2 观察者模式原理</h4><ol><li>观察者模式类似于订牛奶业务</li><li>奶站/气象局:Subject</li><li>用户/第三方网站:Observer</li></ol><p><img src="/posts/managermodel/image-20220223214546450.png" alt="image-20220223214546450"></p><ul><li><p>Subject:登记注册、移除和通知</p><ol><li>registerObserver 注册</li><li>removeObserver移除</li><li>notifyObservers( )通知所有的注册的用户，根据不同的需求，可以是更新数据，让用户来取，也可能是实施推送。</li></ol></li><li><p>Observer:接收输入</p></li></ul><p><img src="/posts/managermodel/image-20220223214608076.png" alt="image-20220223214608076"></p><ul><li>观察者模式：对象之间多对一依赖的一种设计方案，被依赖的对象为Subject，依赖的对象为Observer,Subject通知Observer变化，比如这里的奶站是Subject，是1的一方。用户时Observer,是多的一方。</li></ul><h4 id="18-3-观察者模式解决天气预报需求"><a href="#18-3-观察者模式解决天气预报需求" class="headerlink" title="18.3 观察者模式解决天气预报需求"></a>18.3 观察者模式解决天气预报需求</h4><ol><li><strong>观察者模式的好处</strong>：<ol><li>观察者模式设计后，会以集合的方式来管理用户(Observer),包括注册，移除和通知</li><li>我们增加观察者(这里可以理解成一个新的公告板，就不需要去修改核心类WeatherData不会修改代码)，遵守了ocp原则</li></ol></li></ol><ol start="2"><li>类图说明</li></ol><p><img src="/posts/managermodel/image-20220223220829343.png" alt="image-20220223220829343"></p><ol start="3"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口,让 WeatherData 来实现</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//观察者接口，由观察者来实现</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditions</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>    <span class="token comment">//    温度、气压、湿度</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token comment">//    更新天气情况，是由WeatherData来调用，使用推送模式</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    显示</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****Today mTemperature:"</span> <span class="token operator">+</span> temperature <span class="token operator">+</span> <span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****Today mPressure:"</span> <span class="token operator">+</span> pressure <span class="token operator">+</span> <span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****Today mHumidity:"</span> <span class="token operator">+</span> humidity <span class="token operator">+</span> <span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaiduSite</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>    <span class="token comment">//    温度、气压、湿度</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token comment">//    更新天气情况，是由WeatherData来调用，使用推送模式</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    显示</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Baidu "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****Baidu Temperature:"</span> <span class="token operator">+</span> temperature <span class="token operator">+</span> <span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****Baidu Pressure:"</span> <span class="token operator">+</span> pressure <span class="token operator">+</span> <span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****Baidu Humidity:"</span> <span class="token operator">+</span> humidity <span class="token operator">+</span> <span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 类是核心 * 1. 包含最新的天气情况信息 * 2. 含有 观察者集合，使用ArrayList管理 * 3. 当数据有更新的时候，就调用 ArrayList,通知所有的(接入方)就看到最新的消息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperatrue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token comment">//    观察者集合</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> observers<span class="token punctuation">;</span><span class="token comment">//    加入新的第三方</span>    <span class="token keyword">public</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getTemperatrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> temperatrue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pressure<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> humidity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        调用接入方的update</span><span class="token comment">//        currentConditions.update(getTemperatrue(), getPressure(), getHumidity());</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    当数据有更新时候，就调用setData</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperatrue<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperatrue <span class="token operator">=</span> temperatrue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span><span class="token comment">//        调用dataChange,将最新的信息推送给接入方currentConditions</span>        <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    注册一个观察者</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    移除一个观察者</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>observers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//    遍历所有的观察者，并通知</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> observers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            observers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>temperatrue<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pressure<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        创建一个WeatherData</span>        <span class="token class-name">WeatherData</span> weatherData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        创建观察者</span>        <span class="token class-name">CurrentConditions</span> currentConditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentConditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BaiduSite</span> baiduSite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaiduSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        注册到weatherData</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>currentConditions<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>baiduSite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        测试</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知各个注册的观察者，看看信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">10f</span><span class="token punctuation">,</span> <span class="token number">100f</span><span class="token punctuation">,</span> <span class="token number">30.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====one===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">removeObserver</span><span class="token punctuation">(</span>currentConditions<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">5f</span><span class="token punctuation">,</span> <span class="token number">65f</span><span class="token punctuation">,</span> <span class="token number">12f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="18-4-观察者模式在jdk应用的源码分析"><a href="#18-4-观察者模式在jdk应用的源码分析" class="headerlink" title="18.4 观察者模式在jdk应用的源码分析"></a>18.4 观察者模式在jdk应用的源码分析</h4><ol><li>jdk的Observable类就使用了观察者模式</li><li>代码分析+模式角色分析</li></ol><p><img src="/posts/managermodel/image-20220223222751389.png" alt="image-20220223222751389"></p><ol start="3"><li><p>模式角色分析</p></li><li><p>Observable的作用和地位等价于我们前面讲过的Subject</p></li><li><p>Observable是类，不是接口，类中已经实现了核心的方法，即管理Observer的方法 add…delete…notify…</p></li><li><p>Observer的作用和地位等价于我们前面讲过的Observer，有update</p></li><li><p>Observable和Observer的使用方法和前面讲过的一样，只是Observable是类，通过继承来实现观察者模式</p></li></ol><h2 id="十九、中介者模式"><a href="#十九、中介者模式" class="headerlink" title="十九、中介者模式"></a>十九、中介者模式</h2><h4 id="19-1-传统方案"><a href="#19-1-传统方案" class="headerlink" title="19.1 传统方案"></a>19.1 传统方案</h4><p><img src="/posts/managermodel/image-20220225024015792.png" alt="image-20220225024015792"></p><ol><li><strong>传统方案解决智能家庭管理问题</strong></li></ol><p><img src="/posts/managermodel/image-20220225024048485.png" alt="image-20220225024048485"></p><ol start="2"><li><p><strong>传统的方式的问题分析</strong></p></li><li><p>当各电器对象有多种状态改变时候，相互之间的调用关系会比较复杂</p></li><li><p>各个电器对象彼此联系，不利于耦合</p></li><li><p>各个电器对象之间所传递的消息(参数)，容易混乱</p></li><li><p>当系统增加一个新的电器对象的时候，或者执行流程改变时候，代码的可维护性、扩展性都不理想 </p></li></ol><h4 id="19-2-中介者模式基本介绍"><a href="#19-2-中介者模式基本介绍" class="headerlink" title="19.2 中介者模式基本介绍"></a>19.2 中介者模式基本介绍</h4><ol><li>中介者模式，用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显示地相互作用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li><li>中介者模式属于行为型模式，使代码易于维护</li><li>比如MVC模式，C（Controller控制器）是M(Model模型)和V(View视图)的中介者，在前后端交互时候起到了中间人的作用</li></ol><ul><li><strong>中介者模式的原理类图</strong></li></ul><p><img src="/posts/managermodel/image-20220225024838399.png" alt="image-20220225024838399"></p><p><img src="/posts/managermodel/image-20220225134453299.png" alt="image-20220225134453299"></p><h4 id="19-3-对原理类图的说明-即-中介者模式的角色以及职责"><a href="#19-3-对原理类图的说明-即-中介者模式的角色以及职责" class="headerlink" title="19.3 对原理类图的说明-即(中介者模式的角色以及职责)"></a>19.3 <strong>对原理类图的说明-即(中介者模式的角色以及职责)</strong></h4><ol><li>Mediator 就是抽象中介者，定义了同事对象到中介者对象的接口</li><li>Colleague是抽象同事类</li><li>ConcreteMediator具体的中介者对象，实现抽象方法，他需要知道所有的具体的同事类，即以一个集合来管理HashMap,并接受某个同时对象消息，完成响应的任务</li><li>ConcreteColleague具体的同事类，会有很多，每个同事只知道自己的行为，而不了解其他同事类的行为(方法),但时他们都依赖中介者对象</li></ol><h4 id="19-4-中介者模式应用实例-只能家庭管理"><a href="#19-4-中介者模式应用实例-只能家庭管理" class="headerlink" title="19.4 中介者模式应用实例-只能家庭管理"></a>19.4 中介者模式应用实例-只能家庭管理</h4><ol><li>应用实例要求</li></ol><p>​    完成前面的智能家庭的项目，使用中介者模式</p><ol start="2"><li>思路分析和图解(类图)</li></ol><p><img src="/posts/managermodel/image-20220225134408371.png" alt="image-20220225134408371"></p><ol start="3"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//同事抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Colleague</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Mediator</span> <span class="token class-name">GetMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mediator<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">SendMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> stateChange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token comment">//将给中介者对象，加入到集合中</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Register</span><span class="token punctuation">(</span><span class="token class-name">String</span> colleagueName<span class="token punctuation">,</span> <span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//接收消息, 具体的同事对象发出</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">GetMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> stateChange<span class="token punctuation">,</span> <span class="token class-name">String</span> colleagueName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">SendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeMachine</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        <span class="token class-name"><span class="token namespace">mediator<span class="token punctuation">.</span></span>Register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">SendMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> stateChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>GetMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMessage</span><span class="token punctuation">(</span>stateChange<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">StartCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It's time to startcoffee!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">FinishCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After 5 minutes!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Coffee is ok!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SendMessage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Curtains</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Curtains</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        <span class="token class-name"><span class="token namespace">mediator<span class="token punctuation">.</span></span>Register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">SendMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> stateChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>GetMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMessage</span><span class="token punctuation">(</span>stateChange<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">UpCurtains</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am holding Up Curtains!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> TV <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">TV</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        <span class="token class-name"><span class="token namespace">mediator<span class="token punctuation">.</span></span>Register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">SendMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> stateChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>GetMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMessage</span><span class="token punctuation">(</span>stateChange<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">StartTv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It's time to StartTv!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">StopTv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StopTv!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeMachine</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        <span class="token class-name"><span class="token namespace">mediator<span class="token punctuation">.</span></span>Register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">SendMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> stateChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>GetMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMessage</span><span class="token punctuation">(</span>stateChange<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">StartCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It's time to startcoffee!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">FinishCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After 5 minutes!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Coffee is ok!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SendMessage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//具体的中介者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteMediator</span> <span class="token keyword">extends</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token comment">//集合，放入所有的同事对象</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Colleague</span><span class="token punctuation">&gt;</span></span> colleagueMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> interMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        colleagueMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Colleague</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Register</span><span class="token punctuation">(</span><span class="token class-name">String</span> colleagueName<span class="token punctuation">,</span> <span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        colleagueMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>colleagueName<span class="token punctuation">,</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token keyword">instanceof</span> <span class="token class-name">Alarm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            interMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Alarm"</span><span class="token punctuation">,</span> colleagueName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token keyword">instanceof</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            interMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CoffeeMachine"</span><span class="token punctuation">,</span> colleagueName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token keyword">instanceof</span> TV<span class="token punctuation">)</span> <span class="token punctuation">{</span>            interMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"TV"</span><span class="token punctuation">,</span> colleagueName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token keyword">instanceof</span> <span class="token class-name">Curtains</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            interMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Curtains"</span><span class="token punctuation">,</span> colleagueName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//具体中介者的核心方法</span>    <span class="token comment">//1. 根据得到消息，完成对应任务</span>    <span class="token comment">//2. 中介者在这个方法，协调各个具体的同事对象，完成任务</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">GetMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> stateChange<span class="token punctuation">,</span> <span class="token class-name">String</span> colleagueName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token comment">//处理闹钟发出的消息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>colleagueName<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Alarm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stateChange <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CoffeeMachine</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>interMap                        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"CoffeeMachine"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>TV<span class="token punctuation">)</span> <span class="token punctuation">(</span>colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>interMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"TV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartTv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stateChange <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>TV<span class="token punctuation">)</span> <span class="token punctuation">(</span>colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>interMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"TV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StopTv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>colleagueName<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Curtains</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>interMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Curtains"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">UpCurtains</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>colleagueName<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> TV<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果TV发现消息</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>colleagueName<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Curtains</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//如果是以窗帘发出的消息，这里处理...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">SendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个中介者对象</span>        <span class="token class-name">Mediator</span> mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建Alarm 并且加入到  ConcreteMediator 对象的HashMap</span>        <span class="token class-name">Alarm</span> alarm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Alarm</span><span class="token punctuation">(</span>mediator<span class="token punctuation">,</span> <span class="token string">"alarm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建了CoffeeMachine 对象，并  且加入到  ConcreteMediator 对象的HashMap</span>        <span class="token class-name">CoffeeMachine</span> coffeeMachine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span>mediator<span class="token punctuation">,</span>                <span class="token string">"coffeeMachine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建 Curtains , 并  且加入到  ConcreteMediator 对象的HashMap</span>        <span class="token class-name">Curtains</span> curtains <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Curtains</span><span class="token punctuation">(</span>mediator<span class="token punctuation">,</span> <span class="token string">"curtains"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TV</span> tV <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TV</span><span class="token punctuation">(</span>mediator<span class="token punctuation">,</span> <span class="token string">"TV"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让闹钟发出消息</span>        <span class="token class-name"><span class="token namespace">alarm<span class="token punctuation">.</span></span>SendAlarm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">coffeeMachine<span class="token punctuation">.</span></span>FinishCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">alarm<span class="token punctuation">.</span></span>SendAlarm</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="19-5-中介者模式的注意事项和细节"><a href="#19-5-中介者模式的注意事项和细节" class="headerlink" title="19.5 中介者模式的注意事项和细节"></a>19.5 中介者模式的注意事项和细节</h4><ol><li>多个类相互耦合，会形成网状结构，使用中介者模式将网状结构分离为星型结构，进行解耦</li><li>减少类间依赖，降低了耦合，符合迪米特法则</li><li>中介者承担了较多的责任，一旦中介者出现了问题，整个系统就会受到影响</li><li>如果</li><li>设计不当，中介者对象本身变得过于复杂，这点在实际使用时候，要特别注意</li></ol><h2 id="二十、备忘录模式"><a href="#二十、备忘录模式" class="headerlink" title="二十、备忘录模式"></a>二十、备忘录模式</h2><h4 id="20-1-传统方案"><a href="#20-1-传统方案" class="headerlink" title="20.1 传统方案"></a>20.1 传统方案</h4><p><img src="/posts/managermodel/image-20220225135718771.png" alt="image-20220225135718771"></p><h4 id="20-2-备忘录模式基本介绍"><a href="#20-2-备忘录模式基本介绍" class="headerlink" title="20.2 备忘录模式基本介绍"></a>20.2 备忘录模式基本介绍</h4><p>基本介绍</p><ol><li>备忘录模式在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态</li><li>可以这样理解备忘录模式：现实生活中的备忘录是用来记录某些要去做的事情，或者是记录已经达成的共同意见的事情，以防忘记。而在软件层面，备忘录模式有着相同的含义，备忘录对象主要用来记录一个对象的某种状态，或者某些数据，当要做回退时，可以从备忘录对象里获取原来的数据进行恢复操作</li><li>备忘录模式属于行为型模式</li></ol><h4 id="20-3-备忘录模式的原理类图"><a href="#20-3-备忘录模式的原理类图" class="headerlink" title="20.3 备忘录模式的原理类图"></a>20.3 备忘录模式的原理类图</h4><p><img src="/posts/managermodel/image-20220225140119346.png" alt="image-20220225140119346"></p><ul><li>对原理类图的说明-即(备忘录模式的角色以及职责)</li></ul><ol><li>originator：对象(需要保存状态的对象)</li><li>Memento:备忘录对象，负责保存好记录，即Originator内部状态</li><li>Caretaker：守护者对象。负责保存多个备忘录对象。使用集合管理，提高效率</li><li>说明：如果希望保存个originator对象的不同状态，也可以，只需要HashMap&lt;String,集合&gt;</li></ol><ul><li>代码实现</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Originator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span><span class="token comment">//状态信息</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    编写一哥方法，可以保存一个状态对象Memento</span><span class="token comment">//    因此编写一个方法，返回Memento</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">saveStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    通过备忘录对象，恢复状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStateFromMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token punctuation">{</span><span class="token comment">//  在List集合中会有很多的备忘录对象</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Memento</span><span class="token punctuation">&gt;</span></span> mementoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Memento</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mementoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    获取到第index个Originator 的备忘录对象(即保存状态)</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mementoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Memento</span> memento <span class="token operator">:</span> mementoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>memento<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Originator</span> originator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Originator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Caretaker</span> caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"状态#1 攻击力100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        保存了当前的状态</span>        caretaker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">saveStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"状态#2 攻击力160"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">saveStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"状态#3 攻击力120"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">saveStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前的状态是="</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        希望恢复到状态1</span>        originator<span class="token punctuation">.</span><span class="token function">getStateFromMemento</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恢复后的状态="</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="20-4-角色恢复状态实例"><a href="#20-4-角色恢复状态实例" class="headerlink" title="20.4 角色恢复状态实例"></a>20.4 角色恢复状态实例</h4><ol><li>思路分析和图解(类图)</li></ol><p><img src="/posts/managermodel/image-20220225140419732.png" alt="image-20220225140419732"></p><ol start="2"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span>    <span class="token comment">//    攻击力、防御</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> vit<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> def<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token keyword">int</span> vit<span class="token punctuation">,</span> <span class="token keyword">int</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVit</span><span class="token punctuation">(</span><span class="token keyword">int</span> vit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDef</span><span class="token punctuation">(</span><span class="token keyword">int</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//守护者对象，保存游戏角色的状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token punctuation">{</span>    <span class="token comment">//  如果值保存一次状态</span>    <span class="token keyword">private</span> <span class="token class-name">Memento</span> memento<span class="token punctuation">;</span>    <span class="token comment">//  对GameRole 保存多次状态</span><span class="token comment">//    private ArrayList&lt;Memento&gt; mementos;</span>    <span class="token comment">//    对多个游戏角色保存多个状态</span><span class="token comment">//    private HashMap&lt;String, ArrayList&lt;Memento&gt;&gt; rolesMementos;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> memento<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memento <span class="token operator">=</span> memento<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameRole</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> vit<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> def<span class="token punctuation">;</span>    <span class="token comment">//    创建Memento，即根据当前的状态得到Memento</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span>vit<span class="token punctuation">,</span> def<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    从备忘录对象，恢复GameRole状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recoverGameRoleFromMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//    显示当前游戏角色的状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游戏角色当前的攻击力："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">+</span> <span class="token string">" 防御力为："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>def<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVit</span><span class="token punctuation">(</span><span class="token keyword">int</span> vit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDef</span><span class="token punctuation">(</span><span class="token keyword">int</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        创建游戏角色</span>        <span class="token class-name">GameRole</span> gameRole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">setVit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">setDef</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"和BOSS大战前的状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        把当前状态保存caretaker</span>        <span class="token class-name">Caretaker</span> caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">setMemento</span><span class="token punctuation">(</span>gameRole<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"和BOSS大战~~~被削弱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">setVit</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">setDef</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大战后，使用备忘录对象恢复到战斗前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">recoverGameRoleFromMemento</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恢复后的状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="20-5-备忘录吗，模式的注意事项和细节"><a href="#20-5-备忘录吗，模式的注意事项和细节" class="headerlink" title="20.5 备忘录吗，模式的注意事项和细节"></a>20.5 备忘录吗，模式的注意事项和细节</h4><ol><li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态</li><li>实现了信息的封装，使得用户不需要关心状态的保存细节</li><li>如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存，这个需要注意</li><li>适用的应用场景：1. 后悔药。 2、打游戏时候的存档。 3、Windows里面的ctrl+z。 4.IE的后退。 4、数据库的事务管理</li><li>为了节约内存，备忘录模式可以和原型模式配合使用</li></ol><h2 id="二十一、解释器模式"><a href="#二十一、解释器模式" class="headerlink" title="二十一、解释器模式"></a>二十一、解释器模式</h2><h4 id="21-1-四则运算问题"><a href="#21-1-四则运算问题" class="headerlink" title="21.1 四则运算问题"></a>21.1 四则运算问题</h4><p><img src="/posts/managermodel/image-20220225155047696.png" alt="image-20220225155047696"></p><h4 id="21-2-传统方案解决四则运算问题分析"><a href="#21-2-传统方案解决四则运算问题分析" class="headerlink" title="21.2 传统方案解决四则运算问题分析"></a>21.2 传统方案解决四则运算问题分析</h4><ol><li>编写一个方法，接收表达式的形式，然后根据用户输入的数值进行解析，得到结果</li><li>问题分析：如果加入新的运算符，比如*/(等等，不利于扩展，另外一个方法来解析会造成程序结构混乱，不够清晰)</li><li>解决方案：可有考虑使用解释器模式：即：表达式-&gt;解释器(可以有多种) -&gt;结果</li></ol><h4 id="21-3-解释器模式基本介绍"><a href="#21-3-解释器模式基本介绍" class="headerlink" title="21.3 解释器模式基本介绍"></a>21.3 解释器模式基本介绍</h4><ol><li>在编译原理中，一个算术表达式通过词法解析器形成词法单元，而后这些词法单元再通过语法分析器构建语法分析树，最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解释器</li><li>解释器模式：是指给定一个语言(表达式)，定义它的文法的一种表示，并定义一个解释器，使用该解释器来解释语言中的句子(表达式)</li><li>应用场景<ol><li>应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li><li>一些重复出现的问题可以用一种简单的语言来表达</li><li>一个简单语法需要解释的场景</li></ol></li><li>这样的例子还有，比如编译器、运算表达式计算、正则表达式、机器人等</li></ol><h4 id="21-4-解释器模式的原理类图"><a href="#21-4-解释器模式的原理类图" class="headerlink" title="21.4 解释器模式的原理类图"></a>21.4 解释器模式的原理类图</h4><p><img src="/posts/managermodel/image-20220225155712988.png" alt="image-20220225155712988"></p><ul><li>对原理类图的说明 -即(解释器模式的角色以及职责)</li></ul><ol><li>Context:是环境角色，含有解释器之外的全局信息</li><li>AbstractExpression:抽象表达式，声明一个抽象的解释操作，这个方法为抽象语法树汇总所有的节点所共享</li><li>TerminalExpression：为终结符表达式。为文法中的非终结符实现解释操作</li><li>NonTermialExpression:为非终结符表达式，为文法中的非终结符实现解释操作</li><li>说明：输入Context he TermainalExpression 信息通过Client输入即可</li></ol><h4 id="21-5-解释器模式来实现四则"><a href="#21-5-解释器模式来实现四则" class="headerlink" title="21.5 解释器模式来实现四则"></a>21.5 解释器模式来实现四则</h4><ol><li><p>应用实例要求</p><p>通过解释器模式来实现四则运算</p></li></ol><p>​        如计算a+b-c的值</p><ol start="2"><li>思路分析和图解(类图)</li></ol><p><img src="/posts/managermodel/image-20220225163459477.png" alt="image-20220225163459477"></p><ol start="3"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 抽象类表达式，通过HashMap 键值对, 可以获取到变量的值 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token comment">// a + b - c</span>    <span class="token comment">// 解释公式和数值, key 就是公式(表达式) 参数[a,b,c], value就是就是具体值</span>    <span class="token comment">// HashMap {a=10, b=20}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 变量的解释器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span> <span class="token comment">// key=a,key=b,key=c</span>    <span class="token keyword">public</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// var 就是{a=10, b=20}</span>    <span class="token comment">// interpreter 根据 变量名称，返回对应值</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">var</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 抽象运算符号解析器 这里，每个运算符号，都只和自己左右两个数字有关系， * 但左右两个数字有可能也是一个解析的结果，无论何种类型，都是Expression类的实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SymbolExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Expression</span> left<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">Expression</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SymbolExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//因为 SymbolExpression 是让其子类来实现，因此 interpreter 是一个默认实现</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 加法解释器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddExpression</span> <span class="token keyword">extends</span> <span class="token class-name">SymbolExpression</span>  <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//处理相加</span>    <span class="token comment">//var 仍然是 {a=10,b=20}..</span>    <span class="token comment">//一会我们debug 源码,就ok</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//super.left.interpreter(var) ： 返回 left 表达式对应的值 a = 10</span>        <span class="token comment">//super.right.interpreter(var): 返回right 表达式对应值 b = 20</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubExpression</span> <span class="token keyword">extends</span> <span class="token class-name">SymbolExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">SubExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//求出left 和 right 表达式相减后的结果</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">super</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token comment">// 定义表达式</span>    <span class="token keyword">private</span> <span class="token class-name">Expression</span> expression<span class="token punctuation">;</span>    <span class="token comment">// 构造函数传参，并解析</span>    <span class="token keyword">public</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token class-name">String</span> expStr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// expStr = a+b</span>        <span class="token comment">// 安排运算先后顺序</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Expression</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 表达式拆分成字符数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> expStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [a, +, b]</span>        <span class="token class-name">Expression</span> left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Expression</span> right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//遍历我们的字符数组， 即遍历  [a, +, b]</span>        <span class="token comment">//针对不同的情况，做处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token char">'+'</span><span class="token operator">:</span> <span class="token comment">//</span>                    left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从stack取出left =&gt; "a"</span>                    right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取出右表达式 "b"</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 然后根据得到left 和 right 构建 AddExpresson加入stack</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'-'</span><span class="token operator">:</span> <span class="token comment">//</span>                    left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SubExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token comment">//如果是一个 Var 就创建要给 VarExpression 对象，并push到 stack</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//当遍历完整个 charArray 数组后，stack 就得到最后Expression</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//最后将表达式a+b和 var = {a=10,b=20}</span>        <span class="token comment">//然后传递给expression的interpreter进行解释执行</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">String</span> expStr <span class="token operator">=</span> <span class="token function">getExpStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a+b</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>expStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// var {a=10, b=20}</span>        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span>expStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运算结果："</span> <span class="token operator">+</span> expStr <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> calculator<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获得表达式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getExpStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入表达式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获得值映射</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> expStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> expStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token char">'+'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入"</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> in <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="21-6-解释器模式在Spring框架应用的源码剖析"><a href="#21-6-解释器模式在Spring框架应用的源码剖析" class="headerlink" title="21.6 解释器模式在Spring框架应用的源码剖析"></a>21.6 解释器模式在Spring框架应用的源码剖析</h4><p><img src="/posts/managermodel/image-20220225174456330.png" alt="image-20220225174456330"></p><ul><li><strong>说明</strong></li></ul><p><img src="/posts/managermodel/image-20220225174514525.png" alt="image-20220225174514525"></p><h4 id="21-7-解释器模式的注意事项和细节"><a href="#21-7-解释器模式的注意事项和细节" class="headerlink" title="21.7 解释器模式的注意事项和细节"></a>21.7 解释器模式的注意事项和细节</h4><ol><li>当有一个语言需要解释执行，可将语言中的句子表示为一个抽象语法树，就可以考虑使用解释器模式，让程序具有良好的扩展性</li><li>应用场景：编译器、运算表达式计算、正则表达式、机器人等</li><li>使用解释器可能带来的问题：解释器模式会引起类膨胀、解释器模式采用递归调用方法，将会导致调试非常复杂、效率可能降低</li></ol><h2 id="二十二、状态模式"><a href="#二十二、状态模式" class="headerlink" title="二十二、状态模式"></a>二十二、状态模式</h2><h4 id="22-1-APP抽奖活动问题"><a href="#22-1-APP抽奖活动问题" class="headerlink" title="22.1 APP抽奖活动问题"></a>22.1 APP抽奖活动问题</h4><p><img src="/posts/managermodel/image-20220225174752543.png" alt="image-20220225174752543"></p><h4 id="22-2-状态模式基本介绍"><a href="#22-2-状态模式基本介绍" class="headerlink" title="22.2 状态模式基本介绍"></a>22.2 状态模式基本介绍</h4><ol><li>状态模式：它主要用来解决对象再多种状态转换时候，需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以相互转换</li><li>当一个对象的内在状态改变时候，允许改变其行为，这个对象看起来像是改变了其类</li></ol><h4 id="22-3-状态模式的原理类图"><a href="#22-3-状态模式的原理类图" class="headerlink" title="22.3 状态模式的原理类图"></a>22.3 状态模式的原理类图</h4><p><img src="/posts/managermodel/image-20220225201737951.png" alt="image-20220225201737951"></p><ul><li>对原理类图的说明-即（状态模式的角色以及职责）</li></ul><ol><li>Context类为环境角色，用于维护State实例，这个实例定义当前状态</li><li>State是抽象状态角色，定义一个接口封装与Context的一个特点接口相关行为</li><li>ConcreteState具体的状态角色，每个子类实现一个与Context的一个状态相关行为</li></ol><h4 id="22-4-状态模式解决APP抽奖问题"><a href="#22-4-状态模式解决APP抽奖问题" class="headerlink" title="22.4 状态模式解决APP抽奖问题"></a>22.4 状态模式解决APP抽奖问题</h4><ol><li>应用实例要求</li></ol><p>完成APP抽象活动项目，使用状态模式</p><ol start="2"><li>思路分析和图解(类图)<ol><li>定义一个接口叫做状态接口，每个状态都实现它</li><li>接口有扣除积分方法、抽奖方法、发放讲评方法</li></ol></li></ol><p><img src="/posts/managermodel/image-20220225213414204.png" alt="image-20220225213414204"></p><ol start="3"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 状态抽象类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token comment">// 扣除积分 - 50</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 是否抽中奖品</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发放奖品</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span>  <span class="token keyword">void</span> <span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 不能抽奖状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoRaffleState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token comment">// 初始化时传入活动引用，扣除积分后改变其状态</span>    <span class="token class-name">RaffleActivity</span> activity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NoRaffleState</span><span class="token punctuation">(</span><span class="token class-name">RaffleActivity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 当前状态可以扣积分 , 扣除后，将状态设置成可以抽奖状态</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"扣除50积分成功，您可以抽奖了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        activity<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getCanRaffleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 当前状态不能抽奖</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"扣了积分才能抽奖喔！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 当前状态不能发奖品</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能发放奖品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token comment">/** * 可以抽奖的状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CanRaffleState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token class-name">RaffleActivity</span> activity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CanRaffleState</span><span class="token punctuation">(</span><span class="token class-name">RaffleActivity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//已经扣除了积分，不能再扣</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经扣取过了积分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//可以抽奖, 抽完奖后，根据实际情况，改成新的状态</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在抽奖，请稍等！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 10%中奖机会</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 改变活动状态为发放奖品 context</span>            activity<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getDispenseState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很遗憾没有抽中奖品！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 改变状态为不能抽奖</span>            activity<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getNoRafflleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 不能发放奖品</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没中奖，不能发放奖品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 发放奖品的状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispenseState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token comment">// 初始化时传入活动引用，发放奖品后改变其状态</span>    <span class="token class-name">RaffleActivity</span> activity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DispenseState</span><span class="token punctuation">(</span><span class="token class-name">RaffleActivity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能扣除积分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能抽奖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//发放奖品</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜中奖了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 改变状态为不能抽奖</span>            activity<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getNoRafflleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很遗憾，奖品发送完了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 改变状态为奖品发送完毕, 后面我们就不可以抽奖</span>            activity<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getDispensOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抽奖活动结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 奖品发放完毕状态 * 说明，当我们activity 改变成 DispenseOutState， 抽奖活动结束 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispenseOutState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token comment">// 初始化时传入活动引用</span>    <span class="token class-name">RaffleActivity</span> activity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DispenseOutState</span><span class="token punctuation">(</span><span class="token class-name">RaffleActivity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖品发送完了，请下次再参加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖品发送完了，请下次再参加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖品发送完了，请下次再参加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 抽奖活动 // */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RaffleActivity</span> <span class="token punctuation">{</span>    <span class="token comment">// state 表示活动当前的状态，是变化</span>    <span class="token class-name">State</span> state <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 奖品数量</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 四个属性，表示四种状态</span>    <span class="token class-name">State</span> noRafflleState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoRaffleState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">State</span> canRaffleState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanRaffleState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">State</span> dispenseState <span class="token operator">=</span>   <span class="token keyword">new</span> <span class="token class-name">DispenseState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">State</span> dispensOutState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispenseOutState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token comment">//1. 初始化当前的状态为 noRafflleState（即不能抽奖的状态）</span>    <span class="token comment">//2. 初始化奖品的数量</span>    <span class="token keyword">public</span> <span class="token class-name">RaffleActivity</span><span class="token punctuation">(</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token function">getNoRafflleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//扣分, 调用当前状态的 deductMoney</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debuctMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//抽奖</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 如果当前的状态是抽奖成功</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//领取奖品</span>            state<span class="token punctuation">.</span><span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">State</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">State</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//这里请大家注意，每领取一次奖品，count--</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> curCount <span class="token operator">=</span> count<span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> curCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">State</span> <span class="token function">getNoRafflleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> noRafflleState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNoRafflleState</span><span class="token punctuation">(</span><span class="token class-name">State</span> noRafflleState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>noRafflleState <span class="token operator">=</span> noRafflleState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">State</span> <span class="token function">getCanRaffleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> canRaffleState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCanRaffleState</span><span class="token punctuation">(</span><span class="token class-name">State</span> canRaffleState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>canRaffleState <span class="token operator">=</span> canRaffleState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">State</span> <span class="token function">getDispenseState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dispenseState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDispenseState</span><span class="token punctuation">(</span><span class="token class-name">State</span> dispenseState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dispenseState <span class="token operator">=</span> dispenseState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">State</span> <span class="token function">getDispensOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dispensOutState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDispensOutState</span><span class="token punctuation">(</span><span class="token class-name">State</span> dispensOutState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dispensOutState <span class="token operator">=</span> dispensOutState<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 状态模式测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token comment">// 创建活动对象，奖品有1个奖品</span>        <span class="token class-name">RaffleActivity</span> activity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RaffleActivity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 我们连续抽300次奖</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"次抽奖----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 参加抽奖，第一步点击扣除积分</span>            activity<span class="token punctuation">.</span><span class="token function">debuctMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 第二步抽奖</span>            activity<span class="token punctuation">.</span><span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="22-5-状态模式在实际项目-借贷平台-源码分析"><a href="#22-5-状态模式在实际项目-借贷平台-源码分析" class="headerlink" title="22.5 状态模式在实际项目-借贷平台 源码分析"></a>22.5 状态模式在实际项目-借贷平台 源码分析</h4><ol><li><p>借贷平台的订单，有审核-发布-抢单等等步骤，随着操作的不同，会改变订单的状态，项目中的这个模块实现就会使用到状态模式</p></li><li><p>通常通过if/else 判断订单的状态，从而实现不同的逻辑，伪代码如下</p></li></ol><p><img src="/posts/managermodel/image-20220225221155206.png" alt="image-20220225221155206"></p><p><img src="/posts/managermodel/image-20220225224312088.png" alt="image-20220225224312088"></p><p><img src="/posts/managermodel/image-20220225223654841.png" alt="image-20220225223654841"></p><p><img src="/posts/managermodel/image-20220225223910473.png" alt="image-20220225223910473"></p><ol start="3"><li>使用状态模式完成 借贷平台项目的审核模块</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 状态接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 电审     */</span>    <span class="token keyword">void</span> <span class="token function">checkEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 电审失败     */</span>    <span class="token keyword">void</span> <span class="token function">checkFailEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 定价发布     */</span>    <span class="token keyword">void</span> <span class="token function">makePriceEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 接单     */</span>    <span class="token keyword">void</span> <span class="token function">acceptOrderEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 无人接单失效     */</span>    <span class="token keyword">void</span> <span class="token function">notPeopleAcceptEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 付款     */</span>    <span class="token keyword">void</span> <span class="token function">payOrderEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 接单有人支付失效     */</span>    <span class="token keyword">void</span> <span class="token function">orderFailureEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 反馈     */</span>    <span class="token keyword">void</span> <span class="token function">feedBackEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">RuntimeException</span> EXCEPTION <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"操作流程不允许"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//抽象类，默认实现了 State 接口的所有方法</span>    <span class="token comment">//该类的所有方法，其子类(具体的状态类)，可以有选择的进行重写</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> EXCEPTION<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkFailEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> EXCEPTION<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makePriceEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> EXCEPTION<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acceptOrderEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> EXCEPTION<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notPeopleAcceptEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> EXCEPTION<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">payOrderEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> EXCEPTION<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderFailureEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> EXCEPTION<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feedBackEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> EXCEPTION<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//各种具体状态类</span><span class="token keyword">class</span> <span class="token class-name">FeedBackState</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">StateEnum</span><span class="token punctuation">.</span>FEED_BACKED<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">GenerateState</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReviewState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkFailEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FeedBackState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">StateEnum</span><span class="token punctuation">.</span>GENERATE<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NotPayState</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">payOrderEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaidState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feedBackEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FeedBackState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">StateEnum</span><span class="token punctuation">.</span>NOT_PAY<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PaidState</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feedBackEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FeedBackState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">StateEnum</span><span class="token punctuation">.</span>PAID<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PublishState</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acceptOrderEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//把当前状态设置为  NotPayState。。。</span>        <span class="token comment">//至于应该变成哪个状态，有流程图来决定</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NotPayState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notPeopleAcceptEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FeedBackState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">StateEnum</span><span class="token punctuation">.</span>PUBLISHED<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ReviewState</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makePriceEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PublishState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">StateEnum</span><span class="token punctuation">.</span>REVIEWED<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//环境上下文</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractState</span><span class="token punctuation">{</span>    <span class="token comment">//当前的状态 state, 根据我们的业务流程处理，不停的变化</span>    <span class="token keyword">private</span> <span class="token class-name">State</span> state<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">checkEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkFailEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">checkFailEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makePriceEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">makePriceEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acceptOrderEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">acceptOrderEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notPeopleAcceptEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">notPeopleAcceptEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">payOrderEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">payOrderEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderFailureEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">orderFailureEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feedBackEvent</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">feedBackEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">State</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">State</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前状态 : "</span> <span class="token operator">+</span> state<span class="token punctuation">.</span><span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 状态枚举类 * @author Administrator * */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">StateEnum</span> <span class="token punctuation">{</span>    <span class="token comment">//订单生成</span>    <span class="token function">GENERATE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"GENERATE"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//已审核</span>    <span class="token function">REVIEWED</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"REVIEWED"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//已发布</span>    <span class="token function">PUBLISHED</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"PUBLISHED"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//待付款</span>    <span class="token function">NOT_PAY</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"NOT_PAY"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//已付款</span>    <span class="token function">PAID</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"PAID"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//已完结</span>    <span class="token function">FEED_BACKED</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"FEED_BACKED"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>    <span class="token class-name">StateEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> key<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**测试类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token comment">//创建context 对象</span>        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将当前状态设置为 PublishState</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PublishState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        //publish --&gt; not pay</span>        context<span class="token punctuation">.</span><span class="token function">acceptOrderEvent</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        //not pay --&gt; paid</span><span class="token comment">//        context.payOrderEvent(context);</span><span class="token comment">//        // 失败, 检测失败时，会抛出异常</span><span class="token comment">//        try {</span><span class="token comment">//        context.checkFailEvent(context);</span><span class="token comment">//        System.out.println("流程正常..");</span><span class="token comment">//} catch (Exception e) {</span><span class="token comment">//// TODO: handle exception</span><span class="token comment">//System.out.println(e.getMessage());</span><span class="token comment">//}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="22-6-状态模式的注意事项和细节"><a href="#22-6-状态模式的注意事项和细节" class="headerlink" title="22.6 状态模式的注意事项和细节"></a>22.6 状态模式的注意事项和细节</h4><ol><li>代码有很强的可读性。状态模式将每个状态的行为封装到对应的一个类中</li><li>方便维护。将容易产生问题的if-else语句删除，如果把每个状态的行为都放到一个类中，每次调用方法的时候都要判断当前是什么状态，不但会产生很多if-else语句，而且容易出错</li><li>符合“开闭原则”。容易增删状态</li><li>会产生很多类。每个状态都要一个对应的类，当状态过多时候会产生很多类，加大维护难度</li><li>应用场景：当一个时间或者对象有很多状态时候，状态之间会相互转换，对不同的状态要求有不同的行为的时候，可以考虑使用状态模式。</li></ol><h2 id="二十三、策略模式"><a href="#二十三、策略模式" class="headerlink" title="二十三、策略模式"></a>二十三、策略模式</h2><h4 id="23-1-传统方案"><a href="#23-1-传统方案" class="headerlink" title="23.1 传统方案"></a>23.1 传统方案</h4><p><img src="/posts/managermodel/image-20220225230500952.png" alt="image-20220225230500952"></p><ol><li>传统方案解决鸭子问题的分析和代码实现</li></ol><p><img src="/posts/managermodel/image-20220225230541153.png" alt="image-20220225230541153"></p><p><img src="/posts/managermodel/image-20220226002840744.png" alt="image-20220226002840744"></p><ol start="2"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示鸭子信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子嘎嘎叫~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子会游泳~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子会飞翔~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PekingDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~北京鸭~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//因为北京鸭不能飞翔，因此需要重写fly</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京鸭不能飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToyDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//需要重写父类的所有方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不能叫~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不会游泳~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不会飞翔~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 这是野鸭 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Duck</span> pekingDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PekingDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pekingDuck<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pekingDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pekingDuck<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pekingDuck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Duck</span> toyDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toyDuck<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toyDuck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toyDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toyDuck<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WildDuck</span> wildDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WildDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wildDuck<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wildDuck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wildDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wildDuck<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="23-2-传统的方式实现的问题分析和解决方案"><a href="#23-2-传统的方式实现的问题分析和解决方案" class="headerlink" title="23.2 传统的方式实现的问题分析和解决方案"></a>23.2 传统的方式实现的问题分析和解决方案</h4><ol><li>其他鸭子，都继承了Duck类，所以fly让所有子类都会飞了，这是不正确的</li><li>上面说的1的问题，其实是继承带来的问题：对类的局部改动，尤其超类的局部改动，会影响其他部分。会有溢出效应</li><li>为了改进1问题，我们可以通过覆盖fly方法来解决=&gt;覆盖解决</li><li>问题又来了，如果我们有一个玩具鸭子ToyDuck，这样就需要ToyDuck去覆盖Duck的所有实现方法=&gt;解决思路=&gt;策略模式</li></ol><h4 id="23-3-策略模式基本介绍"><a href="#23-3-策略模式基本介绍" class="headerlink" title="23.3 策略模式基本介绍"></a>23.3 策略模式基本介绍</h4><ol><li>策略模式中，定义算法族（策略组），分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户</li><li>这算法体现了几个设计原则，第一、把变化的代码从不变的代码中分离出来；第二、针对接口编程而不是具体类(定义了策略接口)；第三、多用组合/聚合，少用继承(客户通过组合方式使用策略)。</li></ol><ul><li><strong>策略模式的原理类图</strong></li></ul><p><img src="/posts/managermodel/image-20220226030645722.png" alt="image-20220226030645722"></p><p>说明：从上图可以看到，客户context有成员变量strategy或者其他的策略接口，至于需要使用到哪个策略，我们可以在构造器中指定</p><h4 id="23-4-策略模式解决鸭子问题"><a href="#23-4-策略模式解决鸭子问题" class="headerlink" title="23.4 策略模式解决鸭子问题"></a>23.4 策略模式解决鸭子问题</h4><ol><li>应用实例要求</li></ol><p>​    编写程序完成前面的鸭子项目，要求使用策略模式</p><ol start="2"><li>思路分析(类图)</li></ol><p>​    策略模式：分别封装行为接口，实现算法族，超类里放行为接口对象，在子类里具体设定行为对象。原则就是：分离变化部分，封装接口，基于接口编程各种功能。此模式让行为的变化独立于算法的使用者</p><p><img src="/posts/managermodel/image-20220227162325047.png" alt="image-20220227162325047"></p><ol start="3"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FlyBehavior</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子类具体实现</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 飞翔技术高超 ~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BadFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 飞翔技术一般 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 不会飞翔  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token comment">//属性, 策略接口</span>    <span class="token class-name">FlyBehavior</span> flyBehavior<span class="token punctuation">;</span>    <span class="token comment">//其它属性&lt;-&gt;策略接口</span>    <span class="token class-name">QuackBehavior</span> quackBehavior<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示鸭子信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子嘎嘎叫~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子会游泳~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//改进</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flyBehavior <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flyBehavior<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlyBehavior</span><span class="token punctuation">(</span><span class="token class-name">FlyBehavior</span> flyBehavior<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flyBehavior <span class="token operator">=</span> flyBehavior<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setQuackBehavior</span><span class="token punctuation">(</span><span class="token class-name">QuackBehavior</span> quackBehavior<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>quackBehavior <span class="token operator">=</span> quackBehavior<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token comment">//构造器，传入FlyBehavor 的对象</span>    <span class="token keyword">public</span>  <span class="token class-name">WildDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        flyBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 这是野鸭 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PekingDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token comment">//假如北京鸭可以飞翔，但是飞翔技术一般</span>    <span class="token keyword">public</span> <span class="token class-name">PekingDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        flyBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~北京鸭~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToyDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ToyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        flyBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//需要重写父类的所有方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不能叫~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不会游泳~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuackBehavior</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子类实现</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WildDuck</span> wildDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WildDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wildDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">ToyDuck</span> toyDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toyDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PekingDuck</span> pekingDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PekingDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pekingDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//动态改变某个对象的行为, 北京鸭 不能飞</span>        pekingDuck<span class="token punctuation">.</span><span class="token function">setFlyBehavior</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京鸭的实际飞翔能力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pekingDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="23-5-策略模式在JDK-Arrays应用的源码分析"><a href="#23-5-策略模式在JDK-Arrays应用的源码分析" class="headerlink" title="23.5 策略模式在JDK-Arrays应用的源码分析"></a>23.5 策略模式在JDK-Arrays应用的源码分析</h4><p><img src="/posts/managermodel/image-20220227165131381.png" alt="image-20220227165131381"></p><p>代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token comment">//数组</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 实现降序排序，返回-1放左边，1放右边，0保持不变</span><span class="token comment">// 说明</span><span class="token comment">// 1. 实现了 Comparator 接口（策略接口） , 匿名类 对象 new Comparator&lt;Integer&gt;(){..}</span><span class="token comment">// 2. 对象 new Comparator&lt;Integer&gt;(){..} 就是实现了 策略接口 的对象</span><span class="token comment">// 3. public int compare(Integer o1, Integer o2){} 指定具体的处理方式</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o1 <span class="token operator">&gt;</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 说明</span><span class="token comment">/* * public static &lt;T&gt; void sort(T[] a, Comparator&lt;? super T&gt; c) {        if (c == null) {            sort(a); //默认方法        } else {             if (LegacyMergeSort.userRequested)                legacyMergeSort(a, c); //使用策略对象c            else            // 使用策略对象c                TimSort.sort(a, 0, a.length, c, null, 0, 0);        }    } */</span><span class="token comment">//方式1 </span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 降序排序</span><span class="token comment">//方式2- 同时lambda 表达式实现 策略模式</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">13</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>data2<span class="token punctuation">,</span> <span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data2="</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="23-6-策略模式的注意事项和细节"><a href="#23-6-策略模式的注意事项和细节" class="headerlink" title="23.6 策略模式的注意事项和细节"></a>23.6 策略模式的注意事项和细节</h4><ol><li>策略模式的关键是：分析项目中变化部分与不变部分</li><li>策略模式的核心思想是：多用组合/聚合 少用继承：用行为类组合，而不是行为的继承。更有弹性</li><li>体现了“对修改关闭，对扩展开放”原则，客户端增加行为不用修改原有代码，只要添加一种策略（或者行为）即可，避免了使用多重转移语句(if..else if..else)</li><li>提供了可以替换继承关系的方法：策略模式将算法封装在独立的Strategy类中使得你可以独立于其Context改变它，使它易于切换、易于理解、易于扩展</li><li>需要注意的是：每添加一个策略就要增加一个类，当策略过多是会导致类数目庞大</li></ol><h2 id="二十四、职责链模式"><a href="#二十四、职责链模式" class="headerlink" title="二十四、职责链模式"></a>二十四、职责链模式</h2><h4 id="24-1-传统方案"><a href="#24-1-传统方案" class="headerlink" title="24.1 传统方案"></a>24.1 传统方案</h4><p><img src="/posts/managermodel/image-20220227165823937.png" alt="image-20220227165823937"></p><ol><li>传统方案类图</li></ol><p><img src="/posts/managermodel/image-20220227165855768.png" alt="image-20220227165855768"></p><ol start="2"><li><p>传统方案解决OA系统审批解决问题分析</p></li><li><p>传统方式是：接收到一个采购请求后，根据采购金额来调用对应的Approver(审批人)完成审批。</p></li><li><p>传统方式的问题分析：客户端这里会使用到分支判断(比如switch)来对不同的采购请求处理，这样就存在如下问题(1)如果各个级别的人员审批金额发生变化，在客户端的也需要变化(2)客户端必须明确的知道 有多少个审批级别和访问</p></li><li><p>这样 对一个采购请求进行处理和Approver(审批人)就存在强耦合关系，不利于代码的扩展和维护</p></li><li><p>解决方案=&gt; 职责链模式</p></li></ol><h4 id="24-2-职责链模式基本极少"><a href="#24-2-职责链模式基本极少" class="headerlink" title="24.2 职责链模式基本极少"></a>24.2 职责链模式基本极少</h4><ol><li>职责链模式，又叫做责任链模式，为请求创建了一个接收者对象的链。这种模式对请求的发送者和接收者进行解耦</li><li>职责链模式通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，以此类推</li><li>这种类型的设计模式属于行为型模式</li></ol><h4 id="24-3-职责链模式的原理类图"><a href="#24-3-职责链模式的原理类图" class="headerlink" title="24.3 职责链模式的原理类图"></a>24.3 职责链模式的原理类图</h4><p><img src="/posts/managermodel/image-20220227182144701.png" alt="image-20220227182144701"></p><ul><li>对原理类图的说明(职责链模式的角色以及职责)</li></ul><ol><li>Handler：抽象的处理者，定义了一个处理请求的接口，同时含义另外Handler</li><li>ConcreteHandlerA，B是具体的处理者，处理它自己负责的请求，可以访问它的后继者(即下一个处理者)，如果可以处理当前请求，则处理，否则将该请求交个后继者去处理，从而形成一个职责链</li><li>Request，含义很多属性，表示一哥请求</li></ol><h4 id="24-4-职责链模式解决OA系统采购审批"><a href="#24-4-职责链模式解决OA系统采购审批" class="headerlink" title="24.4 职责链模式解决OA系统采购审批"></a>24.4 职责链模式解决OA系统采购审批</h4><ol><li>应用实例要求</li></ol><p><img src="/posts/managermodel/image-20220227182448713.png" alt="image-20220227182448713"></p><ol start="2"><li>思路分析和图解(类图)</li></ol><p><img src="/posts/managermodel/image-20220227182511477.png" alt="image-20220227182511477"></p><ol start="3"><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//请求类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PurchaseRequest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//请求类型</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span> <span class="token comment">//请求金额</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">PurchaseRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">float</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token class-name">Approver</span> approver<span class="token punctuation">;</span>  <span class="token comment">//下一个处理者</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">// 名字</span>    <span class="token keyword">public</span> <span class="token class-name">Approver</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//下一个处理者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApprover</span><span class="token punctuation">(</span><span class="token class-name">Approver</span> approver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>approver <span class="token operator">=</span> approver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//处理审批请求的方法，得到一个请求, 处理是子类完成，因此该方法做成抽象</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRequest</span> purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepartmentApprover</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">DepartmentApprover</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRequest</span> purchaseRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 请求编号 id= "</span> <span class="token operator">+</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 被 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            approver<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollegeApprover</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CollegeApprover</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRequest</span> purchaseRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5000</span> <span class="token operator">&amp;&amp;</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 请求编号 id= "</span> <span class="token operator">+</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 被 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            approver<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViceSchoolMasterApprover</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ViceSchoolMasterApprover</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRequest</span> purchaseRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10000</span> <span class="token operator">&amp;&amp;</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">30000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 请求编号 id= "</span> <span class="token operator">+</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 被 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            approver<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolMasterApprover</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">SchoolMasterApprover</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated constructor stub</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRequest</span> purchaseRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">30000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 请求编号 id= "</span> <span class="token operator">+</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 被 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            approver<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token comment">//创建一个请求</span>        <span class="token class-name">PurchaseRequest</span> purchaseRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建相关的审批人</span>        <span class="token class-name">DepartmentApprover</span> departmentApprover <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DepartmentApprover</span><span class="token punctuation">(</span><span class="token string">"张主任"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CollegeApprover</span> collegeApprover <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollegeApprover</span><span class="token punctuation">(</span><span class="token string">"李院长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ViceSchoolMasterApprover</span> viceSchoolMasterApprover <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViceSchoolMasterApprover</span><span class="token punctuation">(</span><span class="token string">"王副校"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SchoolMasterApprover</span> schoolMasterApprover <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchoolMasterApprover</span><span class="token punctuation">(</span><span class="token string">"佟校长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需要将各个审批级别的下一个设置好 (处理人构成环形: )</span>        departmentApprover<span class="token punctuation">.</span><span class="token function">setApprover</span><span class="token punctuation">(</span>collegeApprover<span class="token punctuation">)</span><span class="token punctuation">;</span>        collegeApprover<span class="token punctuation">.</span><span class="token function">setApprover</span><span class="token punctuation">(</span>viceSchoolMasterApprover<span class="token punctuation">)</span><span class="token punctuation">;</span>        viceSchoolMasterApprover<span class="token punctuation">.</span><span class="token function">setApprover</span><span class="token punctuation">(</span>schoolMasterApprover<span class="token punctuation">)</span><span class="token punctuation">;</span>        schoolMasterApprover<span class="token punctuation">.</span><span class="token function">setApprover</span><span class="token punctuation">(</span>departmentApprover<span class="token punctuation">)</span><span class="token punctuation">;</span>        departmentApprover<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        viceSchoolMasterApprover<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="24-5-职责链模式在SpringMVC框架应用的源码分析"><a href="#24-5-职责链模式在SpringMVC框架应用的源码分析" class="headerlink" title="24.5 职责链模式在SpringMVC框架应用的源码分析"></a>24.5 职责链模式在SpringMVC框架应用的源码分析</h4><p><img src="/posts/managermodel/image-20220227182613564.png" alt="image-20220227182613564"></p><p><img src="/posts/managermodel/image-20220227211135659.png" alt="image-20220227211135659"></p><ul><li>源码和说明</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerExecutionChain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponsibilityChain</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token comment">// DispatcherServlet </span><span class="token comment">//说明</span><span class="token comment">/* *  *  protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception { *   HandlerExecutionChain mappedHandler = null;  *   mappedHandler = getHandler(processedRequest);//获取到HandlerExecutionChain对象 *    //在 mappedHandler.applyPreHandle 内部 得到啦 HandlerInterceptor interceptor *    //调用了拦截器的  interceptor.preHandle *   if (!mappedHandler.applyPreHandle(processedRequest, response)) {return;}  //说明：mappedHandler.applyPostHandle 方法内部获取到拦截器，并调用   //拦截器的  interceptor.postHandle(request, response, this.handler, mv); mappedHandler.applyPostHandle(processedRequest, response, mv); *  } *   *   *  //说明：在  mappedHandler.applyPreHandle内部中， *  还调用了  triggerAfterCompletion 方法，该方法中调用了   *  HandlerInterceptor interceptor = getInterceptors()[i];try {interceptor.afterCompletion(request, response, this.handler, ex);}catch (Throwable ex2) {logger.error("HandlerInterceptor.afterCompletion threw exception", ex2);} */</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对源码总结</li></ul><ol><li>springmvc 请求的流程图中，执行了拦截器相关方法iterceptor.preHanlder等等</li><li>在处理SpringMvc请求时，使用到职责链模式还使用到适配器模式</li><li>HandlerExecutionChain主要负责的是请求拦截器的执行和请求处理，但是他本身不处理请求，只是将请求分配给链上注册处理器执行，这是职责链实现方式，减少职责链本身与处理逻辑之间的耦合，规范了处理流程</li><li>HandlerExecutionChain维护了HandlerInterceptor的集合，可以向其中注册相应的拦截器</li></ol><h4 id="24-6-职责链模式的注意事项和细节"><a href="#24-6-职责链模式的注意事项和细节" class="headerlink" title="24.6 职责链模式的注意事项和细节"></a>24.6 职责链模式的注意事项和细节</h4><ol><li>将请求和处理分开，实现解耦，提高系统的灵活性</li><li>简化了对象，使对象不需要知道链的结构</li><li>性能会受到影响，特别是在链比较长的时候，因此需控制链中最大节点数量，一般通过在Handler中设置一个最大节点数量，在setNext()方法中判断是否已经超过阈值，超过则不允许该链建立，避免出现超长链无意识地破坏系统性能。</li><li>调试不方便。采用了类似递归的方式，调试时逻辑可能比较复杂</li><li>最佳应用场景：有多个对象可以处理同一个请求时，比如：多级请求、请假/加薪等审批流程、Java Web中Tomcat对Encoding的处理、拦截器</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shopFM</title>
      <link href="/posts/shopfm/"/>
      <url>/posts/shopfm/</url>
      
        <content type="html"><![CDATA[<h2 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h2><h4 id="1-1-项目功能"><a href="#1-1-项目功能" class="headerlink" title="1.1 项目功能"></a>1.1 项目功能</h4><p><a href="https://www.processon.com/view/link/606bde8b1e08534321fd2103">https://www.processon.com/view/link/606bde8b1e08534321fd2103</a></p><h4 id="1-2-单体项目"><a href="#1-2-单体项目" class="headerlink" title="1.2 单体项目"></a>1.2 单体项目</h4><blockquote><p>项目的页面和代码都在同一个项目，项目开发完成之后直接部署在一台服务器</p></blockquote><p><img src="/posts/shopfm/1618025221720.png" alt="1618025221720"></p><p>单体项目遇到的问题：用户对页面静态资源以及对Java代码的访问压力都会落在Tomcat服务器上。</p><h5 id="1-2-1-技术清单"><a href="#1-2-1-技术清单" class="headerlink" title="1.2.1 技术清单"></a>1.2.1 技术清单</h5><ul><li>项目架构：前后端分离</li><li>前端技术：vue、axios、妹子UI、layui、bootstrap</li><li>后端技术：SpringBoot+MyBatis、RESTful、swagger</li><li>服务器搭建：Linux、Nginx</li></ul><h2 id="二、项目架构的演进"><a href="#二、项目架构的演进" class="headerlink" title="二、项目架构的演进"></a>二、项目架构的演进</h2><h4 id="2-1-单体架构"><a href="#2-1-单体架构" class="headerlink" title="2.1 单体架构"></a>2.1 单体架构</h4><ul><li>前后端都部署在同一台服务器上（前后端代码都在同一个应用中）</li><li>缺点：对静态资源的访问压力也会落在Tomcat上</li></ul><h4 id="2-2-前后端分离"><a href="#2-2-前后端分离" class="headerlink" title="2.2 前后端分离"></a>2.2 前后端分离</h4><p><img src="/posts/shopfm/1618036199285.png" alt="1618036199285"></p><ul><li>前后端分离：前端和后端分离开发和部署（前后端部署在不同的服务器）</li><li>优点：将对静态资源的访问和对接口的访问进行分离，Tomcat服务器只负责数据服务的访问</li></ul><h4 id="2-3-集群与负载均衡"><a href="#2-3-集群与负载均衡" class="headerlink" title="2.3 集群与负载均衡"></a>2.3 集群与负载均衡</h4><p><img src="/posts/shopfm/1618037366380.png" alt="1618037366380"></p><ul><li>优点：提供并发能力、可用性</li></ul><h4 id="2-4-分布式"><a href="#2-4-分布式" class="headerlink" title="2.4 分布式"></a>2.4 分布式</h4><p><img src="/posts/shopfm/1618038441781.png" alt="1618038441781"></p><ul><li>基于redis实现 分布式锁</li><li>分布式数据库mycat</li><li>redis集群</li><li>数据库中间件</li><li>消息中间件</li></ul><h4 id="2-5-微服务架构"><a href="#2-5-微服务架构" class="headerlink" title="2.5 微服务架构"></a>2.5 微服务架构</h4><ul><li>微服务架构：将原来在一个应用中开发的多个模块进行拆分，单独开发和部署</li><li>保证可用性、性能</li></ul><h2 id="三、项目搭建"><a href="#三、项目搭建" class="headerlink" title="三、项目搭建"></a>三、项目搭建</h2><blockquote><p>基于Maven的聚合工程完成项目搭建，前端采用vue+axios，后端使用SpringBoot整合SSM</p></blockquote><h4 id="3-1-技术储备"><a href="#3-1-技术储备" class="headerlink" title="3.1 技术储备"></a>3.1 技术储备</h4><ul><li>（√）SpringBoot： 实现无配置的SSM整合</li><li>（√）Maven聚合工程：实现模块的复用</li></ul><h4 id="3-2-创建Maven聚合工程"><a href="#3-2-创建Maven聚合工程" class="headerlink" title="3.2 创建Maven聚合工程"></a>3.2 创建Maven聚合工程</h4><p><img src="/posts/shopfm/1618363925912.png" alt="1618363925912"></p><h6 id="3-2-1-构建父工程fmmall"><a href="#3-2-1-构建父工程fmmall" class="headerlink" title="3.2.1 构建父工程fmmall"></a>3.2.1 构建父工程fmmall</h6><ul><li><p>创建一个maven工程、packing设置为 pom</p></li><li><p>父工程继承继承<code>spring-boot-starter-parent</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- spring-boot-starter-parent --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.qfedu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fmmall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="3-2-2-创建common工程"><a href="#3-2-2-创建common工程" class="headerlink" title="3.2.2 创建common工程"></a>3.2.2 创建common工程</h6><ul><li><p>选择fmmall，右键—New—Module （Maven工程）</p></li><li><p>修改common的pom.xml，设置packing=jar</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fmmall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.qfedu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="3-2-3-创建beans工程"><a href="#3-2-3-创建beans工程" class="headerlink" title="3.2.3 创建beans工程"></a>3.2.3 创建beans工程</h6><ul><li>选择fmmall，右键—New—Module （Maven工程）</li><li>修改beans的pom.xml，设置packing —– jar</li></ul><h6 id="3-2-4-创建mapper工程"><a href="#3-2-4-创建mapper工程" class="headerlink" title="3.2.4 创建mapper工程"></a>3.2.4 创建mapper工程</h6><ul><li><p>选择fmmall，右键—New—Module （Maven工程）</p></li><li><p>修改mapper的pom.xml，设置packing —– jar</p></li><li><p>在mapper的pom.xml，依赖beans</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.qfedu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="3-2-5-创建service工程"><a href="#3-2-5-创建service工程" class="headerlink" title="3.2.5 创建service工程"></a>3.2.5 创建service工程</h6><ul><li><p>选择fmmall，右键—New—Module （Maven工程）</p></li><li><p>修改service的pom.xml，设置packing —– jar</p></li><li><p>在service的pom.xml，依赖mapper、commom</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.qfedu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.qfedu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="3-2-6-创建api工程"><a href="#3-2-6-创建api工程" class="headerlink" title="3.2.6 创建api工程"></a>3.2.6 创建api工程</h6><ul><li><p>选择fmmall，右键—New—Module （SpringBoot工程）</p></li><li><p>修改api的pom.xml，继承fmmall，删除自己的groupId 和 version</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.qfedu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fmmall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将spring boot的依赖配置到父工程fmmall的pom.xml</p></li><li><p>在父工程fmmall的pom.xml的modules添加api</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--fmmall  pom.xml--&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.qfedu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fmmall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>mapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在api中，依赖service</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.qfedu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>api的pom.xml继承fmmall</p></li></ul><h4 id="3-3-Maven聚合工程依赖分析"><a href="#3-3-Maven聚合工程依赖分析" class="headerlink" title="3.3 Maven聚合工程依赖分析"></a>3.3 Maven聚合工程依赖分析</h4><blockquote><p>如果将依赖添加到父工程的pom中，根据依赖的继承关系，所有的子工程中都会继承父工程的依赖：</p><ul><li><p>好处：当有多个子工程都需要相同的依赖时，无需在子工程中重复添加依赖</p></li><li><p>缺点：如果某些子工程不需要这个依赖，还是会被强行继承</p></li></ul><p>如果在父工程中没有添加统一依赖，则每个子工程所需的依赖需要在子工程的pom中自行添加</p><p>如果存在多个子工程需要添加相同的依赖，则需在父工程pom进行依赖版本的管理</p></blockquote><p><img src="/posts/shopfm/1618365559362.png" alt="1618365559362"></p><p><strong><code>依赖配置说明</code></strong></p><ol><li>在父工程的pom文件中一次性添加各个子工程所需的所有依赖</li><li>在各个子工程中单独添加当前子工程的依赖</li></ol><h4 id="3-4-整合MyBatis"><a href="#3-4-整合MyBatis" class="headerlink" title="3.4 整合MyBatis"></a>3.4 整合MyBatis</h4><h6 id="3-4-1-common子工程"><a href="#3-4-1-common子工程" class="headerlink" title="3.4.1 common子工程"></a>3.4.1 common子工程</h6><ul><li>lombok</li></ul><h6 id="3-4-2-beans子工程"><a href="#3-4-2-beans子工程" class="headerlink" title="3.4.2 beans子工程"></a>3.4.2 beans子工程</h6><ul><li>lombok</li></ul><h6 id="3-4-3-MyBatis整合"><a href="#3-4-3-MyBatis整合" class="headerlink" title="3.4.3 MyBatis整合"></a>3.4.3 MyBatis整合</h6><ul><li><p>在<strong>mapper子工程</strong>的pom文件，新增mybatis所需的依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">  <span class="token comment">&lt;!--mysql--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--spring-boot-starter--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--mybatis starter--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<strong>mapper子工程</strong>的<code>resources</code>目录创建<code>application.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_2010_mybatis<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin123<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mappers/<span class="token important">*Mapper.xml</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.qfedu.fmmall.entity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<strong>api子工程</strong>的启动类通过<code>@MpperScan</code>声明dao包的路径</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.qfedu.fmmall.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApiApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-5-基于SpringBoot的单元测试"><a href="#3-5-基于SpringBoot的单元测试" class="headerlink" title="3.5 基于SpringBoot的单元测试"></a>3.5 基于SpringBoot的单元测试</h4><h6 id="3-5-1-添加依赖"><a href="#3-5-1-添加依赖" class="headerlink" title="3.5.1 添加依赖"></a>3.5.1 添加依赖</h6><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--test starter--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-5-2-测试类"><a href="#3-5-2-测试类" class="headerlink" title="3.5.2 测试类"></a>3.5.2 测试类</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ApiApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDAOTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserDAO</span> userDAO<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUserByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span><span class="token string">"Lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-整合Druid"><a href="#3-6-整合Druid" class="headerlink" title="3.6 整合Druid"></a>3.6 整合Druid</h4><h6 id="3-6-1-添加依赖"><a href="#3-6-1-添加依赖" class="headerlink" title="3.6.1 添加依赖"></a>3.6.1 添加依赖</h6><ul><li><p>在<strong>mapper子工程</strong>添加druid-starter</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--druid starter--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="3-6-2-修改数据源配置"><a href="#3-6-2-修改数据源配置" class="headerlink" title="3.6.2 修改数据源配置"></a>3.6.2 修改数据源配置</h6><ul><li><p>修改<strong>mapper子工程</strong>application.yml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_2010_mybatis<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span><span class="token number">8</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> admin123<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mappers/<span class="token important">*Mapper.xml</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.qfedu.fmmall.entity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、数据库设计"><a href="#四、数据库设计" class="headerlink" title="四、数据库设计"></a>四、数据库设计</h2></li></ul><h4 id="4-1-软件开发步骤"><a href="#4-1-软件开发步骤" class="headerlink" title="4.1 软件开发步骤"></a>4.1 软件开发步骤</h4><ul><li><p>问题定义/提出问题 </p></li><li><p>可行性分析（技术、成本、法律法规）</p></li><li><p>需求分析（需求采集、需求分析）—-&gt;甲方</p></li><li><p>概要设计</p><ul><li>架构设计（技术选型、架构模式、项目搭建）</li><li>数据库设计</li><li>UI设计</li><li>业务流程设计</li></ul></li><li><p>详细设计</p><ul><li>实现步骤（业务流程的实现细节）</li></ul></li><li><p>编码</p><ul><li>根据设计好的实现步骤进行代码实现</li><li>开发过程中开发者要进行单元测试</li></ul></li><li><p>测试</p><ul><li>集成测试</li><li>功能测试（黑盒）</li><li>性能测试（白盒）</li></ul></li><li><p>交付/部署实施</p></li></ul><h4 id="4-2-数据库设计流程"><a href="#4-2-数据库设计流程" class="headerlink" title="4.2 数据库设计流程"></a>4.2 数据库设计流程</h4><ul><li>根据项目功能分析数据实体（数据实体，就是应用系统中要存储的数据对象）<ul><li>商品、订单、购物车、用户、评价、地址…</li></ul></li><li>提取数据实体的数据项（数据对象的属性）<ul><li>商品(商品id、商品名称、商品描述，特征）</li><li>地址(姓名、地址、电话…)</li></ul></li><li>使用数据库设计三范式检查数据项是否合理</li><li>分析实体关系：E-R图</li><li>数据库建模（三线图）、建模工具</li><li>建库建表-SQL</li></ul><h4 id="4-3-数据库设计分析"><a href="#4-3-数据库设计分析" class="headerlink" title="4.3 数据库设计分析"></a>4.3 数据库设计分析</h4><h6 id="4-3-1-PDMan建模工具使用"><a href="#4-3-1-PDMan建模工具使用" class="headerlink" title="4.3.1 PDMan建模工具使用"></a>4.3.1 PDMan建模工具使用</h6><ul><li><p>可视化创建数据表（数据表）</p></li><li><p>视图显示数据表之间的关系（关系图）</p></li><li><p>导出SQL指令（模型–导出DDL脚本）</p></li><li><p>记录数据设计的版本-数据库模型版本的管理（模型版本）</p></li><li><p>同步数据模型到数据库（开始-数据库连接）</p><p><img src="/posts/shopfm/1618382547448.png" alt="1618382547448"></p></li></ul><h6 id="4-3-2-分析《锋迷商城》的数据库模型"><a href="#4-3-2-分析《锋迷商城》的数据库模型" class="headerlink" title="4.3.2 分析《锋迷商城》的数据库模型"></a>4.3.2 分析《锋迷商城》的数据库模型</h6><ul><li><p>用户</p></li><li><p>首页</p></li><li><p>商品</p></li><li><p>购物车</p></li><li><p>订单 和 订单项</p></li><li><p>评论</p></li></ul><h4 id="4-4-SPU-和-SKU"><a href="#4-4-SPU-和-SKU" class="headerlink" title="4.4 SPU 和 SKU"></a>4.4 SPU 和 SKU</h4><h6 id="4-4-1-SPU"><a href="#4-4-1-SPU" class="headerlink" title="4.4.1 SPU"></a>4.4.1 SPU</h6><blockquote><p>SPU(Standard Product Unit)：标准化产品单元。是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。通俗点讲，属性值、特性相同的商品就可以称为一个SPU。</p></blockquote><p>1    荣耀8   </p><p>2    小米10</p><h6 id="4-4-2-SKU"><a href="#4-4-2-SKU" class="headerlink" title="4.4.2 SKU"></a>4.4.2 SKU</h6><blockquote><p><a href="https://baike.baidu.com/item/SKU/5016808">SKU</a>（中文译为<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E5%AD%98%E8%B4%A7%E5%8D%95%E4%BD%8D/892217">最小存货单位</a>，英文全称为Stock Keeping Unit,简称SKU，定义为保存库存控制的最小可用单位)</p></blockquote><p>101      8G / 128G    10     1800     1</p><p>102      4G / 128G    20     1500     1</p><p>103      8G / 128G    12     2999     2</p><p>104      12G / 256G   11     3999     2</p><h4 id="4-5-建库建表"><a href="#4-5-建库建表" class="headerlink" title="4.5 建库建表"></a>4.5 建库建表</h4><h6 id="4-5-1-创建数据表"><a href="#4-5-1-创建数据表" class="headerlink" title="4.5.1 创建数据表"></a>4.5.1 创建数据表</h6><ul><li>从PDMan导出sql，导入到mysql</li></ul><h6 id="4-5-2-准备测试数据"><a href="#4-5-2-准备测试数据" class="headerlink" title="4.5.2 准备测试数据"></a>4.5.2 准备测试数据</h6><ul><li><p>首页轮播图 index_img</p><p><img src="/posts/shopfm/1618392216009.png" alt="1618392216009"></p></li><li><p>首页类别信息  category</p><p><img src="/posts/shopfm/1618392552921.png" alt="1618392552921"></p></li><li><p>商品信息</p></li><li><p>sku</p></li></ul><h2 id="五、业务流程设计-接口规范"><a href="#五、业务流程设计-接口规范" class="headerlink" title="五、业务流程设计-接口规范"></a>五、业务流程设计-接口规范</h2><blockquote><p>在企业项目开发中，当完成项目的需求分析、功能分析、数据库分析与设计之后，项目组就会按照项目中的功能进行开发任务的分配</p></blockquote><p><img src="/posts/shopfm/1618450184396.png" alt="1618450184396"></p><h4 id="5-1-前后端分离与单体架构流程实现的区别"><a href="#5-1-前后端分离与单体架构流程实现的区别" class="headerlink" title="5.1 前后端分离与单体架构流程实现的区别"></a>5.1 前后端分离与单体架构流程实现的区别</h4><blockquote><p>单体架构：页面和控制之间可以进行跳转，同步请求控制器，流程控制由的控制来完成</p><p>前后端分离架构：前端和后端分离开发和部署，前端只能通过异步向后端发送请求，后端只负责接收请求及参数、处理请求、返回处理结果，但是后端并不负责流程控制，流程控制是由前端完成</p></blockquote><h6 id="5-1-1-单体架构"><a href="#5-1-1-单体架构" class="headerlink" title="5.1.1 单体架构"></a>5.1.1 单体架构</h6><p><img src="/posts/shopfm/1618451138871.png" alt="1618451138871"></p><h6 id="5-1-2-前后端分离架构"><a href="#5-1-2-前后端分离架构" class="headerlink" title="5.1.2 前后端分离架构"></a>5.1.2 前后端分离架构</h6><p><img src="/posts/shopfm/1618451153971.png" alt="1618451153971"></p><h4 id="5-2-接口介绍"><a href="#5-2-接口介绍" class="headerlink" title="5.2 接口介绍"></a>5.2 接口介绍</h4><h6 id="5-2-1-接口概念"><a href="#5-2-1-接口概念" class="headerlink" title="5.2.1 接口概念"></a>5.2.1 接口概念</h6><blockquote><p>狭义的理解：就是控制器中可以接受用户请求的某个方法</p><p>应用程序编程接口，简称API（Application Programming Interface），就是<a href="">软件</a>系统不同<a href="">组成</a>部分衔接的约定</p></blockquote><h6 id="5-2-2-接口规范"><a href="#5-2-2-接口规范" class="headerlink" title="5.2.2 接口规范"></a>5.2.2 接口规范</h6><blockquote><p>作为一个后端开发者，我们不仅要完成接口程序的开发，还要编写接口的说明文档——接口规范</p></blockquote><p><strong>接口规范示例</strong>：</p><p>参考：<a href="%E3%80%8A%E9%94%8B%E8%BF%B7%E5%95%86%E5%9F%8E%E3%80%8B%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E.docx">《锋迷商城》后端接口说明</a></p><h4 id="5-3-Swagger"><a href="#5-3-Swagger" class="headerlink" title="5.3 Swagger"></a>5.3 Swagger</h4><blockquote><p>前后端分离开发，后端需要编写接口说明文档，会耗费比较多的时间</p><p>swagger是一个用于生成服务器接口的规范性文档、并且能够对接口进行测试的工具</p></blockquote><h6 id="5-3-1-作用"><a href="#5-3-1-作用" class="headerlink" title="5.3.1 作用"></a>5.3.1 作用</h6><ul><li>生成接口说明文档</li><li>对接口进行测试</li></ul><h6 id="5-3-2-Swagger整合"><a href="#5-3-2-Swagger整合" class="headerlink" title="5.3.2  Swagger整合"></a>5.3.2  Swagger整合</h6><ul><li><p>在<strong>api子工程</strong>添加依赖（Swagger2 \ Swagger UI）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<strong>api子工程</strong>创建swagger的配置（Java配置方式）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment">/*swagger会帮助我们生成接口文档    * 1：配置生成的文档信息    * 2: 配置生成规则*/</span>    <span class="token comment">/*Docket封装接口文档信息*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">getDocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//创建封面信息对象</span>        <span class="token class-name">ApiInfoBuilder</span> apiInfoBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        apiInfoBuilder<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"《锋迷商城》后端接口说明"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"此文档详细说明了锋迷商城项目后端接口规范...."</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"v 2.0.1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"亮哥"</span><span class="token punctuation">,</span><span class="token string">"www.liangge.com"</span><span class="token punctuation">,</span><span class="token string">"liangge@wang.com"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ApiInfo</span> apiInfo <span class="token operator">=</span>  apiInfoBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Docket</span> docket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span>apiInfo<span class="token punctuation">)</span> <span class="token comment">//指定生成的文档中的封面信息：文档标题、版本、作者</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.qfedu.fmmall.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> docket<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试：</p><ul><li>启动SpringBoot应用，访问：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></li></ul></li></ul><h6 id="5-3-3-Swagger注解说明"><a href="#5-3-3-Swagger注解说明" class="headerlink" title="5.3.3 Swagger注解说明"></a>5.3.3 Swagger注解说明</h6><blockquote><p>swagger提供了一套注解，可以对每个接口进行详细说明</p></blockquote><p><code>@Api</code> 类注解，在控制器类添加此注解，可以对控制器类进行功能说明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"提供商品添加、修改、删除及查询的相关接口"</span><span class="token punctuation">,</span>tags <span class="token operator">=</span> <span class="token string">"商品管理"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>@ApiOperation</code>方法注解：说明接口方法的作用</p><p><code>@ApiImplicitParams</code>和<code>@ApiImplicitParam</code> 方法注解，说名接口方法的参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"用户登录接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户登录账号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户登录密码"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"111111"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"111111"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@ApiModel</code>和<code>@ApiModelProperty</code> 当接口参数和返回值为对象类型时，在实体类中添加注解说明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"User对象"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"用户/买家信息"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户注册账号"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户注册密码"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userPwd<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户真实姓名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userRealname<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户头像url"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userImg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@ApiIgnore</code>接口方法注解，添加此注解的方法将不会生成到接口文档中</p><h6 id="5-3-4-Swagger-ui-插件"><a href="#5-3-4-Swagger-ui-插件" class="headerlink" title="5.3.4 Swagger-ui 插件"></a>5.3.4 Swagger-ui 插件</h6><ul><li><p>导入插件的依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>swagger-bootstrap-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文档访问</p><p><a href="http://ip:port/doc.html">http://ip:port/doc.html</a></p></li></ul><h4 id="5-4-RESTful"><a href="#5-4-RESTful" class="headerlink" title="5.4 RESTful"></a>5.4 RESTful</h4><blockquote><p>前后端分离开发的项目中，前后端之间是接口进行请求和响应，后端向前端提供请求时就要对外暴露一个URL；URL的设计不能是随意的，需要遵从一定的设计规范——RESTful</p></blockquote><p>RESTful 是一种Web api的标准，也就是一种url设计风格/规范</p><ul><li><p><code>每个URL请求路径代表服务器上的唯一资源</code></p><pre class="line-numbers language-none"><code class="language-none">传统的URL设计：http://localhost:8080/goods/delete?goodsId=1    商品1    http://localhost:8080/goods/delete?goodsId=2    商品2RESTful设计：http://localhost:8080/goods/delete/1    商品1http://localhost:8080/goods/delete/2    商品2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/{gid}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">deleteGoods</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"gid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> goodsId<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----"</span><span class="token operator">+</span>goodsId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">"delete success"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>使用不同的请求方式表示不同的操作</code></p><blockquote><p>SpringMVC对RESTful风格提供了很好的支持，在我们定义一个接口的URL时，可以通过<code>@RequestMapping(value="/{id}",method=RequestMethod.GET)</code>形式指定请求方式，也可使用特定请求方式的注解设定URL</p><p><code>@PostMapping("/add")</code></p><p><code>@DeleteMapping("/{id}")</code></p><p><code>@PutMapping("/{id}")</code></p><p><code>@GetMapping("/{id}")</code></p></blockquote><ul><li>post   添加</li><li>get     查询</li><li>put     修改</li><li>delete 删除</li><li>option  (预检)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">根据ID删除一个商品：<span class="token comment">//http://localhost:8080/goods/1   [delete]</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">deleteGoods</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> goodsId<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----"</span><span class="token operator">+</span>goodsId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">"delete success"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>根据ID查询一个商品：<span class="token comment">//http://localhost:8080/goods/1    [get]</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> goodsId<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>接口响应的资源的表现形式采用JSON（或者XML）</code></p></li><li><p>在控制类或者每个接口方法添加<code>@ResponseBody</code>注解将返回的对象格式为json</p></li><li><p>或者直接在控制器类使用<code>@RestController</code>注解声明控制器</p></li><li><p><code>前端(Android\ios\pc)通过无状态的HTTP协议与后端接口进行交互</code></p><h2 id="六、设计及实现—用户管理"><a href="#六、设计及实现—用户管理" class="headerlink" title="六、设计及实现—用户管理"></a>六、设计及实现—用户管理</h2></li></ul><h4 id="6-1-实现流程"><a href="#6-1-实现流程" class="headerlink" title="6.1 实现流程"></a>6.1 实现流程</h4><p>  <img src="/posts/shopfm/1618471168742.png" alt="1618471168742"></p><h4 id="6-2-后端接口开发"><a href="#6-2-后端接口开发" class="headerlink" title="6.2 后端接口开发"></a>6.2 后端接口开发</h4><h6 id="6-2-1-完成DAO操作"><a href="#6-2-1-完成DAO操作" class="headerlink" title="6.2.1 完成DAO操作"></a>6.2.1 完成DAO操作</h6><ol><li><p>创建实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"User对象"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"用户/买家信息"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> realname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userImg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userMobile<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userEmail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userSex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> userBirth<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> userRegtime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> userModtime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建DAO接口、定义操作方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDAO</span> <span class="token punctuation">{</span>    <span class="token comment">//用户注册</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据用户名查询用户信息</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建DAO接口的mapper文件并完成配置</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.dao.UserDAO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into users(username,password,user_regtime,user_modtime)        values(#{username},#{password},#{userRegtime},#{userModtime})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realname<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_img<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userImg<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_mobile<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMobile<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userEmail<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userSex<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_birth<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userBirth<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_regtime<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userRegtime<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_modtime<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userModtime<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryUserByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select            user_id,            username,            password,            nickname,            realname,            user_img,            user_mobile,            user_email,            user_sex,            user_birth,            user_regtime,            user_modtime        from users        where username=#{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="6-2-2-完成Service业务"><a href="#6-2-2-完成Service业务" class="headerlink" title="6.2.2 完成Service业务"></a>6.2.2 完成Service业务</h6><ol><li><p>创建service接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment">//用户注册</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">userResgit</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用户登录</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建service接口实现类，完成业务实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDAO</span> userDAO<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">userResgit</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//1.根据用户查询，这个用户是否已经被注册</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.如果没有被注册则进行保存操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> md5Pwd <span class="token operator">=</span> <span class="token class-name">MD5Utils</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>md5Pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUserRegtime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUserModtime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">"注册成功！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span> <span class="token string">"注册失败！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token string">"用户名已经被注册！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">"登录失败，用户名不存在！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> md5Pwd <span class="token operator">=</span> <span class="token class-name">MD5Utils</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>md5Pwd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">"登录成功！"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">"登录失败，密码错误！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="6-2-3-完成Controller提供接口"><a href="#6-2-3-完成Controller提供接口" class="headerlink" title="6.2.3 完成Controller提供接口"></a>6.2.3 完成Controller提供接口</h6></li><li><p>创建controller，调用service</p></li><li><p>添加接口注解</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"提供用户的登录和注册接口"</span><span class="token punctuation">,</span>tags <span class="token operator">=</span> <span class="token string">"用户管理"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"用户登录接口"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户登录账号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户登录密码"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"用户注册接口"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户注册账号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户注册密码"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/regist"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">userResgit</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="6-2-4-接口测试"><a href="#6-2-4-接口测试" class="headerlink" title="6.2.4 接口测试"></a>6.2.4 接口测试</h6><ul><li>基于swagger进行测试</li></ul><h4 id="6-3-前端跨域访问"><a href="#6-3-前端跨域访问" class="headerlink" title="6.3 前端跨域访问"></a>6.3 前端跨域访问</h4><h6 id="6-3-1-跨域访问概念"><a href="#6-3-1-跨域访问概念" class="headerlink" title="6.3.1 跨域访问概念"></a>6.3.1 跨域访问概念</h6><ul><li><p>什么时跨域访问？</p><blockquote><p>AJAX 跨域访问是用户访问A网站时所产生的对B网站的跨域访问请求均<a href="https://baike.baidu.com/item/%E6%8F%90%E4%BA%A4/2180896">提交</a>到A网站的指定页面</p></blockquote><p><img src="/posts/shopfm/1618561898108.png" alt="1618561898108"></p></li></ul><h6 id="6-3-2-如何解决跨域访问？"><a href="#6-3-2-如何解决跨域访问？" class="headerlink" title="6.3.2 如何解决跨域访问？"></a>6.3.2 如何解决跨域访问？</h6><ul><li>前端使用JSONP设置</li><li>后端使用<code>@CrossOrigin</code>  — 就是设置响应头允许跨域</li></ul><h4 id="6-4-前端页面之间的传值"><a href="#6-4-前端页面之间的传值" class="headerlink" title="6.4 前端页面之间的传值"></a>6.4 前端页面之间的传值</h4><h6 id="6-4-1-cookie"><a href="#6-4-1-cookie" class="headerlink" title="6.4.1 cookie"></a>6.4.1 cookie</h6><ul><li><p>工具方法封装：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> operator <span class="token operator">=</span> <span class="token string">"="</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getCookieValue</span><span class="token punctuation">(</span><span class="token parameter">keyStr</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> s <span class="token operator">=</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> str <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> k <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> v <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> keyStr<span class="token punctuation">)</span><span class="token punctuation">{</span>value <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setCookieValue</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> key<span class="token operator">+</span>operator<span class="token operator">+</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>A页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">setCookieValue</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>userInfo<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCookieValue</span><span class="token punctuation">(</span><span class="token string">"userimg"</span><span class="token punctuation">,</span>userInfo<span class="token punctuation">.</span>userImg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>B页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">getCookieValue</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">getCookieValue</span><span class="token punctuation">(</span><span class="token string">"userimg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h6 id="6-4-2-localStorage"><a href="#6-4-2-localStorage" class="headerlink" title="6.4.2 localStorage"></a>6.4.2 localStorage</h6><ul><li><p>A页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>B页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> jsonStr <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> userInfo <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>jsonStr<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移出localStorage键值对</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="七、前后端分离用户认证-JWT"><a href="#七、前后端分离用户认证-JWT" class="headerlink" title="七、前后端分离用户认证-JWT"></a>七、前后端分离用户认证-JWT</h2><h4 id="7-1-基于session实现单体项目用户认证"><a href="#7-1-基于session实现单体项目用户认证" class="headerlink" title="7.1 基于session实现单体项目用户认证"></a>7.1 基于session实现单体项目用户认证</h4><blockquote><p>在单体项目中如何保证受限资源在用户未登录的情况下不允许访问？</p></blockquote><p><img src="/posts/shopfm/1619158116136.png" alt="1619158116136"></p><blockquote><p>在单体项目中，视图资源（页面）和接口（控制器）都在同一台服务器，用户的多次请求都是基于同一个会话（session），因此可以借助session来进行用户认证判断：</p><p>1.当用户登录成功之后，将用户信息存放到session</p><p>2.当用户再次访问受限资源时，验证session中是否存在用户信息，可以根据session有无用户信息来判断用户是否登录</p></blockquote><h4 id="7-2-基于token实现前后端分离用户认证"><a href="#7-2-基于token实现前后端分离用户认证" class="headerlink" title="7.2 基于token实现前后端分离用户认证"></a>7.2 基于token实现前后端分离用户认证</h4><blockquote><p>由于在前后端分离项目开发中，前后端之间是通过异步交互完成数据访问的，请求是无状态的，因此不能基于session实现用户的认证。</p></blockquote><p><img src="/posts/shopfm/1619149656171.png" alt="1619149656171"></p><h4 id="7-3-基于token的用户认证的实现"><a href="#7-3-基于token的用户认证的实现" class="headerlink" title="7.3 基于token的用户认证的实现"></a>7.3 基于token的用户认证的实现</h4><h6 id="7-3-1-登录认证接口生成token"><a href="#7-3-1-登录认证接口生成token" class="headerlink" title="7.3.1 登录认证接口生成token"></a>7.3.1 登录认证接口生成token</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// UserController</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// UserServiceImpl</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Example<span class="token punctuation">.</span>Criteria</span> criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> usersMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"登录失败，用户名不存在！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> md5Pwd <span class="token operator">=</span> <span class="token class-name">MD5Utils</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>md5Pwd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//如果登录验证成功，则需要生成令牌token（token就是按照特定规则生成的字符串）</span>            <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span>token<span class="token punctuation">,</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"登录失败，密码错误！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-3-2-登录页面接收到token存储到cookie"><a href="#7-3-2-登录页面接收到token存储到cookie" class="headerlink" title="7.3.2 登录页面接收到token存储到cookie"></a>7.3.2 登录页面接收到token存储到cookie</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// login.html</span><span class="token function-variable function">doSubmit</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>isRight<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> baseUrl<span class="token operator">+</span><span class="token string">"user/login"</span><span class="token punctuation">;</span>        axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">{</span>            <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token literal-property property">username</span><span class="token operator">:</span>vm<span class="token punctuation">.</span>username<span class="token punctuation">,</span>                <span class="token literal-property property">password</span><span class="token operator">:</span>vm<span class="token punctuation">.</span>password            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> vo <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vo<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//如果登录成功，就把token存储到cookie</span>                <span class="token function">setCookieValue</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span>vo<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"index.html"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                vm<span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">"登录失败，账号或密码错误！"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        vm<span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">"请正确输入帐号和密码！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-3-3-购物车页面加载时访问购物车列表接口"><a href="#7-3-3-购物车页面加载时访问购物车列表接口" class="headerlink" title="7.3.3 购物车页面加载时访问购物车列表接口"></a>7.3.3 购物车页面加载时访问购物车列表接口</h6><ul><li>获取token</li><li>携带token访问接口</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> baseUrl <span class="token operator">=</span> <span class="token string">"http://localhost:8080/"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">token</span><span class="token operator">:</span><span class="token string">""</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//当进入到购物车页面时，就要查询购物车列表（访问购物车列表接口）</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>token <span class="token operator">=</span> <span class="token function">getCookieValue</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"token:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>                <span class="token literal-property property">url</span><span class="token operator">:</span>baseUrl<span class="token operator">+</span><span class="token string">"shopcart/list"</span><span class="token punctuation">,</span>                <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>                    <span class="token literal-property property">token</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>token                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-3-4-在购物车列表接口校验token"><a href="#7-3-4-在购物车列表接口校验token" class="headerlink" title="7.3.4 在购物车列表接口校验token"></a>7.3.4 在购物车列表接口校验token</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"授权令牌"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listCarts</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//1.获取token</span>    <span class="token comment">//2.校验token</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"请先登录"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> decode <span class="token operator">=</span> <span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>decode<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//token校验成功</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"登录过期，请重新登录！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-4-JWT"><a href="#7-4-JWT" class="headerlink" title="7.4 JWT"></a>7.4 JWT</h4><blockquote><p>如果按照上述规则生成token：</p><p>1.简易的token生成规则安全性较差，如果要生成安全性很高的token对加密算法要求较高；</p><p>2.无法完成时效性的校验（登录过期）</p></blockquote><h6 id="7-4-1-JWT简介"><a href="#7-4-1-JWT简介" class="headerlink" title="7.4.1 JWT简介"></a>7.4.1 JWT简介</h6><ul><li><p>JWT： Json Web Token</p></li><li><p>官网：<a href="https://jwt.io/">https://jwt.io</a></p></li><li><p>jwt的结构</p><p><img src="/posts/shopfm/1619161525439.png" alt="1619161525439"></p></li></ul><h6 id="7-4-2-生成JWT"><a href="#7-4-2-生成JWT" class="headerlink" title="7.4.2 生成JWT"></a>7.4.2 生成JWT</h6><ul><li><p>添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.10.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成token</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> token <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>                 <span class="token comment">//主题，就是token中携带的数据</span>    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token comment">//设置token的生成时间</span>    <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span>               <span class="token comment">//设置用户id为token  id</span>    <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>                                     <span class="token comment">//map中可以存放用户的角色权限信息</span>    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//设置过期时间</span>    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> <span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span>     <span class="token comment">//设置加密方式和加密密码</span>    <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="7-4-3-JWT校验"><a href="#7-4-3-JWT校验" class="headerlink" title="7.4.3 JWT校验"></a>7.4.3 JWT校验</h6><ul><li><p>如果token正确则正常解析，如果token不正确或者过期，则通过抛出的异常进行识别</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">//验证token</span>    <span class="token class-name">JwtParser</span> parser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parser<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解析token的SigningKey必须和生成token时设置密码一致</span>    <span class="token comment">//如果token正确（密码正确，有效期内）则正常执行，否则抛出异常</span>    <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">&gt;</span></span> claimsJws <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Claims</span> body <span class="token operator">=</span> claimsJws<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取token中用户数据</span>    <span class="token class-name">String</span> subject <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取生成token设置的subject</span>    <span class="token class-name">String</span> v1 <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取生成token时存储的Claims的map中的值</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"登录过期，请重新登录！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"Tonken不合法，请自重！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"请重新登录！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="7-4-4-拦截器校验Token"><a href="#7-4-4-拦截器校验Token" class="headerlink" title="7.4.4 拦截器校验Token"></a>7.4.4 拦截器校验Token</h6><ul><li><p>创建拦截器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckTokenInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"请先登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//提示请先登录</span>            <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//验证token</span>                <span class="token class-name">JwtParser</span> parser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//解析token的SigningKey必须和生成token时设置密码一致</span>                parser<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//如果token正确（密码正确，有效期内）则正常执行，否则抛出异常</span>                <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">&gt;</span></span> claimsJws <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"登录过期，请重新登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"Token不合法，请自重！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"请先登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">ResultVO</span> resultVO<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置拦截器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CheckTokenInterceptor</span> checkTokenInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>checkTokenInterceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-5-请求头传递token"><a href="#7-5-请求头传递token" class="headerlink" title="7.5 请求头传递token"></a>7.5 请求头传递token</h4><blockquote><p>前端但凡访问受限资源，都必须携带token发送请求；token可以通过请求行(params)、请求头（header）以及请求体（data）传递，但是习惯性使用header传递</p></blockquote><h6 id="7-5-1-axios通过请求头传值"><a href="#7-5-1-axios通过请求头传值" class="headerlink" title="7.5.1 axios通过请求头传值"></a>7.5.1 axios通过请求头传值</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span>baseUrl<span class="token operator">+</span><span class="token string">"shopcart/list"</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">token</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>token    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-5-2-在拦截器中放行options请求"><a href="#7-5-2-在拦截器中放行options请求" class="headerlink" title="7.5.2 在拦截器中放行options请求"></a>7.5.2 在拦截器中放行options请求</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckTokenInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token comment">//放行options请求</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"OPTIONS"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token operator">+</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"请先登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//提示请先登录</span>            <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//验证token</span>                <span class="token class-name">JwtParser</span> parser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//解析token的SigningKey必须和生成token时设置密码一致</span>                parser<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//如果token正确（密码正确，有效期内）则正常执行，否则抛出异常</span>                <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">&gt;</span></span> claimsJws <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"登录过期，请重新登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"Token不合法，请自重！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"请先登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">ResultVO</span> resultVO<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、首页—轮播图"><a href="#八、首页—轮播图" class="headerlink" title="八、首页—轮播图"></a>八、首页—轮播图</h2><h4 id="8-1-实现流程分析"><a href="#8-1-实现流程分析" class="headerlink" title="8.1 实现流程分析"></a>8.1 实现流程分析</h4><ul><li><p>流程图</p><p><img src="/posts/shopfm/1619313449243.png" alt="1619313449243"></p></li><li><p>接口</p><ul><li>查询轮播图信息返回</li></ul></li></ul><h4 id="8-2-完成后台接口开发"><a href="#8-2-完成后台接口开发" class="headerlink" title="8.2 完成后台接口开发"></a>8.2 完成后台接口开发</h4><h6 id="8-2-1-数据库操作实现"><a href="#8-2-1-数据库操作实现" class="headerlink" title="8.2.1 数据库操作实现"></a>8.2.1 数据库操作实现</h6><ul><li>分析数据表结构</li></ul><p><img src="/posts/shopfm/1619314094094.png" alt="1619314094094"></p><ul><li>添加测试数据</li></ul><p><img src="/posts/shopfm/1619314628075.png" alt="1619314628075"></p><ul><li>编写sql语句</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> img_id<span class="token punctuation">,</span>       img_url<span class="token punctuation">,</span>       img_bg_color<span class="token punctuation">,</span>       prod_id<span class="token punctuation">,</span>       category_id<span class="token punctuation">,</span>       index_type<span class="token punctuation">,</span>       seq<span class="token punctuation">,</span>       <span class="token keyword">status</span><span class="token punctuation">,</span>       create_time<span class="token punctuation">,</span>       update_time<span class="token keyword">from</span> index_img<span class="token keyword">where</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">order</span> <span class="token keyword">by</span> seq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在Mapper接口（DAO）中定义操作方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IndexImgMapper</span> <span class="token keyword">extends</span> <span class="token class-name">GeneralDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexImg</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">//1.查询轮播图信息： 查询status=1 且 按照seq进行排序</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexImg</span><span class="token punctuation">&gt;</span></span> <span class="token function">listIndexImgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置映射文件</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--BaseResultMap是由逆向工程生成的--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listIndexImgs<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select img_id,           img_url,           img_bg_color,           prod_id,           category_id,           index_type,           seq,           status,           create_time,           update_time    from index_img    where status=1    order by seq  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="8-2-2-业务层实现"><a href="#8-2-2-业务层实现" class="headerlink" title="8.2.2 业务层实现"></a>8.2.2 业务层实现</h6><ul><li>IndexImgService接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IndexImgService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listIndexImgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>IndexImgServiceImpl实现类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexImgServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IndexImgService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">IndexImgMapper</span> indexImgMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listIndexImgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexImg</span><span class="token punctuation">&gt;</span></span> indexImgs <span class="token operator">=</span> indexImgMapper<span class="token punctuation">.</span><span class="token function">listIndexImgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>indexImgs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"fail"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span>indexImgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="8-2-3-控制层实现"><a href="#8-2-3-控制层实现" class="headerlink" title="8.2.3 控制层实现"></a>8.2.3 控制层实现</h6><ul><li>IndexController类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"提供首页数据显示所需的接口"</span><span class="token punctuation">,</span>tags <span class="token operator">=</span> <span class="token string">"首页管理"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">IndexImgService</span> indexImgService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/indeximg"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"首页轮播图接口"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listIndexImgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> indexImgService<span class="token punctuation">.</span><span class="token function">listIndexImgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-完成前端功能"><a href="#8-3-完成前端功能" class="headerlink" title="8.3 完成前端功能"></a>8.3 完成前端功能</h4><blockquote><p>当进入到index.html，在进行页面初始化之后，就需要请求轮播图数据进行轮播图的显示</p></blockquote><table><thead><tr><th>index.html</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619317642004.png" alt="1619317642004"></td></tr><tr><td><img src="/posts/shopfm/1619317601353.png" alt="1619317601353"></td></tr></tbody></table><h2 id="九、首页-分类列表"><a href="#九、首页-分类列表" class="headerlink" title="九、首页-分类列表"></a>九、首页-分类列表</h2><h4 id="9-1-实现流程分析"><a href="#9-1-实现流程分析" class="headerlink" title="9.1 实现流程分析"></a>9.1 实现流程分析</h4><p><img src="/posts/shopfm/1619320450656.png" alt="1619320450656"></p><ul><li><p>方案一：一次性查询三级分类</p><ul><li>优点：只需要一次查询，根据一级分类显示二级分类时响应速度较快</li><li>缺点：数据库查询效率较低，页面首次加载的速度也相对较慢</li></ul></li><li><p>方案二：先只查询一级分类，用户点击/鼠标移动到一级分类，动态加载二级分类</p><ul><li>优点：数据库查询效率提高，页面首次加载速度提高</li><li>缺点：需要多次连接数据库</li></ul></li></ul><h4 id="9-2-接口开发"><a href="#9-2-接口开发" class="headerlink" title="9.2 接口开发"></a>9.2 接口开发</h4><h6 id="9-2-1-数据库操作实现"><a href="#9-2-1-数据库操作实现" class="headerlink" title="9.2.1 数据库操作实现"></a>9.2.1 数据库操作实现</h6><ul><li>数据表结构</li></ul><p><img src="/posts/shopfm/1619321256900.png" alt="1619321256900"></p><ul><li><p>添加测试数据</p></li><li><p>编写接口实现所需的SQL</p><ul><li>连接查询</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> c1<span class="token punctuation">.</span>category_id <span class="token string">'category_id1'</span><span class="token punctuation">,</span>c1<span class="token punctuation">.</span>category_name <span class="token string">'category_name1'</span><span class="token punctuation">,</span>c1<span class="token punctuation">.</span>category_level <span class="token string">'category_level1'</span><span class="token punctuation">,</span>c1<span class="token punctuation">.</span>parent_id <span class="token string">'parent_id1'</span><span class="token punctuation">,</span>c1<span class="token punctuation">.</span>category_icon <span class="token string">'category_icon1'</span><span class="token punctuation">,</span>c1<span class="token punctuation">.</span>category_slogan <span class="token string">'category_slogan1'</span><span class="token punctuation">,</span>c1<span class="token punctuation">.</span>category_pic <span class="token string">'category_pic1'</span><span class="token punctuation">,</span>c1<span class="token punctuation">.</span>category_bg_color <span class="token string">'category_bg_color1'</span><span class="token punctuation">,</span>c2<span class="token punctuation">.</span>category_id <span class="token string">'category_id2'</span><span class="token punctuation">,</span>c2<span class="token punctuation">.</span>category_name <span class="token string">'category_name2'</span><span class="token punctuation">,</span>c2<span class="token punctuation">.</span>category_level <span class="token string">'category_level2'</span><span class="token punctuation">,</span>c2<span class="token punctuation">.</span>parent_id <span class="token string">'parent_id2'</span><span class="token punctuation">,</span>c3<span class="token punctuation">.</span>category_id <span class="token string">'category_id3'</span><span class="token punctuation">,</span>c3<span class="token punctuation">.</span>category_name <span class="token string">'category_name3'</span><span class="token punctuation">,</span>c3<span class="token punctuation">.</span>category_level <span class="token string">'category_level3'</span><span class="token punctuation">,</span>c3<span class="token punctuation">.</span>parent_id <span class="token string">'parent_id3'</span><span class="token keyword">from</span> category c1 <span class="token keyword">inner</span> <span class="token keyword">join</span> category c2 <span class="token keyword">on</span> c2<span class="token punctuation">.</span>parent_id<span class="token operator">=</span>c1<span class="token punctuation">.</span>category_id<span class="token keyword">left</span> <span class="token keyword">join</span> category c3<span class="token keyword">on</span> c3<span class="token punctuation">.</span>parent_id<span class="token operator">=</span>c2<span class="token punctuation">.</span>category_id<span class="token keyword">where</span> c1<span class="token punctuation">.</span>category_level<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子查询</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据父级分类的id查询类别信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> category <span class="token keyword">where</span> parent_id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建用于封装查询的类别信息的CategoryVO</p><p><code>在beans子工程的entity包新建一个CategoryVO用于封装查询到类别信息，相对于Category来说，新增了如下属性：</code></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class CategoryVO {    //用于存放当前分类的子分类    private List&lt;CategoryVO&gt; categories;    public List&lt;CategoryVO&gt; getCategories() {        return categories;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在CategoryMapper定义操作方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CategoryMapper</span> <span class="token keyword">extends</span> <span class="token class-name">GeneralDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">//1.连接查询</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.子查询：根据parentId查询子分类</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllCategories2</span><span class="token punctuation">(</span><span class="token keyword">int</span> parentId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>映射配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.dao.CategoryMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.entity.Category<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_level<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryLevel<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_icon<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryIcon<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_slogan<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categorySlogan<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_pic<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryPic<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_bg_color<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryBgColor<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryVOMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.entity.CategoryVO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_id1<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_name1<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_level1<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryLevel<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent_id1<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_icon1<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryIcon<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_slogan1<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categorySlogan<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_pic1<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryPic<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_bg_color1<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryBgColor<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categories<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.entity.CategoryVO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_id2<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_name2<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_level2<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryLevel<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent_id2<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categories<span class="token punctuation">"</span></span>  <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.entity.CategoryVO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_id3<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_name3<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_level3<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryLevel<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent_id3<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAllCategories<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryVOMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select      c1.category_id 'category_id1',      c1.category_name 'category_name1',      c1.category_level 'category_level1',      c1.parent_id 'parent_id1',      c1.category_icon 'category_icon1',      c1.category_slogan 'category_slogan1',      c1.category_pic 'category_pic1',      c1.category_bg_color 'category_bg_color1',      c2.category_id 'category_id2',      c2.category_name 'category_name2',      c2.category_level 'category_level2',      c2.parent_id 'parent_id2',      c3.category_id 'category_id3',      c3.category_name 'category_name3',      c3.category_level 'category_level3',      c3.parent_id 'parent_id3'    from category c1           inner join category c2                      on c2.parent_id=c1.category_id           left join category c3                     on c3.parent_id=c2.category_id    where c1.category_level=1  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!----------------------------------------------------------------------------&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryVOMap2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.entity.CategoryVO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_level<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryLevel<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_icon<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryIcon<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_slogan<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categorySlogan<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_pic<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryPic<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_bg_color<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryBgColor<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categories<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.dao.CategoryMapper.selectAllCategories2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 根据父级分类的id查询子级分类  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAllCategories2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryVOMap2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select            category_id,            category_name,            category_level,            parent_id,            category_icon,            category_slogan,            category_pic,            category_bg_color        from category        where parent_id=#{parentId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="9-2-2-业务层实现"><a href="#9-2-2-业务层实现" class="headerlink" title="9.2.2 业务层实现"></a>9.2.2 业务层实现</h6></li><li><p>CategoryService接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CategoryService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CategoryServiceImpl</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CategoryService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CategoryMapper</span> categoryMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryVO</span><span class="token punctuation">&gt;</span></span> categoryVOS <span class="token operator">=</span> categoryMapper<span class="token punctuation">.</span><span class="token function">selectAllCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> categoryVOS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="9-2-3-控制层实现"><a href="#9-2-3-控制层实现" class="headerlink" title="9.2.3 控制层实现"></a>9.2.3 控制层实现</h6><ul><li><p>IndexController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">CategoryService</span> categoryService<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/category-list"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"商品分类查询接口"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listCatetory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> categoryService<span class="token punctuation">.</span><span class="token function">listCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="9-3-前端功能实现"><a href="#9-3-前端功能实现" class="headerlink" title="9.3 前端功能实现"></a>9.3 前端功能实现</h4><h2 id="十、首页-商品推荐"><a href="#十、首页-商品推荐" class="headerlink" title="十、首页-商品推荐"></a>十、首页-商品推荐</h2><h4 id="10-1-流程分析"><a href="#10-1-流程分析" class="headerlink" title="10.1 流程分析"></a>10.1 流程分析</h4><p><img src="/posts/shopfm/1619334915995.png" alt="1619334915995"></p><h4 id="10-2-接口开发"><a href="#10-2-接口开发" class="headerlink" title="10.2 接口开发"></a>10.2 接口开发</h4><h6 id="10-2-1-数据库实现"><a href="#10-2-1-数据库实现" class="headerlink" title="10.2.1 数据库实现"></a>10.2.1 数据库实现</h6><blockquote><p>商品推荐算法：推荐最新上架的商品</p><p>说明：商品推荐算法是根据多个维度进行权重计算，计算出一个匹配值</p></blockquote><ul><li><p>数据表分析及数据准备</p></li><li><p>sql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 商品推荐：查询最新上架的商品</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">order</span> <span class="token keyword">by</span> create_time <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">-- 子查询：根据商品id查询商品图片</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product_img <span class="token keyword">where</span> item_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在beans子工程entity包创建ProductVO,相比较Product新增了List<productimg> imgs用于存储商品的图片</productimg></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductVO</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductImg</span><span class="token punctuation">&gt;</span></span> imgs<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductImg</span><span class="token punctuation">&gt;</span></span> <span class="token function">getImgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> imgs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setImgs</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductImg</span><span class="token punctuation">&gt;</span></span> imgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imgs <span class="token operator">=</span> imgs<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Mapper接口定义操作方法：</p><ul><li>ProductMapper</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductMapper</span> <span class="token keyword">extends</span> <span class="token class-name">GeneralDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectRecommendProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ProductImgMapper</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductImgMapper</span> <span class="token keyword">extends</span> <span class="token class-name">GeneralDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductImg</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">//根据商品id查询当前商品的图片信息</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductImg</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectProductImgByProductId</span><span class="token punctuation">(</span><span class="token keyword">int</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置映射文件</p><ul><li>ProductMapper.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ProductVOMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.entity.ProductVO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root_category_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rootCategoryId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sold_num<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>soldNum<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_status<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productStatus<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LONGVARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.dao.ProductImgMapper.selectProductImgByProductId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectRecommendProducts<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ProductVOMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select    product_id,    product_name,    category_id,    root_category_id,    sold_num,    product_status,    content,    create_time,    update_time    from product    order by create_time desc    limit 0,3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ProductImgMapper.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.dao.ProductImgMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.entity.ProductImg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itemId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sort<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sort<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>is_main<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isMain<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>created_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createdTime<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updated_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updatedTime<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectProductImgByProductId<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select      id,      item_id,      url,      sort,      is_main,      created_time,      updated_time    from product_img    where item_id=#{productId}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="10-2-2-业务层实现"><a href="#10-2-2-业务层实现" class="headerlink" title="10.2.2 业务层实现"></a>10.2.2 业务层实现</h6><ul><li><p>ProductService接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listRecommendProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ProductServiceImpl实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ProductMapper</span> productMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listRecommendProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductVO</span><span class="token punctuation">&gt;</span></span> productVOS <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectRecommendProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> productVOS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="10-2-3-控制层实现"><a href="#10-2-3-控制层实现" class="headerlink" title="10.2.3 控制层实现"></a>10.2.3 控制层实现</h6></li><li><p>IndexController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">ProductService</span> productService<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list-recommends"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"查询推荐商品接口"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listRecommendProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> productService<span class="token punctuation">.</span><span class="token function">listRecommendProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="10-3-前端实现"><a href="#10-3-前端实现" class="headerlink" title="10.3 前端实现"></a>10.3 前端实现</h4><h2 id="十一、首页-分类商品推荐"><a href="#十一、首页-分类商品推荐" class="headerlink" title="十一、首页-分类商品推荐"></a>十一、首页-分类商品推荐</h2><blockquote><p>按照商品的分类（一级分类）推荐销量最高的6个商品</p></blockquote><h4 id="11-1-流程分析"><a href="#11-1-流程分析" class="headerlink" title="11.1 流程分析"></a>11.1 流程分析</h4><blockquote><p>加载分类商品推荐有两种实现方案：</p><p>方案一：当加载首页面时不加载分类的推荐商品，监听进度条滚动事件，当进度条触底（滚动指定的距离）就触发分类推荐商品的加载，每次只加载一个分类的商品。</p></blockquote><p><img src="/posts/shopfm/1619402242681.png" alt="1619402242681"></p><blockquote><p>方案二：一次性加载所有分类的推荐商品，整体进行初始化。</p></blockquote><p><img src="/posts/shopfm/1619402352603.png" alt="1619402352603"></p><h4 id="11-2-接口实现"><a href="#11-2-接口实现" class="headerlink" title="11.2 接口实现"></a>11.2 接口实现</h4><h6 id="11-2-1-数据库实现"><a href="#11-2-1-数据库实现" class="headerlink" title="11.2.1 数据库实现"></a>11.2.1 数据库实现</h6><ul><li><p>数据准备</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 添加商品</span><span class="token comment">-- 添加十个分类下的商品：</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'商品5'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'商品6'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'商品7'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'商品8'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'商品9'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">126</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span><span class="token string">'商品10'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span><span class="token string">'商品11'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token string">'商品12'</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'13'</span><span class="token punctuation">,</span><span class="token string">'商品13'</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'14'</span><span class="token punctuation">,</span><span class="token string">'商品14'</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'15'</span><span class="token punctuation">,</span><span class="token string">'商品15'</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'16'</span><span class="token punctuation">,</span><span class="token string">'商品16'</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">126</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'17'</span><span class="token punctuation">,</span><span class="token string">'商品17'</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>product_name<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>root_category_id<span class="token punctuation">,</span>sold_num<span class="token punctuation">,</span>product_status<span class="token punctuation">,</span>content<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'18'</span><span class="token punctuation">,</span><span class="token string">'商品18'</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'商品说明'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- 添加商品图片</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'13'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'14'</span><span class="token punctuation">,</span><span class="token string">'10'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'15'</span><span class="token punctuation">,</span><span class="token string">'11'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'16'</span><span class="token punctuation">,</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'17'</span><span class="token punctuation">,</span><span class="token string">'13'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'18'</span><span class="token punctuation">,</span><span class="token string">'14'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'19'</span><span class="token punctuation">,</span><span class="token string">'15'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'20'</span><span class="token punctuation">,</span><span class="token string">'16'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'21'</span><span class="token punctuation">,</span><span class="token string">'17'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> product_img<span class="token punctuation">(</span>id<span class="token punctuation">,</span>item_id<span class="token punctuation">,</span>url<span class="token punctuation">,</span>sort<span class="token punctuation">,</span>is_main<span class="token punctuation">,</span>created_time<span class="token punctuation">,</span>updated_time<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'22'</span><span class="token punctuation">,</span><span class="token string">'18'</span><span class="token punctuation">,</span><span class="token string">'wwxb_1.png'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">,</span><span class="token string">'2021-04-26 11:11:11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查询SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询所有的一级分类</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> category <span class="token keyword">where</span> category_level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 查询每个分类下销量前6的商品</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> root_category_id<span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">order</span> <span class="token keyword">by</span> sold_num <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">-- 查询每个商品的图片</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product_img <span class="token keyword">where</span> item_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实体类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryVO</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> categoryId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> categoryLevel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> parentId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryIcon<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> categorySlogan<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryPic<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryBgColor<span class="token punctuation">;</span>    <span class="token comment">//实现首页的类别显示</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryVO</span><span class="token punctuation">&gt;</span></span> categories<span class="token punctuation">;</span>    <span class="token comment">//实现首页分类商品推荐</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductVO</span><span class="token punctuation">&gt;</span></span> products<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Mapper接口中定义查询方法</p><table><thead><tr><th>CategoryMapper</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619406334330.png" alt="1619406334330"></td></tr></tbody></table><table><thead><tr><th>ProductMapper</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619406609467.png" alt="1619406609467"></td></tr></tbody></table></li><li><p>映射配置</p><table><thead><tr><th>ProductMapper.xml</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619406820361.png" alt="1619406820361"></td></tr></tbody></table><table><thead><tr><th>CategoryMapper.xml</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619406932819.png" alt="1619406932819"></td></tr></tbody></table></li></ul><h6 id="11-2-2-业务层实现"><a href="#11-2-2-业务层实现" class="headerlink" title="11.2.2 业务层实现"></a>11.2.2 业务层实现</h6><h6 id="11-2-3-控制层实现"><a href="#11-2-3-控制层实现" class="headerlink" title="11.2.3 控制层实现"></a>11.2.3 控制层实现</h6><h4 id="11-3-前端实现"><a href="#11-3-前端实现" class="headerlink" title="11.3 前端实现"></a>11.3 前端实现</h4><h2 id="十二、商品详情展示—显示商品基本信息"><a href="#十二、商品详情展示—显示商品基本信息" class="headerlink" title="十二、商品详情展示—显示商品基本信息"></a>十二、商品详情展示—显示商品基本信息</h2><blockquote><p>点击首页推荐的商品、轮播图商品广告、商品列表页面点击商品，就会进入到商品的详情页面</p></blockquote><h4 id="12-1-流程分析"><a href="#12-1-流程分析" class="headerlink" title="12.1 流程分析"></a>12.1 流程分析</h4><p><img src="/posts/shopfm/1619418211550.png" alt="1619418211550"></p><h4 id="12-2-商品基础信息-接口实现"><a href="#12-2-商品基础信息-接口实现" class="headerlink" title="12.2 商品基础信息-接口实现"></a>12.2 商品基础信息-接口实现</h4><blockquote><p>商品基本信息、商品套餐、商品图片</p></blockquote><ul><li><p>SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据id查询商品基本信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> product_id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 根据商品id查询当前商品的图片（√）</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product_img <span class="token keyword">where</span> item_id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 根据商品id查询当前商品的套餐</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product_sku <span class="token keyword">where</span> product_id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>因为上述的三个查询都是单表查询，可以通过tkmapper完成，无需在Mapper接口定义新的方法</p></li><li><p>业务层实现</p><table><thead><tr><th>ProductService接口</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619486681545.png" alt="1619486681545"></td></tr></tbody></table><table><thead><tr><th>ProductServiceImpl类实现</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619486779673.png" alt="1619486779673"></td></tr></tbody></table></li><li><p>控制层实现</p><table><thead><tr><th>ProductController类</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619486849902.png" alt="1619486849902"></td></tr></tbody></table></li></ul><h4 id="12-3-商品基础信息-前端显示"><a href="#12-3-商品基础信息-前端显示" class="headerlink" title="12.3 商品基础信息-前端显示"></a>12.3 商品基础信息-前端显示</h4><h2 id="十三、商品详情展示—显示商品参数信息"><a href="#十三、商品详情展示—显示商品参数信息" class="headerlink" title="十三、商品详情展示—显示商品参数信息"></a>十三、商品详情展示—显示商品参数信息</h2><h4 id="13-1-接口实现"><a href="#13-1-接口实现" class="headerlink" title="13.1 接口实现"></a>13.1 接口实现</h4><blockquote><p>根据商品id查询商品参数信息</p></blockquote><ul><li><p>数据库操作直接只用tkMapper的默认方法实现</p></li><li><p>业务层实现</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619495826781.png" alt="1619495826781"></td></tr></tbody></table></li><li><p>控制层实现</p></li></ul><h4 id="13-2-前端显示商品参数"><a href="#13-2-前端显示商品参数" class="headerlink" title="13.2 前端显示商品参数"></a>13.2 前端显示商品参数</h4><h4 id="13-3-前端显示商品细节"><a href="#13-3-前端显示商品细节" class="headerlink" title="13.3 前端显示商品细节"></a>13.3 前端显示商品细节</h4><h6 id="前端页面间URL传值"><a href="#前端页面间URL传值" class="headerlink" title="前端页面间URL传值"></a>前端页面间URL传值</h6><ul><li><p>utils.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getUrlParam</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> params <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>params<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> param <span class="token operator">=</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//"pid=101"</span><span class="token keyword">if</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> key <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>a.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b.html?pid=101&amp;pname=咪咪虾条<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳转到B页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>b.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>This is Page B...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/utils.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> pid <span class="token operator">=</span> <span class="token function">getUrlParam</span><span class="token punctuation">(</span><span class="token string">"pid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十四、商品详情展示—显示商品评论信息"><a href="#十四、商品详情展示—显示商品评论信息" class="headerlink" title="十四、商品详情展示—显示商品评论信息"></a>十四、商品详情展示—显示商品评论信息</h2></li></ul><h4 id="14-1-接口实现"><a href="#14-1-接口实现" class="headerlink" title="14.1 接口实现"></a>14.1 接口实现</h4><h6 id="14-1-1-数据库实现"><a href="#14-1-1-数据库实现" class="headerlink" title="14.1.1 数据库实现"></a>14.1.1 数据库实现</h6><ul><li>数据表分析及数据准备</li><li>SQL</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据ID查询商品的评价信息，关联查询评价用户的信息</span><span class="token keyword">select</span> u<span class="token punctuation">.</span>username<span class="token punctuation">,</span>u<span class="token punctuation">.</span>nickname<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_img<span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> product_comments c<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> users u<span class="token keyword">ON</span> u<span class="token punctuation">.</span>user_id <span class="token operator">=</span> c<span class="token punctuation">.</span>user_id<span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>product_id <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实体类封装<code>ProductCommentsVO</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductCommentsVO</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> commId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> productId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> productName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> orderItemId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> isAnonymous<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> commType<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> commLevel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> commContent<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> commImgs<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> sepcName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> replyStatus<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> replyContent<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> replyTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> isShow<span class="token punctuation">;</span>    <span class="token comment">//封装评论对应的用户数据</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userImg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在Mapper接口定义查询方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductCommentsMapper</span> <span class="token keyword">extends</span> <span class="token class-name">GeneralDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductComments</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductCommentsVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectCommontsByProductId</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>映射配置：</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="14-1-2-业务层实现"><a href="#14-1-2-业务层实现" class="headerlink" title="14.1.2 业务层实现"></a>14.1.2 业务层实现</h6><ul><li>创建<code>ProductCommontsService</code>接口定义方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductCommontsService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listCommontsByProductId</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建实现类<code>ProductCommontsServiceImpl</code>实现查询操作</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductCommontsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ProductCommontsService</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ProductCommentsMapper</span> productCommentsMapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listCommontsByProductId</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductCommentsVO</span><span class="token punctuation">&gt;</span></span> productCommentsVOS <span class="token operator">=</span> productCommentsMapper<span class="token punctuation">.</span><span class="token function">selectCommontsByProductId</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> productCommentsVOS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="14-1-3-控制层实现"><a href="#14-1-3-控制层实现" class="headerlink" title="14.1.3 控制层实现"></a>14.1.3 控制层实现</h6><ul><li>ProductController</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"商品评论信息查询接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/detail-commonts/{pid}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">getProductCommonts</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"pid"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> productCommontsService<span class="token punctuation">.</span><span class="token function">listCommontsByProductId</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-2-前端评论内容显示"><a href="#14-2-前端评论内容显示" class="headerlink" title="14.2 前端评论内容显示"></a>14.2 前端评论内容显示</h4><h2 id="十五、商品详情展示—商品评论分页及统计信息"><a href="#十五、商品详情展示—商品评论分页及统计信息" class="headerlink" title="十五、商品详情展示—商品评论分页及统计信息"></a>十五、商品详情展示—商品评论分页及统计信息</h2><h4 id="15-1-流程分析"><a href="#15-1-流程分析" class="headerlink" title="15.1 流程分析"></a>15.1 流程分析</h4><p><img src="/posts/shopfm/1619574986954.png" alt="1619574986954"></p><h4 id="15-2-接口开发"><a href="#15-2-接口开发" class="headerlink" title="15.2 接口开发"></a>15.2 接口开发</h4><h6 id="15-2-1-改造商品评论列表接口"><a href="#15-2-1-改造商品评论列表接口" class="headerlink" title="15.2.1 改造商品评论列表接口"></a>15.2.1 改造商品评论列表接口</h6><blockquote><p>分页查询</p></blockquote><ul><li><p>定义PageHelper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageHelper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">//总记录数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token comment">//总页数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageCount<span class="token punctuation">;</span>    <span class="token comment">//分页数据</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>改造数据库操作</p><table><thead><tr><th>ProductCommentsMapper 接口</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619576150309.png" alt="1619576150309"></td></tr></tbody></table><table><thead><tr><th>ProductCommentsMapper.xml映射配置</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619576213285.png" alt="1619576213285"></td></tr></tbody></table></li><li><p>改造业务逻辑层</p><table><thead><tr><th>ProductCommontsService接口</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619576427970.png" alt="1619576427970"></td></tr></tbody></table><table><thead><tr><th>ProductCommontsServiceImpl</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619576517049.png" alt="1619576517049"></td></tr></tbody></table></li><li><p>改造控制层</p><table><thead><tr><th>ProductController</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619576879670.png" alt="1619576879670"></td></tr></tbody></table></li></ul><h6 id="15-2-2-评价统计接口实现"><a href="#15-2-2-评价统计接口实现" class="headerlink" title="15.2.2 评价统计接口实现"></a>15.2.2 评价统计接口实现</h6><ul><li><p>数据库实现</p><ul><li>统计当前商品的总记录数</li><li>统计当前商品的好评/中评/差评</li></ul></li><li><p>业务层实现: <code>ProductCommontsServiceImpl</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">getCommentsCountByProductId</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//1.查询当前商品评价的总数</span>    <span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">ProductComments</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Example<span class="token punctuation">.</span>Criteria</span> criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">,</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> productCommentsMapper<span class="token punctuation">.</span><span class="token function">selectCountByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.查询好评评价数</span>    criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"commType"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> goodTotal <span class="token operator">=</span> productCommentsMapper<span class="token punctuation">.</span><span class="token function">selectCountByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.查询好评评价数</span>    <span class="token class-name">Example</span> example1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">ProductComments</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Example<span class="token punctuation">.</span>Criteria</span> criteria1 <span class="token operator">=</span>  example1<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    criteria1<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">,</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>    criteria1<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"commType"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> midTotal <span class="token operator">=</span> productCommentsMapper<span class="token punctuation">.</span><span class="token function">selectCountByExample</span><span class="token punctuation">(</span>example1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.查询好评评价数</span>    <span class="token class-name">Example</span> example2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">ProductComments</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Example<span class="token punctuation">.</span>Criteria</span> criteria2 <span class="token operator">=</span>  example2<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    criteria2<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">,</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>    criteria2<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"commType"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> badTotal <span class="token operator">=</span> productCommentsMapper<span class="token punctuation">.</span><span class="token function">selectCountByExample</span><span class="token punctuation">(</span>example2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.计算好评率</span>    <span class="token keyword">double</span> percent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>goodTotal<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>total<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> percentValue <span class="token operator">=</span> <span class="token punctuation">(</span>percent<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>percent<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"goodTotal"</span><span class="token punctuation">,</span>goodTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"midTotal"</span><span class="token punctuation">,</span>midTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"badTotal"</span><span class="token punctuation">,</span>badTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"percent"</span><span class="token punctuation">,</span>percentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResultVO</span> success <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> success<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="15-3-前端实现"><a href="#15-3-前端实现" class="headerlink" title="15.3 前端实现"></a>15.3 前端实现</h4><h6 id="15-3-1-商品评论的分页"><a href="#15-3-1-商品评论的分页" class="headerlink" title="15.3.1 商品评论的分页"></a>15.3.1 商品评论的分页</h6><ul><li><p>引用elementUI分页组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 引入样式 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/element-ui/lib/theme-chalk/index.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- vue的引入必须在elementUI组件库引入之前 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入组件库 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/element-ui/lib/index.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引用分页组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--分页 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span> <span class="token attr-name">background</span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prev, pager, next<span class="token punctuation">"</span></span>                <span class="token attr-name">:current-page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageNum<span class="token punctuation">"</span></span>               <span class="token attr-name">:page-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>limit<span class="token punctuation">"</span></span>                <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span><span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>监听分页组件的<code>页码改变</code>事件（点击上一页、下一页、页码都会导致<code>页码改变</code>）</p><p><code>分页组件的事件函数默认传递当前页码参数</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">pager</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentPage</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pageNum <span class="token operator">=</span> currentPage<span class="token punctuation">;</span>    <span class="token comment">//请求下一页数据</span>    <span class="token keyword">var</span> url3 <span class="token operator">=</span> baseUrl<span class="token operator">+</span><span class="token string">"product/detail-commonts/"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>productId<span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url3<span class="token punctuation">,</span><span class="token punctuation">{</span>        <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">pageNum</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>pageNum<span class="token punctuation">,</span>            <span class="token literal-property property">limit</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token comment">//获取到评论分页数据</span>        <span class="token keyword">var</span> pageHelper <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token comment">//当前页的评论列表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productCommonts <span class="token operator">=</span> pageHelper<span class="token punctuation">.</span>list<span class="token punctuation">;</span>        <span class="token comment">//总页数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageCount <span class="token operator">=</span> pageHelper<span class="token punctuation">.</span>pageCount<span class="token punctuation">;</span>        <span class="token comment">//总记录数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> pageHelper<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="15-3-2-商品评价统计"><a href="#15-3-2-商品评价统计" class="headerlink" title="15.3.2 商品评价统计"></a>15.3.2 商品评价统计</h6><h2 id="十六、购物车—添加购物车（登陆状态）"><a href="#十六、购物车—添加购物车（登陆状态）" class="headerlink" title="十六、购物车—添加购物车（登陆状态）"></a>十六、购物车—添加购物车（登陆状态）</h2><h4 id="16-1-流程分析"><a href="#16-1-流程分析" class="headerlink" title="16.1 流程分析"></a>16.1 流程分析</h4><p><img src="/posts/shopfm/1619592683628.png" alt="1619592683628"></p><h4 id="16-2-接口实现"><a href="#16-2-接口实现" class="headerlink" title="16.2 接口实现"></a>16.2 接口实现</h4><h6 id="16-2-1-修改购物车数据表结构"><a href="#16-2-1-修改购物车数据表结构" class="headerlink" title="16.2.1 修改购物车数据表结构"></a>16.2.1 修改购物车数据表结构</h6><table><thead><tr><th>shopping_cart</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619593620642.png" alt="1619593620642"></td></tr></tbody></table><ul><li>数据表修改完成之后，对此表重新进行逆向工程</li></ul><h6 id="16-2-2-数据库实现"><a href="#16-2-2-数据库实现" class="headerlink" title="16.2.2 数据库实现"></a>16.2.2 数据库实现</h6><ul><li>单表添加操作，可以直接使用tkMapper完成</li></ul><h6 id="16-2-3-业务层实现"><a href="#16-2-3-业务层实现" class="headerlink" title="16.2.3 业务层实现"></a>16.2.3 业务层实现</h6><ul><li><p><code>ShoppingCartService</code>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ShoppingCartService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">addShoppingCart</span><span class="token punctuation">(</span><span class="token class-name">ShoppingCart</span> cart<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现类</p></li></ul><h4 id="16-3-前端实现"><a href="#16-3-前端实现" class="headerlink" title="16.3 前端实现"></a>16.3 前端实现</h4><h6 id="16-3-1-记录选择的套餐属性"><a href="#16-3-1-记录选择的套餐属性" class="headerlink" title="16.3.1  记录选择的套餐属性"></a>16.3.1  记录选择的套餐属性</h6><ul><li><p>在vue的data中定义 <code>chooseSkuProps</code></p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619598532882.png" alt="1619598532882"></td></tr></tbody></table></li><li><p>为sku的属性添加点击事件</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619598596008.png" alt="1619598596008"></td></tr></tbody></table></li><li><p>在methods中定义事件函数<code>changeProp</code></p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619598649495.png" alt="1619598649495"></td></tr></tbody></table></li><li><p>添加套餐切换的监听事件：</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619598727969.png" alt="1619598727969"></td></tr></tbody></table></li></ul><h6 id="16-3-2-套餐属性选中效果"><a href="#16-3-2-套餐属性选中效果" class="headerlink" title="16.3.2 套餐属性选中效果"></a>16.3.2 套餐属性选中效果</h6><ul><li><p>在套餐属性标签上添加name属性</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619599876658.png" alt="1619599876658"></td></tr></tbody></table></li><li><p>在属性的点击事件函数实现选中效果</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619599992514.png" alt="1619599992514"></td></tr></tbody></table></li></ul><h6 id="16-3-3-修改商品数量"><a href="#16-3-3-修改商品数量" class="headerlink" title="16.3.3 修改商品数量"></a>16.3.3 修改商品数量</h6><ul><li><p>在vue的data中定义<code>num</code>存储商品数量（默认值为1）</p></li><li><p>为+，-添加点击事件监听</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619600802928.png" alt="1619600802928"></td></tr></tbody></table></li><li><p>定义点击事件函数</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619600875367.png" alt="1619600875367"></td></tr></tbody></table></li></ul><h6 id="16-3-4-提交购物车"><a href="#16-3-4-提交购物车" class="headerlink" title="16.3.4 提交购物车"></a>16.3.4 提交购物车</h6><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619602118279.png" alt="1619602118279"></td></tr></tbody></table><h2 id="十七、购物车—添加购物车（未登录状态）"><a href="#十七、购物车—添加购物车（未登录状态）" class="headerlink" title="十七、购物车—添加购物车（未登录状态）"></a>十七、购物车—添加购物车（未登录状态）</h2><h4 id="17-1-流程分析"><a href="#17-1-流程分析" class="headerlink" title="17.1 流程分析"></a>17.1 流程分析</h4><p><img src="/posts/shopfm/1619659435955.png" alt="1619659435955"></p><h4 id="17-2-功能实现"><a href="#17-2-功能实现" class="headerlink" title="17.2 功能实现"></a>17.2 功能实现</h4><h6 id="17-2-1-定义新的状态码"><a href="#17-2-1-定义新的状态码" class="headerlink" title="17.2.1 定义新的状态码"></a>17.2.1 定义新的状态码</h6><table><thead><tr><th>ResStatus</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619660135968.png" alt="1619660135968"></td></tr></tbody></table><table><thead><tr><th>登录认证拦截器</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619660219076.png" alt="1619660219076"></td></tr></tbody></table><h6 id="17-2-2-在详情页面判断如果用户未登录，则跳转到登录页面"><a href="#17-2-2-在详情页面判断如果用户未登录，则跳转到登录页面" class="headerlink" title="17.2.2 在详情页面判断如果用户未登录，则跳转到登录页面"></a>17.2.2 在详情页面判断如果用户未登录，则跳转到登录页面</h6><table><thead><tr><th>introduction.html</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619663976567.png" alt="1619663976567"></td></tr></tbody></table><h6 id="17-2-3-登录页面接收回跳信息"><a href="#17-2-3-登录页面接收回跳信息" class="headerlink" title="17.2.3 登录页面接收回跳信息"></a>17.2.3 登录页面接收回跳信息</h6><table><thead><tr><th>login.html</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619664052034.png" alt="1619664052034"></td></tr><tr><td><img src="/posts/shopfm/1619664084474.png" alt="1619664084474"></td></tr></tbody></table><h6 id="17-2-4-回到详情页时接收参数"><a href="#17-2-4-回到详情页时接收参数" class="headerlink" title="17.2.4 回到详情页时接收参数"></a>17.2.4 回到详情页时接收参数</h6><table><thead><tr><th>introduction.html</th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619664166141.png" alt="1619664166141"></td></tr></tbody></table><h6 id="17-2-5-使用layui添加购物车成功-失败进行提示"><a href="#17-2-5-使用layui添加购物车成功-失败进行提示" class="headerlink" title="17.2.5 使用layui添加购物车成功/失败进行提示"></a>17.2.5 使用layui添加购物车成功/失败进行提示</h6><ul><li><p>引入layui  layui.com</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 引入 layui.css --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//unpkg.com/layui@2.6.5/dist/css/layui.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 引入 layui.js --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//unpkg.com/layui@2.6.5/dist/layui.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>声明弹窗组件</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619664490259.png" alt="1619664490259"></td></tr></tbody></table></li><li><p>当添加购物车成功或者失败的时候，进行提示：</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619664620982.png" alt="1619664620982"></td></tr></tbody></table></li></ul><h2 id="十八、购物车—购物车列表"><a href="#十八、购物车—购物车列表" class="headerlink" title="十八、购物车—购物车列表"></a>十八、购物车—购物车列表</h2><h4 id="18-1-流程分析"><a href="#18-1-流程分析" class="headerlink" title="18.1 流程分析"></a>18.1 流程分析</h4><p><img src="/posts/shopfm/1619676817769.png" alt="1619676817769"></p><h4 id="18-2-接口实现"><a href="#18-2-接口实现" class="headerlink" title="18.2 接口实现"></a>18.2 接口实现</h4><h6 id="18-2-1-数据库实现"><a href="#18-2-1-数据库实现" class="headerlink" title="18.2.1 数据库实现"></a>18.2.1 数据库实现</h6><ul><li><p>SQL</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">-- 根据用户ID查询当前用户的购物车信息select c.*, p.product_name,i.urlfrom shopping_cart c  INNER JOIN product p INNER JOIN product_img iON c.product_id = p.product_id and i.item_id=p.product_idwhere user_id=6 and i.is_main=1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实体类</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619683431269.png" alt="1619683431269"></td></tr></tbody></table></li><li><p>在Mapper接口定义查询方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ShoppingCartMapper</span> <span class="token keyword">extends</span> <span class="token class-name">GeneralDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCart</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCartVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectShopcartByUserId</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>映射配置</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619683479956.png" alt="1619683479956"></td></tr></tbody></table></li></ul><h6 id="18-2-2-业务层实现"><a href="#18-2-2-业务层实现" class="headerlink" title="18.2.2 业务层实现"></a>18.2.2 业务层实现</h6><ul><li><p>Service接口</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619678423598.png" alt="1619678423598"></td></tr></tbody></table></li><li><p>Service实现类</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619678561766.png" alt="1619678561766"></td></tr></tbody></table></li></ul><h6 id="18-2-3-控制层实现"><a href="#18-2-3-控制层实现" class="headerlink" title="18.2.3 控制层实现"></a>18.2.3 控制层实现</h6><h4 id="18-3-前端实现"><a href="#18-3-前端实现" class="headerlink" title="18.3 前端实现"></a>18.3 前端实现</h4><h6 id="18-3-1-显示购物车列表"><a href="#18-3-1-显示购物车列表" class="headerlink" title="18.3.1 显示购物车列表"></a>18.3.1 显示购物车列表</h6><h6 id="18-3-2-显示购物车中商品价格"><a href="#18-3-2-显示购物车中商品价格" class="headerlink" title="18.3.2 显示购物车中商品价格"></a>18.3.2 显示购物车中商品价格</h6><h2 id="十九、购物车-修改购物车数量"><a href="#十九、购物车-修改购物车数量" class="headerlink" title="十九、购物车-修改购物车数量"></a>十九、购物车-修改购物车数量</h2><h4 id="19-1-流程分析"><a href="#19-1-流程分析" class="headerlink" title="19.1 流程分析"></a>19.1 流程分析</h4><h4 id="19-2-接口实现"><a href="#19-2-接口实现" class="headerlink" title="19.2 接口实现"></a>19.2 接口实现</h4><ul><li><p>在Mapper接口定义修改方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ShoppingCartMapper</span> <span class="token keyword">extends</span> <span class="token class-name">GeneralDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCart</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCartVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectShopcartByUserId</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateCartnumByCartid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"cartId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> cartId<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"cartNum"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> cartNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>映射配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateCartnumByCartid<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    update shopping_cart set cart_num=#{cartNum} where cart_id=#{cartId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Service接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ShoppingCartService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">addShoppingCart</span><span class="token punctuation">(</span><span class="token class-name">ShoppingCart</span> cart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listShoppingCartsByUserId</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">updateCartNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> cartId<span class="token punctuation">,</span><span class="token keyword">int</span> cartNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Service实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShoppingCartServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ShoppingCartService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ShoppingCartMapper</span> shoppingCartMapper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">updateCartNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> cartId<span class="token punctuation">,</span> <span class="token keyword">int</span> cartNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> shoppingCartMapper<span class="token punctuation">.</span><span class="token function">updateCartnumByCartid</span><span class="token punctuation">(</span>cartId<span class="token punctuation">,</span> cartNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span><span class="token string">"update success"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"update fail"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>控制层实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/update/{cid}/{cnum}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"cid"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> cartId<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"cnum"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> cartNum<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> shoppingCartService<span class="token punctuation">.</span><span class="token function">updateCartNum</span><span class="token punctuation">(</span>cartId<span class="token punctuation">,</span> cartNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="19-3-前端实现"><a href="#19-3-前端实现" class="headerlink" title="19.3 前端实现"></a>19.3 前端实现</h4><ul><li><p>为按钮添加点击事件</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619686445301.png" alt="1619686445301"></td></tr></tbody></table></li><li><p>定义changeNum事件函数</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619686496594.png" alt="1619686496594"></td></tr></tbody></table><h2 id="二十、购物车—结算、提交订单"><a href="#二十、购物车—结算、提交订单" class="headerlink" title="二十、购物车—结算、提交订单"></a>二十、购物车—结算、提交订单</h2></li></ul><blockquote><p>在购物车列表中选择对应的的商品之后，点击提交生成订单的过程</p></blockquote><h4 id="20-1-流程图"><a href="#20-1-流程图" class="headerlink" title="20.1 流程图"></a>20.1 流程图</h4><p><img src="/posts/shopfm/1619746225978.png" alt="1619746225978"></p><h4 id="20-2-接口实现"><a href="#20-2-接口实现" class="headerlink" title="20.2 接口实现"></a>20.2 接口实现</h4><h6 id="20-2-1-收货地址列表接口"><a href="#20-2-1-收货地址列表接口" class="headerlink" title="20.2.1 收货地址列表接口"></a>20.2.1 收货地址列表接口</h6><blockquote><p>此操作的数据库实现可以通过tkmapper通用方法完成</p></blockquote><ul><li><p>service接口<code>UserAddrService</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserAddrService</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listAddrsByUid</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Service实现类 <code>UserAddrServiceImpl</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAddrServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserAddrService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserAddrMapper</span> userAddrMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listAddrsByUid</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">UserAddr</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Example<span class="token punctuation">.</span>Criteria</span> criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserAddr</span><span class="token punctuation">&gt;</span></span> userAddrs <span class="token operator">=</span> userAddrMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> userAddrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>控制器实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"提供收货地址相关接口"</span><span class="token punctuation">,</span>tags <span class="token operator">=</span> <span class="token string">"收货地址管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/useraddr"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAddrController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserAddrService</span> userAddrService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"userId"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户ID"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listAddr</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> userAddrService<span class="token punctuation">.</span><span class="token function">listAddrsByUid</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="20-2-2-购物车记录列表接口"><a href="#20-2-2-购物车记录列表接口" class="headerlink" title="20.2.2 购物车记录列表接口"></a>20.2.2 购物车记录列表接口</h6><blockquote><p>根据一个ID的集合，查询购物车记录，实现方式有两种：</p><ul><li><p>动态sql</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchShoppingCartById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shopCartMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select * from shopping_cart where cart_id in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        #{cid}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>tkMapper条件查询</p><p>criteria.andIn(“cartId”,ids);</p></li></ul></blockquote><ul><li><p>Mapper接口定义查询方法</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619748408712.png" alt="1619748408712"></td></tr></tbody></table></li><li><p>映射配置(动态sql  foreach)</p><table><thead><tr><th><img src="/posts/shopfm/1619748709076.png" alt="1619748709076"></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619748733082.png" alt="1619748733082"></td></tr></tbody></table></li><li><p>Service接口</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619749713763.png" alt="1619749713763"></td></tr></tbody></table></li><li><p>Service实现类</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619749813052.png" alt="1619749813052"></td></tr></tbody></table></li><li><p>控制器实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/listbycids"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"cids"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"选择的购物车记录id"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listByCids</span><span class="token punctuation">(</span><span class="token class-name">String</span> cids<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> shoppingCartService<span class="token punctuation">.</span><span class="token function">listShoppingCartsByCids</span><span class="token punctuation">(</span>cids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="20-2-3-保存订单"><a href="#20-2-3-保存订单" class="headerlink" title="20.2.3 保存订单"></a>20.2.3 保存订单</h6><h4 id="20-3-前端实现"><a href="#20-3-前端实现" class="headerlink" title="20.3 前端实现"></a>20.3 前端实现</h4><h6 id="20-3-1-选择购物车记录价格联动"><a href="#20-3-1-选择购物车记录价格联动" class="headerlink" title="20.3.1 选择购物车记录价格联动"></a>20.3.1 选择购物车记录价格联动</h6><ul><li><p>列表前的复选框标签</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619752375851.png" alt="1619752375851"></td></tr></tbody></table></li><li><p>渲染商品数量以及总价格</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619752439537.png" alt="1619752439537"></td></tr></tbody></table></li><li><p>在vue示例的data中声明opts和totalPrice，并且监听opts选项的改变—选项一旦改变就计算总价格</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619752613127.png" alt="1619752613127"></td></tr></tbody></table></li></ul><h6 id="20-3-2-点击“结算”跳转到订单添加页面"><a href="#20-3-2-点击“结算”跳转到订单添加页面" class="headerlink" title="20.3.2 点击“结算”跳转到订单添加页面"></a>20.3.2 点击“结算”跳转到订单添加页面</h6><blockquote><p>在购物车列表页面，选择购物车记录，点击“结算之后”将选择的购物车记录ID传递到order-add.html</p></blockquote><ul><li><p>shopcart.html</p><table><thead><tr><th><img src="/posts/shopfm/1619753864337.png" alt="1619753864337"></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619753818141.png" alt="1619753818141"></td></tr></tbody></table></li><li><p>order-add.html</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619753916301.png" alt="1619753916301"></td></tr></tbody></table></li></ul><h6 id="20-3-3-显示收货地址及订单商品"><a href="#20-3-3-显示收货地址及订单商品" class="headerlink" title="20.3.3 显示收货地址及订单商品"></a>20.3.3 显示收货地址及订单商品</h6><h6 id="20-3-4-订单确认页面选择地址"><a href="#20-3-4-订单确认页面选择地址" class="headerlink" title="20.3.4 订单确认页面选择地址"></a>20.3.4 订单确认页面选择地址</h6><h2 id="二十一、订单提交及支付"><a href="#二十一、订单提交及支付" class="headerlink" title="二十一、订单提交及支付"></a>二十一、订单提交及支付</h2><h4 id="21-1-流程分析"><a href="#21-1-流程分析" class="headerlink" title="21.1 流程分析"></a>21.1 流程分析</h4><p><img src="/posts/shopfm/1619766286877.png" alt="1619766286877"></p><h4 id="21-2-订单添加接口实现"><a href="#21-2-订单添加接口实现" class="headerlink" title="21.2 订单添加接口实现"></a>21.2 订单添加接口实现</h4><h6 id="21-2-1-数据库操作"><a href="#21-2-1-数据库操作" class="headerlink" title="21.2.1 数据库操作"></a>21.2.1 数据库操作</h6><ul><li><p>根据收货地址ID，获取收货地址信息（tkMapper）</p></li><li><p>根据购物车ID，查询购物车详情（需要关联查询商品名称、sku名称、<code>库存</code>、商品图片、商品价格）</p><table><thead><tr><th>改造：<code>ShoppingCartMapper</code>中的<code>selectShopcartByCids</code></th></tr></thead><tbody><tr><td><img src="/posts/shopfm/1619767517965.png" alt="1619767517965"></td></tr><tr><td><img src="/posts/shopfm/1619767558431.png" alt="1619767558431"></td></tr><tr><td><img src="/posts/shopfm/1619767584721.png" alt="1619767584721"></td></tr></tbody></table></li><li><p>保存订单（tkMapper）</p></li><li><p>修改库存（tkMapper）</p></li><li><p>保存商品快照（tkMapper）</p></li></ul><h6 id="21-2-2-业务层实现"><a href="#21-2-2-业务层实现" class="headerlink" title="21.2.2 业务层实现"></a>21.2.2 业务层实现</h6><h2 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h2><blockquote><p>为商家提供代理收款服务</p></blockquote><h3 id="1-微信支付业务-商户需要注册微信支付业务"><a href="#1-微信支付业务-商户需要注册微信支付业务" class="headerlink" title="1.微信支付业务-商户需要注册微信支付业务"></a>1.微信支付业务-商户需要注册微信支付业务</h3><ul><li>商户编号：3454563<ul><li>商户账号：23435</li><li>商户编号appID： werselfjldsjhtoieiurt0</li><li>商户密钥：sdfsdlkfjdslkjfFGFGDSRTG89</li></ul></li></ul><h3 id="2-微信支付业务-商户注册微信支付业务"><a href="#2-微信支付业务-商户注册微信支付业务" class="headerlink" title="2. 微信支付业务-商户注册微信支付业务"></a>2. 微信支付业务-商户注册微信支付业务</h3><blockquote><p>支付订单，并不是用户提交的商品订单，而是商户向微信支付平台申请的支付链接</p></blockquote><h4 id="2-1导入微信支付Maven依赖"><a href="#2-1导入微信支付Maven依赖" class="headerlink" title="2.1导入微信支付Maven依赖"></a>2.1导入微信支付Maven依赖</h4><ul><li><p>wxpay的maven依赖生成</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.github.wxpay/wxpay-sdk --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.wxpay<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>wxpay-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-创建微信支付配置类："><a href="#2-2-创建微信支付配置类：" class="headerlink" title="2.2 创建微信支付配置类："></a>2.2 创建微信支付配置类：</h3></li><li><p>创建一类，实现WxPayConfig接口</p></li><li><p>重写三分方法，分别设置AppID\商户ID\商户密钥</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>fmmall<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>wxpay<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span></span><span class="token class-name">WXPayConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPayConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WXPayConfig</span> <span class="token punctuation">{</span>      <span class="token comment">//商户账号</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAppID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"wx632c8f211f8122c6"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//商户appID</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMchID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"1497984412"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"sbNCm1JnevqI36LrEaxFwcaT0hkGxFnC"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//商户的密钥</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getCertStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHttpConnectTimeoutMs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHttpReadTimeoutMs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2和微信的接口进行相关的参数设置和获取微信支付链接"><a href="#2-2和微信的接口进行相关的参数设置和获取微信支付链接" class="headerlink" title="2.2和微信的接口进行相关的参数设置和获取微信支付链接"></a>2.2和微信的接口进行相关的参数设置和获取微信支付链接</h4><h5 id="2-21创建自己的url-PayController类："><a href="#2-21创建自己的url-PayController类：" class="headerlink" title="2.21创建自己的url,PayController类："></a>2.21创建自己的url,PayController类：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>fmmall<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/pay"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/success"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-22添加订单快照成功生成支付链接"><a href="#2-22添加订单快照成功生成支付链接" class="headerlink" title="2.22添加订单快照成功生成支付链接"></a>2.22添加订单快照成功生成支付链接</h5><p>必须设置的配置参数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//            必填选项   用于设置支付完成时的回调方法接口</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"notify_url"</span><span class="token punctuation">,</span><span class="token string">"/pay/success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>fmmall<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>wxpay<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span></span><span class="token class-name">WXPay</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>fmmall<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">MyPayConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>fmmall<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Orders</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>fmmall<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OrderService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>fmmall<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ResultStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>fmmall<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ResultVO</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Api</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"提供订单相关的接口"</span><span class="token punctuation">,</span>tags <span class="token operator">=</span> <span class="token string">"订单管理"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add/{cids}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"cids"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> cids<span class="token punctuation">,</span>                        <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Orders</span> orders<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ResultVO</span> resultVO<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//        测试用的OrderId</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> orderInfo <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>cids<span class="token punctuation">,</span> orders<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> orderId<span class="token operator">=</span>orderInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"orderId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//           订单快照创建成功，申请支付链接</span>            <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            设置当前订单信息</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">,</span>orderInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"productNames"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//商品描述</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用当前用户订单编号作为当前支付交易的交易编号</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fee_type"</span><span class="token punctuation">,</span><span class="token string">"CNY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//支付币种</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total_fee"</span><span class="token punctuation">,</span> orders<span class="token punctuation">.</span><span class="token function">getActualAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//支付金额</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"trade_type"</span><span class="token punctuation">,</span><span class="token string">"NATIVE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交易类型</span><span class="token comment">//            必填选项   用于设置支付完成时的回调方法接口</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"notify_url"</span><span class="token punctuation">,</span><span class="token string">"/pay/success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">WXPay</span> wxPay<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WXPay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyPayConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> resp <span class="token operator">=</span> wxPay<span class="token punctuation">.</span><span class="token function">unifiedOrder</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            把微信支付平台生成的链接获取到</span>            orderInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"payUrl"</span><span class="token punctuation">,</span>resp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"code_url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultVO<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResultStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span><span class="token string">"提交订单成功！"</span><span class="token punctuation">,</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            code_url -&gt; weixin://wxpay/bizpayurl?pr=Iv5Fsq6zz</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultVO<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResultStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"下单失败"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/posts/computermanage/"/>
      <url>/posts/computermanage/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Start"><a href="#一、Start" class="headerlink" title="一、Start"></a>一、Start</h1><h2 id="一、计算机系统体系结构"><a href="#一、计算机系统体系结构" class="headerlink" title="一、计算机系统体系结构"></a>一、计算机系统体系结构</h2><h4 id="术语体系结构的三种用法"><a href="#术语体系结构的三种用法" class="headerlink" title="术语体系结构的三种用法"></a>术语体系结构的三种用法</h4><ul><li><strong>指令集体系结构（ISA）</strong></li></ul><p>​    描述了程序员看到的计算机的<strong>抽象视图</strong>，并且定义了汇编语言和编程模型。之所以说它是抽象的，是因为它并没有考虑计算机的实现。</p><ul><li><strong>微体系结构（具体实现）</strong></li></ul><p>​    描述了一种指令集体系结构的实现方式。微体系结构关注计算机的<strong>内部设计</strong>。</p><ul><li><strong>系统体系结构</strong></li></ul><p>​    关注包括处理器、存储器、总线和外设在内的整个系统。</p><table><thead><tr><th>计算机系统体系结构所涉及的内容</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220214213229435.png" alt="image-20220214213229435"></td></tr></tbody></table><h4 id="1-1-什么是计算机体系结构"><a href="#1-1-什么是计算机体系结构" class="headerlink" title="1.1  什么是计算机体系结构"></a>1.1  什么是计算机体系结构</h4><ul><li><p>计算机系统包括读取并执行程序的<strong>中央处理单元</strong>（Central processing unit,<strong>CPU</strong>），保存程序和数据的<strong>存储器</strong>，以及<strong>输入输出子系统</strong>，这些子系统会使CPU与显示器、打印机等外部设备之间的通信变得更加容易。</p></li><li><p>计算机中实际执行程序的部分叫做<strong>CPU</strong>，或者更简单地被称作<strong>处理器</strong>。<strong>微处理器</strong>则是在单个硅片上实现的CPU。围绕着微处理器构建的计算机被称作<strong>微机</strong>。</p></li><li><p>尽管CPU是计算机的核心，计算机的性能既取决于CPU，也取决于其他子系统的性能。如果不能高效进行数据传输，仅仅提高CPU的性能是毫无意义的。</p></li></ul><table><thead><tr><th>简单通用计算机结构</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220214214102652.png" alt="image-20220214214102652"></td></tr></tbody></table><h5 id="1-1-1-简单通用计算机结构"><a href="#1-1-1-简单通用计算机结构" class="headerlink" title="1.1.1 简单通用计算机结构"></a>1.1.1 简单通用计算机结构</h5><ul><li><p>信息（即<strong>程序和数据</strong>）保存在存储器中，为了实现不同的目标，计算机会使用不同类型的存储器，如Cache、主存、辅存等多个存储层次，大多数处理器都在CPU内集成了片上Cache。</p></li><li><p><strong>Cache</strong>是存放常用数据的高速、专用存储器。<strong>主存</strong>中存放了大量的工作数据。<strong>辅存</strong>是指磁盘和CD-ROM，能够存储海量数据。</p></li><li><p>组成计算机的各个子系统通过<strong>总线</strong>连接在一起，数据通过总线从计算机中的一个位置传递到另一个位置。</p></li></ul><ol><li>可编程计算机接收两种类型的输入：要处理的数据，以及要如何处理输入数据的程序。程序不过是计算机所执行的完成给定任务的操作序列。</li><li>数字计算机的结构，可以被分为两部分：中央处理单元和存储器系统。CPU读程序并完成程序指定的操作。存储器系统保存两类信息：程序，程序处理或产生的数据。</li><li>寄存器是CPU内部用来存放数据的存储单元。</li><li>时钟提供了脉冲流，所有内部操作都在时钟脉冲的触发下进行。时钟频率是决定计算机速度的一个因素。</li></ol><h5 id="1-1-2-程序执行的过程"><a href="#1-1-2-程序执行的过程" class="headerlink" title="1.1.2 程序执行的过程"></a>1.1.2 程序执行的过程</h5><table><thead><tr><th>描述了程序的执行过程：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215012150135.png" alt="image-20220215012150135"></td></tr></tbody></table><blockquote><p>从存储器中读出一条Z=X+Y的指令，将其发送给解释单元，解释单元产生控<br>制信号，驱动这条指令的执行。假定这个程序的功能是从存储器读出两个数<br>据（X和Y），将它们相加，然后写回存储器。</p><p>要执行这个程序，CPU必须首先从存储器中取出一条指令，在CPU分析或解码<br>这条指令后，从存储器中读出这条指令所需的所有数据。<br>第一条指令，LOAD X，从存储器中读出变量X的值，并将它暂存在寄存器中。<br>第二条指令，LOAD Y，从存储器中读出变量Y的值，并保存在另一个寄存器中。<br>第三条指令，Z=X+Y，将两个寄存器的内容相加，并将结果保存在第三个寄存<br>器中。<br>第四条指令，STORE Z，将加法的结果写回存储单元Z。</p></blockquote><h5 id="1-1-3-计算机指令"><a href="#1-1-3-计算机指令" class="headerlink" title="1.1.3 计算机指令"></a>1.1.3 计算机指令</h5><blockquote><p>尽管计算机能够执行上百种不同指令，但下面的**6条基本指令(汇编语言)**可以将所有计算<br>机指令进行分类：</p><p>MOV   A, B            将B的值复制到A<br>LOAD   A, B            将存储单元B的值复制到寄存器A中<br>STORE  A, B            将寄存器B的值复制到存储单元A中<br>ADD    A, B            A与B相加，结果保存到A中<br>TEST     A            测试A的值是否为0<br>BEQ    Z              若最后一次测试结果为TRUE，执行地址Z处的代码 ，                否则继续执行</p></blockquote><h4 id="1-2-体系结构和组成"><a href="#1-2-体系结构和组成" class="headerlink" title="1.2 体系结构和组成"></a>1.2 体系结构和组成</h4><h5 id="1-2-1-计算机体系结构"><a href="#1-2-1-计算机体系结构" class="headerlink" title="1.2.1 计算机体系结构"></a>1.2.1 计算机体系结构</h5><blockquote><p>计算机体系结构含有结构（structure）的意思，描述了一些与计算机组成方式<br>有关的内容。之所以定义计算机体系结构，是因为不同的用户会从完全不同<br>的角度看待计算机。计算机体系结构通常被认为是<strong>程序员视角中的计算机</strong>。<br>程序员所看到的是计算机的抽象视图，计算机的实际硬件和实现都被隐藏起<br>来了。这个抽象视图现在通常被称作<strong>指令集体系结构</strong>（instruction set<br>architecture，ISA）。</p></blockquote><h5 id="1-2-2-计算机组成"><a href="#1-2-2-计算机组成" class="headerlink" title="1.2.2 计算机组成"></a>1.2.2 计算机组成</h5><ul><li><p>计算机组成表示其体系结构的<strong>具体实现</strong>。计算机组成是计算机体系结构的实<br>例化（即将抽象变为具体）</p></li><li><p>本书用术语“体系结构”代表计算机的抽象指令集体系结构（它的指令集），<br>用术语“组成”代表计算机的实际硬件实现。</p></li></ul><h5 id="1-2-3-寄存器"><a href="#1-2-3-寄存器" class="headerlink" title="1.2.3  寄存器"></a>1.2.3  寄存器</h5><ul><li><p>寄存器是用来<strong>存放一个单位的数据</strong>或<strong>字数据的存储单元</strong>。寄存器通常用它所<br>保存数据的位数来描述，典型的有8位、16位、32位和64位。</p></li><li><p>寄存器与存储器中的字存储单元没有本质区别。二者的实际差别在于，寄存<br>器<strong>位于CPU内</strong>，它的<strong>访问速度</strong>远远快于访问CPU外的存储器。</p></li></ul><h5 id="1-2-4-机器码-amp-汇编语言-amp-高级语言"><a href="#1-2-4-机器码-amp-汇编语言-amp-高级语言" class="headerlink" title="1.2.4 机器码&amp;汇编语言&amp;高级语言"></a>1.2.4 机器码&amp;汇编语言&amp;高级语言</h5><ul><li><p>计算机上执行的代码表示为二进制0和1组成的串，被称作<strong>机器码</strong>。每种计算<br>机都只能执行一种特定的机器码。</p></li><li><p>人类可读的机器码（如ADD R0,R1）叫作汇编语言。</p></li><li><p>能够在类型完全不同的计算机上运行，与底层计算机体系结构几乎没有关系<br>的代码叫做<strong>高级语言</strong>（如C或Java等）。在执行之前，高级语言程序必须先被<br>编译为计算机的本地机器码。</p></li></ul><h5 id="1-2-5-时钟"><a href="#1-2-5-时钟" class="headerlink" title="1.2.5 时钟"></a>1.2.5 时钟</h5><blockquote><p>绝大多数数字电子电路都带有一个时钟，用以生成连续的间隔固定的<strong>电脉冲</strong><br><strong>流</strong>。之所以被称作<strong>时钟</strong>，是因为可用这些电脉冲来计时或确定计算机内所有<br>事件的顺序。如，处理器可能会在每一个时钟脉冲到来时执行一条新指令。</p></blockquote><h5 id="1-2-6-RISC和CISC"><a href="#1-2-6-RISC和CISC" class="headerlink" title="1.2.6 RISC和CISC"></a>1.2.6 RISC和CISC</h5><p>RISC（精简指令集计算机）体系结构（ARM）</p><ul><li>设计策略：是使用<strong>少量</strong>的指令完成最少的简单操作</li><li>缺点：程序设计<strong>更难</strong>，复杂指令需要用简单指令模拟</li><li>应用：ARM处理器</li></ul><p>CISC（复杂指令集计算机）体系结构</p><ul><li>设计策略：是使用<strong>大量</strong>的指令，包括复杂指令</li><li>优点：程序设计<strong>更容易</strong>，因为每个简单的或复杂的任务都有一条对应的指令。程序员不需要写一大堆的指令去完成复杂的任务</li><li>缺点：指令集的复杂性使得CPU和控制单元<strong>电路非常复杂</strong></li><li>应用：英特尔公司开发的奔腾系列CPU</li></ul><h4 id="1-3-计算机的发展"><a href="#1-3-计算机的发展" class="headerlink" title="1.3 计算机的发展"></a>1.3 计算机的发展</h4><blockquote><p>机械计算机 -&gt;  机电式计算机 -&gt; 早期的电子计算机 -&gt; 微机和PC革命</p></blockquote><h5 id="1-3-1-摩尔定律和进步的历程"><a href="#1-3-1-摩尔定律和进步的历程" class="headerlink" title="1.3.1 摩尔定律和进步的历程"></a>1.3.1 摩尔定律和进步的历程</h5><ul><li>摩尔定律</li></ul><p>​    是卡沃-米德于1975年根据戈登-摩尔所观察到集成电路的集成度每<strong>18个月翻一番</strong>，摩尔定律是一个<strong>经验性</strong>的观察结果。</p><h5 id="1-3-2-乱序执行"><a href="#1-3-2-乱序执行" class="headerlink" title="1.3.2 乱序执行"></a>1.3.2 乱序执行</h5><ul><li>程序中的指令必须一条接一条按照在程序中的出现的<strong>顺序执行</strong>。</li></ul><p><img src="/posts/computermanage/image-20220215143620082.png" alt="image-20220215143620082"></p><p>有时可以通过<strong>改变指令的执行顺序</strong>提高计算机的速度。图中，指令（4）和（5）可以在任何时候执行，但指令（3）必须在指令（1）和（2）结束后执行。</p><h5 id="1-3-3-存储技术发展"><a href="#1-3-3-存储技术发展" class="headerlink" title="1.3.3 存储技术发展"></a>1.3.3 存储技术发展</h5><blockquote><p>覆盖着电容的旋转的磁鼓 -&gt; 阴极射线管 -&gt;铁氧体磁芯存储器 -&gt;磁盘 -&gt; 光存储器（DVD等）</p></blockquote><h5 id="1-3-4-多媒体计算机"><a href="#1-3-4-多媒体计算机" class="headerlink" title="1.3.4 多媒体计算机"></a>1.3.4 多媒体计算机</h5><p>多媒体处理（处理和存储音频/视频数据）需要很大的存储容量以及完成大量简单重复操作的实时处理声音样本的图像像素的能力。</p><h4 id="1-4-存储程序计算机"><a href="#1-4-存储程序计算机" class="headerlink" title="1.4 存储程序计算机"></a>1.4 存储程序计算机</h4><h5 id="1-4-1-最大游程问题描述"><a href="#1-4-1-最大游程问题描述" class="headerlink" title="1.4.1 最大游程问题描述"></a>1.4.1 最大游程问题描述</h5><blockquote><p>​    十进制数串23277366664792221，其中有一些<strong>值相同的数字连续出现</strong>（如连续的2个7,4个6和3个2），我们的问题十分简单：找出<strong>最大游程</strong>，即同一个数字连续出现的最大次数。</p><p>​    为了简化问题，假设数串长度大于3。我们将设计一个计算机来处理图中的数串，它每次读一个数，并计算最大游程。</p></blockquote><p> <strong>解决方法</strong>：</p><p>​    从数串的左边开始逐个检查数字，在任何一个位置，都会得到两个结果之一：要么这个数与前一个相同，序列还在增长；要么这个数与上一个不同，前一个序列结束，一个新的序列开始。</p><p><img src="/posts/computermanage/image-20220215145729974.png" alt="image-20220215145729974"></p><p>对于一个数字系统，当一个特定事件（如时钟脉冲）发生时，它将从一个状态转换为另外一个状态。</p><p>图中有两个状态，分别是“在同一序列中”和“不在同一序列中”，每当从数串中读出一个新元素，都会发生<strong>状态转换</strong>。</p><table><thead><tr><th>一、如图，列出一个接一个读入数串的数字后系统状态的转换情况，状态的改变会发生在序列的第二个数字或结束序列的那个数字上。</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215150612778.png" alt="image-20220215150612778"></td></tr></tbody></table><table><thead><tr><th>二、如表，将这些数字组织成更容易理解的形式。最上面一行是每个数字在数串S中的位置或地址，下一行是串S中这个数字的值。第三行第一个元素是？，因为上一个元素的值是未知的。第四行统计数串中每个元素所在序列的长度,数字本身长度为1，如果相同则+1</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215151137137.png" alt="image-20220215151137137"></td></tr></tbody></table><blockquote><table><thead><tr><th>统计数串中最大序列长度</th></tr></thead><tbody><tr><td>为了方便，通过下面的符号名说明问题：</td></tr></tbody></table><pre><code>i                     串的当前位置New_Digit                 刚从数串中读出的数字的值Current_Run_Value         当前序列数值Current_Run_Length    当前序列长度Max_Run            目前为止的最大序列长度 |</code></pre><p>使用伪代码描述问题的操作：</p><ol><li>   读出串的第一个数字，将其称为New_Digit</li><li>   将Current_Run_Value的值置为New_Digit</li><li>   将Current_Run_Length的值置为1</li><li>   将Max_Run的值置为1</li><li>   REPEAT</li><li>   读出序列中下一个数字（即read New_Digit）</li><li>   IF 它的值与Current_Run_Value相同</li><li><pre><code>           THEN Current_Run_Length = Current_Run_Length + 1</code></pre></li><li><pre><code>           ELSE { Current_Run_Length = 1</code></pre></li><li><pre><code>                      Current_Run_Value = New_Digit }</code></pre></li><li>   IF Current_Run_Length &gt; Max_Run</li><li><pre><code>           THEN Max_Run = Current_Run_Length</code></pre></li><li>   UNTIL 读出了最后一个数字    </li></ol></blockquote><p><img src="/posts/computermanage/image-20220215152559359.png" alt="image-20220215152559359"></p><h5 id="1-4-2-存储器"><a href="#1-4-2-存储器" class="headerlink" title="1.4.2 存储器"></a>1.4.2 存储器</h5><table><thead><tr><th>如图，描述了程序怎样找出保存在一个假象存储器中的数串的最大序列长度。必须强调的是，这个程序是概念上的而不是实际的。该图叫作存储器映射，展示了信息在存储器中的存放位置，存储器中的每个位置要么保存指令，要么保存数据元素。</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215152818855.png" alt="image-20220215152818855"></td></tr></tbody></table><h5 id="1-4-3-寄存器传输语言"><a href="#1-4-3-寄存器传输语言" class="headerlink" title="1.4.3 寄存器传输语言"></a>1.4.3 寄存器传输语言</h5><ul><li>由于使用文字描述计算机的操作很不方便，使用<strong>RTL</strong>可以更加容易地定义计算机内发生的操作。</li></ul><blockquote><p>区分存储单元的地址和它的内容非常重要。<br>在RTL语言中，用方括号[ ]表示存储单元的内容，如<br>    [15] = Max_Run<br>    含义是：地址为15的存储单元保存了变量Max_Run的值<br>    左箭头符号表示数据传送操作，如<br>        [15]&lt;–[15] + 1<br>    含义是：将地址为15的存储单元的值加1，并将结果写回地址为15的存储单元<br>考虑下面3个RTL表达式：<br>[20] = 5<br>[20]&lt;–6<br>[20]&lt;–[6]</p></blockquote><h5 id="1-4-4-存储系统"><a href="#1-4-4-存储系统" class="headerlink" title="1.4.4 存储系统"></a>1.4.4 存储系统</h5><table><thead><tr><th>如图，描述了存储系统的组成</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215153800729-16449106820491.png" alt="image-20220215153800729"></td></tr></tbody></table><blockquote><p>处理器将一个放在地址总线上的地址以及一个用于选择读操作或写操作（也被称为读或写周期）的控制信号发送给存储器。</p><p>在读周期中，存储器将数据放在数据总线上供CPU读取。</p><p>写周期中，放在数据总线上的数据被写入存储器。</p><p>信息进入或离开存储器的位置叫作端口。 </p></blockquote><h5 id="1-4-5-存储程序的概念"><a href="#1-4-5-存储程序的概念" class="headerlink" title="1.4.5 存储程序的概念"></a>1.4.5 存储程序的概念</h5><blockquote><p>下面的伪代码描述了存储程序计算机的基本操作：</p><p>存储程序计算机<br>    程序计数器指向存储器中的第一条指令<br>    REPEAT<br>        从程序计数器所指的存储单元中读出指令<br>        修改程序计数器，使之指向下一条指令<br>        将从存储器中取出的指令解码<br>        执行指令<br>    FOREVER<br>End</p></blockquote><blockquote><p>从存储器中取出每条指令都需要进行一次访存操作（即读存储器）。<br>可以用下面的伪代码描述“<strong>执行指令</strong>”这一动作：</p><p>​    执行指令<br>​        IF 指令需要使用数据<br>​            THEN 从存储器中读这个数<br>​        END_IF<br>​        完成指令定义的操作<br>​        IF 指令要将数据写回存储器<br>​            THEN 将数据写回存储器<br>​        END_IF<br>​    End</p></blockquote><table><thead><tr><th>上面的动作序列用C语言描述：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215155754359-16449118765602.png" alt="image-20220215155754359"></td></tr><tr><td>执行一条指令需要至少两次访存，第一次访存是<strong>读取指令</strong>，第二次访存要</td></tr><tr><td>么从存储器读出指令需要的数据，要么将它之前的指令产生的或修改过的</td></tr><tr><td>数据<strong>写回存储器</strong>。</td></tr></tbody></table><h5 id="1-4-6-指令格式"><a href="#1-4-6-指令格式" class="headerlink" title="1.4.6 指令格式"></a>1.4.6 指令格式</h5><blockquote><p>存储程序计算机的一种直观合理的指令格式可以用下面的形式表示：</p><p><img src="/posts/computermanage/image-20220215160116797.png" alt="image-20220215160116797"></p><p>Operation表示要执行的指令的动作<br>Address1、Address2和Address3分别是3个操作数在存储器中的位置。在这条指令中，操作数为数据的地址，而不是数据本身。</p><p>ADD P,Q,R是一条典型的三操作数指令，P、Q、R是三个存储单元地址的符号名。<br>这个三操作数指令格式用RTL表示为：</p><p><img src="/posts/computermanage/image-20220215160425772-16449122698713.png" alt="image-20220215160425772"></p></blockquote><table><thead><tr><th>如图，描述了一条指令的执行过程，一共需要4次访存（即一次取指令，两次取两个源操作数，一次保存结果）</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215160508016.png" alt="image-20220215160508016"></td></tr></tbody></table><table><thead><tr><th>如图，描述了指令的4个字段与CPU、存储器以及指令的执行方式之间的关系：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215160527273.png" alt="image-20220215160527273"></td></tr></tbody></table><h5 id="1-4-7-两地址指令"><a href="#1-4-7-两地址指令" class="headerlink" title="1.4.7 两地址指令"></a>1.4.7 两地址指令</h5><ul><li>有些计算机实现了两地址指令，其格式为：</li></ul><p><img src="/posts/computermanage/image-20220215160825810.png" alt="image-20220215160825810"></p><p>Address2为源操作数，Address1既是源操作数也是目的操作数。</p><ul><li>指令ADD P,Q的RTL定义为：</li></ul><p><img src="/posts/computermanage/image-20220215160840322.png" alt="image-20220215160840322"></p><ul><li>两地址指令会<strong>破坏</strong>它的一个操作数，也就是说，会用结果替换源操作数P，本书大部分章节约定两地址指令格式为：</li></ul><p><img src="/posts/computermanage/image-20220215161217301.png" alt="image-20220215161217301"></p><ul><li>在实际计算机中，一般不允许同一条指令中使用两个存储地址，大多数计算机都规定一个地址是存储器地址，另一个地址是寄存器。</li></ul><h5 id="1-4-8-单地址指令"><a href="#1-4-8-单地址指令" class="headerlink" title="1.4.8 单地址指令"></a>1.4.8 单地址指令</h5><p>有些计算机实现单地址指令，其格式为：</p><img src="/posts/computermanage/computermanage/image-20220215161749613.png" class="" title="image-20220215161749613"><p>指令中只提供了一个操作数地址，而指令却需要至少两个地址，处理器不得<br>不使用一个不需要显示地址的第二操作数，第二个操作数来自CPU内一个叫<strong>累<br>加器</strong>（accumulator）的寄存器。</p><table><thead><tr><th>如图，描述了一条单操作数指令执行过程中的信息流，操作结果将一直保存在寄存器中，直到另一条指令将它送入存储器。实现P = Q + R：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215162618255.png" alt="image-20220215162618255"></td></tr></tbody></table><h5 id="1-4-9-计算机分类"><a href="#1-4-9-计算机分类" class="headerlink" title="1.4.9 计算机分类"></a>1.4.9 计算机分类</h5><p>可以按照计算机的<strong>指令处理数据的方式</strong>对计算机分类</p><ul><li><p><strong>存储器-存储器型</strong>：一条指令能够从存储器中读出源操作数，对数据完成某个操作，并将结果保存在存储器中</p></li><li><p><strong>寄存器-存储器型</strong>：能够处理两个数据，其中一个位于存储器中，另一个位于寄存器中，结果要么被写回存储器，要么被写回寄存器，如Intel IA32 CPU体系结构</p></li><li><p><strong>寄存器-寄存器型</strong>：只能对寄存器中的内容进行操作，这些计算机必须通过<strong>LOAD指令</strong>将数据读入寄存器并使用<strong>STORE指令</strong>将数据从寄存器送回存储器。由于LOAD 和STORE操作是仅有的存储器访问指令，这些计算机也被称为<strong>load/store 型</strong>计算机，如ARM和MIPS CPU体系结构</p></li></ul><h4 id="1-6-计算机系统概览"><a href="#1-6-计算机系统概览" class="headerlink" title="1.6 计算机系统概览"></a>1.6 计算机系统概览</h4><h5 id="1-6-1存储层次"><a href="#1-6-1存储层次" class="headerlink" title="1.6.1存储层次"></a>1.6.1存储层次</h5><p>由于CPU与存储器的性能之间的差距不断加大，通过在使用数据之前将它们从存储器中取出来消除相对慢速的存储器的影响，以降低延迟。</p><table><thead><tr><th>如图，描述了经典的存储层次图，展示了计算机中存储部件的类型、速度以及在PC机中的典型容量：</th></tr></thead><tbody><tr><td>寄存器：存放处理器的工作数据</td></tr><tr><td>Cache：缓存常用数据的快速存储器</td></tr><tr><td>(内存)DRAM：存放工作数据</td></tr><tr><td>硬盘：保存程序和数据，</td></tr><tr><td>注意，硬盘的容量是寄存器</td></tr><tr><td>的4000万倍，但速度却比寄存器</td></tr><tr><td>慢2000万倍！</td></tr><tr><td><img src="/posts/computermanage/image-20220215164508718.png" alt="image-20220215164508718"></td></tr></tbody></table><h5 id="1-6-2-Cache高速缓存"><a href="#1-6-2-Cache高速缓存" class="headerlink" title="1.6.2 Cache高速缓存"></a>1.6.2 Cache高速缓存</h5><ul><li>经常被用到的数据保存在Cache中，Cache的访问时间比主存短得多。Cache保存主存中经常使用的数据的副本。Cache系统与计算机的地址总线和数据总线相连，监听CPU与存储器之间的事务。</li><li>只要Cache注意到CPU发出的地址与它保存的某个数据元素地址相同，就把这个数据发送个CPU，而不会去主存中取数据。</li><li>一级缓存（集成在CPU中）&amp;二级缓存&amp;三级缓存</li></ul><h5 id="1-6-3-DRAM"><a href="#1-6-3-DRAM" class="headerlink" title="1.6.3 DRAM"></a>1.6.3 DRAM</h5><blockquote><p>存放正在执行的程序的<strong>主存</strong>，是由一种叫作<strong>动态随机访问存储器</strong>（Dynamic Random Access Memory,DRAM）的<strong>易失性</strong>半导体存储器构成的立即存取存储器。</p></blockquote><h5 id="1-6-4-总线"><a href="#1-6-4-总线" class="headerlink" title="1.6.4 总线"></a>1.6.4 总线</h5><blockquote><p>总线将计算机的两个或多个功能单元连接在一起并允许它 们相互交换数据。总线还将计算机与外设连接在一起。</p></blockquote><table><thead><tr><th>如图，描述了一个没有总线的假象系统的结构，节点之间的互连复杂并且凌乱，若要添加一个新单元，必须在新单元与它所连接的每个单元之间增加一条新连接：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215170516984.png" alt="image-20220215170516984"></td></tr></tbody></table><p>| 如图，展示了通过公共总线将所有单元连接在一起的好处，此时只有一条高速数据通路，每<br>个单元通过一个接口与这条通路相连： |<br>| ———————————————————— |<br>| <img src="/posts/computermanage/image-20220215170532317.png" alt="image-20220215170532317"> |<br>| 缺点：每次只有<strong>唯一</strong>一个设备能够与其它设备通信，因为这里只有一条信息通路。如果两个<br>设备同时请求使用总线，它们不得不去<strong>竞争总线的控制权</strong>。用术语仲裁来描述多个设备竞争<br>同一资源的过程。 |</p><p><strong>总线术语</strong></p><ul><li>宽度</li></ul><p>一般用<strong>并行数据通路的数量</strong>来定义总线的宽度。一条64位宽的总线一次能传送64位（8个字节）信息。</p><ul><li>带宽</li></ul><p>总线带宽是衡量信息在总线上的<strong>传输速率</strong>的一项指标。带宽的单位要么是B/s，要么b/s。在保持数据传输率不变的情况下增加总线宽度，可以提高带宽。</p><ul><li>延迟</li></ul><p>延迟是从发出数据传输请求到实际数据传输的时间间隔。总线延迟通常包括传输开始之前进行总线仲裁的时间。</p><p><strong>多总线系统</strong></p><p>| 现代计算机中有多条总线，包括片内总线、功能单元间（如CPU和存储器<br>间）的总线以及总线间的总线，如图描述了一个多总线系统：                                             （1）多总线运行并发操作<br>（2）总线可能具有完全不同的特点和操作速度 |<br>| ———————————————————— |<br>| <img src="/posts/computermanage/image-20220215171202918.png" alt="image-20220215171202918"> |</p><h2 id="二、计算机算术"><a href="#二、计算机算术" class="headerlink" title="二、计算机算术"></a>二、计算机算术</h2><h4 id="2-1-数据是什么"><a href="#2-1-数据是什么" class="headerlink" title="2.1 数据是什么"></a>2.1 数据是什么</h4><blockquote><p>数据是各种各样的信息，如数字、文本、计算机程序、音乐、图像、符号等等，实际上，信息可以是能够被计算机存储和处理的任何事物。</p></blockquote><h5 id="2-1-1-位与字节"><a href="#2-1-1-位与字节" class="headerlink" title="2.1.1 位与字节"></a>2.1.1 位与字节</h5><blockquote><p>计算机中存储和处理信息的最小单位是<strong>位</strong>（Binary digit比特，<strong>bit</strong>），一个比特的值可以是0或1。</p><p>数字计算机将信息以一组或一串比特（称作<strong>字</strong>）的形式保存在存储器中。如，串01011110表示一个8位的字。</p><p>计算机通过<strong>高低电压</strong>（高低电位）两个电压等级来存储0和1的状态。</p><p>计算机通常不会每次只对一个二进制位进行操作，而是对一组二进制位进行操作。<br>8个二进制位为一个<strong>字节（byte）</strong>，一些计算机制造商用术语“字”表示16位的值，长字表示32位的值，还有一些制造商用字表示32位的值，用半字表示16位的值。</p></blockquote><h5 id="2-1-2-位模式"><a href="#2-1-2-位模式" class="headerlink" title="2.1.2 位模式"></a>2.1.2 位模式</h5><p>| 下图描述了如何用1位、2位、3位和4位得到一个<br>二进制的值序列：   |<br>| ———————————————————— |<br>| <img src="/posts/computermanage/image-20220215180220095.png" alt="image-20220215180220095"> |<br>| 每当数字增加1位，路径的总数将翻一倍。一个n位的字将得到2n条不同路径或位模式。如，一个8位的字节将得到28=256个可能的值。</p><p>为了用二进制数表示任何一个拥有最多n个值的量，应找到一个使不等式n&lt;=2m成立的最小位数m。 |</p><h6 id="2-1-2-1-位模式——信息表示"><a href="#2-1-2-1-位模式——信息表示" class="headerlink" title="2.1.2.1 位模式——信息表示"></a>2.1.2.1 位模式——信息表示</h6><blockquote><p>一个n位的二进制可以表示什么信息呢？</p><p>答案是什么也表示不了。因为一个由二进制1和0组成的串没有任何内在含义。需要程序员赋予它何种含义。</p></blockquote><blockquote><p>一个二进制串可以表示的对象有：</p><ul><li><p>指令<br>字长为32位或更长的计算机用一个字来表示CPU能够完成的操作（8位或16位计算机用多个字表示一条指令）。指令的二进制编码与其功能之间的关系由计算机设计者决定。如，一台计算机上表示“A加B”的二进制序列可能与另一台计算机上的完全不同。</p></li><li><p>数量<br>一个字或多个字都可以用来表示数量。数可以被表示为多种格式，如有符号、无符号二进制整数、二进制浮点数、整数复数等等。</p></li><li><p>字符</p><p>字符是一个叫作“字母表”的集合中元素。拉丁或罗马字母表中的字母、数字字符（A-Z，a-z，0-9）和*、-、+、？等符号都被分配了二进制值，因此可以在计算机内存储和处理。</p></li></ul></blockquote><table><thead><tr><th>下图为ASCII码表（美国信息交换标准码表）：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215182129677.png" alt="image-20220215182129677"></td></tr></tbody></table><blockquote><ul><li>ASCII码表用<strong>7位</strong>表示一个字符，一共可以表示<strong>2^7=128</strong>个不同的字符。其中96个字符是<strong>可打印字符</strong>。其余32个是<strong>不可打印字符</strong>，用于完成回车、退格、换行等特殊功能。</li><li><strong>扩展的ASCII码表：8位</strong>的ISO 8859-1拉丁编码。将7位的ISO/ASCII字符集扩展为8位，可以得到两个128个字符的字符集，如果字符的<strong>最高位为0,**则其余7位代表128个标准ISO/ASCII字符中的一个，如果字符</strong>最高位为1**，其余7位将表示128个新字符中的任意一个。</li></ul></blockquote><blockquote><ul><li><p>图像、声音和视觉</p><p>数字计算机处理大量表示声音、静态图像和视频的数据。</p><p>组成照片的基本单位是像素，每个像素的大小可以是8位（单色）或24位（三<br>基）。</p><p>视频作为一串静态图像依次传输，每秒发送60次。</p><p>声音通过对波形信号采样。</p><p>无损压缩和有损压缩。</p></li></ul></blockquote><h4 id="2-2-数字"><a href="#2-2-数字" class="headerlink" title="2.2 数字"></a>2.2 数字</h4><blockquote><p>用来计数的数字（即1,2,3,4…）被称作自然数。我们用十进制计数，因为它<br>有0~9共10个符号。并非所有数字都是自然数，还有负数、实数等</p><p>现代数字系统中，使用位置记数法表示十进制数，每个数位的值或权取决于<br>它在数字中的位置。</p></blockquote><h5 id="2-2-1-位置记数法"><a href="#2-2-1-位置记数法" class="headerlink" title="2.2.1 位置记数法"></a>2.2.1 位置记数法</h5><table><thead><tr><th>按照位置记数法，一个n位的整数N的形式表示：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215182345261.png" alt="image-20220215182345261"></td></tr><tr><td>用小数点将整数部分和小数部分分开，可以对位置记数法进行扩展，使其能</td></tr><tr><td>表示实数。</td></tr></tbody></table><p>一个用基数b的位置记数法表示的数的值被定义为： |<br>| <img src="/posts/computermanage/image-20220215182355785.png" alt="image-20220215182355785"> |</p><blockquote><p>采用位置记数法，一个数的数值等于它各位值的总和，而每一位的值则是该<br>位的数值乘以它在数中的位置所对应的权。</p><p>如：<br>十进制数1982 = 1 x 103  +  9 x 102  +  8 x 101  + 2 x 100<br>二进制数10110.11 = 1x24  +  0x23  +  1x22  +  1x21  +  0x20  +  1x2-1  +  1x2-2</p></blockquote><p><img src="/posts/computermanage/image-20220215182414642.png" alt="image-20220215182414642"></p><ul><li>注意：十进制位置记数法不能精确表示所有小数，如1/3是0.3333333…33，二<br>进制也是如此，如0.110 不能被精确转换为二进制形式。</li></ul><h4 id="2-3-二进制运算"><a href="#2-3-二进制运算" class="headerlink" title="2.3 二进制运算"></a>2.3 二进制运算</h4><p>| 二进制算术运算规则与十进制基本相同，区别是基数不同。</p><p>下面列出了二进制加、减、乘法运算的规则： |<br>| ———————————————————— |<br>| <img src="/posts/computermanage/image-20220215182451924.png" alt="image-20220215182451924"> |<br>| 两个位相加可能产生进位或借位，和十进制运算规则相同。         |</p><table><thead><tr><th>下面是4个8位二进制数相加的例子：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215182535210.png" alt="image-20220215182535210"></td></tr><tr><td>当两个二进制数相减时，会从左侧借一位，如：</td></tr><tr><td><img src="/posts/computermanage/image-20220215182544290.png" alt="image-20220215182544290"></td></tr><tr><td>下面描述了011010012（乘数）与010010012（被乘数）相乘的过程，两个n位</td></tr><tr><td>字相乘将产生一个2n位的积：</td></tr><tr><td><img src="/posts/computermanage/image-20220215182552665.png" alt="image-20220215182552665"></td></tr><tr><td>但是计算机并没有按照这种方式进行计算。</td></tr></tbody></table><h4 id="2-4-有符号整数"><a href="#2-4-有符号整数" class="headerlink" title="2.4 有符号整数"></a>2.4 有符号整数</h4><blockquote><p>负数可以用多种不同的方式表示，计算机设计者选择了3种方法：<strong>符号及值</strong>表<br>示法、<strong>二进制补码</strong>表示法、<strong>移码</strong>表示法，每种方法都有各自的优缺点。</p></blockquote><h5 id="2-4-1-符号及值表示法"><a href="#2-4-1-符号及值表示法" class="headerlink" title="2.4.1 符号及值表示法"></a>2.4.1 符号及值表示法</h5><p>| 一个n位字可以表示从0~2n-1共2n个可能的值。如，一个8位的字可以表示0,1，…，254,255。<br>表示负数的方法是用它的最高位表示符号，通常符号位为0表示正数，符号位为1表示负数。</p><p>下面两个8位有符号二进制00001101和10001101的值为： |<br>| ———————————————————— |<br>| <img src="/posts/computermanage/image-20220215182649756.png" alt="image-20220215182649756"> |</p><blockquote><p>n位有符号的表示范围为-(2n-1-1) ~ +(2n-1-1)。一个8位有符号数的表示-127<br>（11111111）~ +127（01111111）之间的整数。</p><p>有人反对该系统的一个原因是它有<strong>两个值都表示0</strong>：<br>00000000 = +0 和 10000000 = -0</p><p>符号及值表示法<strong>没有被用于整数算术运算</strong>中，因为它的加、减法运行需要分<br>别用加法器和减法器实现。符号及值表示法<strong>用于浮点算术运算</strong>中。</p></blockquote><h5 id="2-4-2-二进制补码运算"><a href="#2-4-2-二进制补码运算" class="headerlink" title="2.4.2  二进制补码运算"></a>2.4.2  二进制补码运算</h5><blockquote><p>微处理器用二进制补码系统表示有符号整数，它可以<strong>将减法运算转换为对减</strong><br><strong>数的补码的加法运算。</strong></p></blockquote><h6 id="2-4-2-1-补码算术运算"><a href="#2-4-2-1-补码算术运算" class="headerlink" title="2.4.2.1 补码算术运算"></a>2.4.2.1 <strong>补码算术运算</strong></h6><blockquote><p>一个数与它的补码之和是一个<strong>常数</strong>。如，一个一位十进制数与它的补码之和<br>总是9。2的补码是7，因为2+7=9。在n位二进制算术中，数P的补码为Q且<br><strong>P+Q=2n</strong>。</p><p>在二进制算术中，求一个数的补码的方法是将其<strong>各位取反并加1</strong>。<br>如：01100101的补码为10011010+1=10011011。</p><p><strong>一个n位二进制数N的二进制补码定义为2n-N</strong>。如果N=5=00000101（8位二进制<br>数），则N的补码为28-00000101=100000000-00000101=11111011</p><p>下面说明了8位二进制数的补码运算过程，将4个数+5、-5、+7、-7转换为补码：</p><p><img src="/posts/computermanage/image-20220215182912062.png" alt="image-20220215182912062"></p><p>将7与5的补码相加：</p><p><img src="/posts/computermanage/image-20220215182929210.png" alt="image-20220215182929210"></p><p>结果为9位二进制数100000010。如果<strong>忽略最左边一位</strong>（进位位），结果为<br>000000102=+2，正是希望得到的结果。</p><p>将-7加5：</p><p><img src="/posts/computermanage/image-20220215182950873.png" alt="image-20220215182950873"></p><p>结果为11111110（进位位为0）。也是希望得到的结果-2，即28-2=100000000-<br>00000010=11111110</p><p>n位二进制算术运算Z=X-Y，用X加上Y的补码完成运算：Y的补码为2n-Y，则<br>Z=X+(2n-Y)=2n+(X-Y)。我们得到了需要的结果，X-Y，以及位于最左边的一个并<br>不需要的进位（即2n），而这个<strong>进位被丢弃</strong>了。</p><p>一个数<strong>两次求补码</strong>得到该数本身。如-5=28-00000101=11111011。<br>即-x=2n-x且-(-x)=2n-(2n-x)=x。</p><p>考虑下面加法实例：</p><p><img src="/posts/computermanage/image-20220215183027003.png" alt="image-20220215183027003"></p></blockquote><h6 id="2-4-2-2-求补运算"><a href="#2-4-2-2-求补运算" class="headerlink" title="2.4.2.2  求补运算"></a>2.4.2.2  求补运算</h6><ul><li><strong>求补运算——为什么是取反加1</strong></li></ul><blockquote><p>一个n位的二进制数N的补码，被定义为2n-N，则</p><p><img src="/posts/computermanage/image-20220215183137849.png" alt="image-20220215183137849"></p><p>如，8位（n=8）时有：</p><p><img src="/posts/computermanage/image-20220215183145666.png" alt="image-20220215183145666"></p><p>表达式11111111-N的值很容易计算，对N的第i位ni，若ni=0，则1-0=1，若ni=1，<br>则1-1=0。显然：</p><p><img src="/posts/computermanage/image-20220215183155010.png" alt="image-20220215183155010"></p><p>所以计算N的补码就是将N的每一位取反加1。</p><p>下面的5位二进制数有：</p><p><img src="/posts/computermanage/image-20220215183209960.png" alt="image-20220215183209960"></p><p>这种求补码的方法的优点在于它很适合硬件实现。</p></blockquote><h6 id="2-4-2-3-补码的特点"><a href="#2-4-2-3-补码的特点" class="headerlink" title="2.4.2.3 补码的特点"></a>2.4.2.3 补码的特点</h6><blockquote><p>1）补码是一个真正的互补系统，因为+X+(-X)=0<br>2）补码0被表示为00…0，是唯一的<br>3）补码的<strong>最高位为符号位</strong>。如果符号位为0，则该数为正，符号位为1，则该<br>数为负<br>4）n位二进制补码数的表示范围为-2n-1<del>2n-1-1。对于n=8，补码范围为<br>-128</del>127<br>5）补码加法和减法使用同样的硬件完成，因为补码减法由被减数的补码实现</p></blockquote><h6 id="2-4-2-4-运算溢出"><a href="#2-4-2-4-运算溢出" class="headerlink" title="2.4.2.4 运算溢出"></a>2.4.2.4 运算溢出</h6><blockquote><p>N位二进制补码的表示范围为-2n-1~2n-1-1。</p><p>5位有符号二进制补码范围为-16~+15，考虑下面例子：</p><p><img src="/posts/computermanage/image-20220215183259233.png" alt="image-20220215183259233"></p><p>如果两个负数相加且结果小于-16，会超出5位二进制补码的范围，如：</p><p><img src="/posts/computermanage/image-20220215183309618.png" alt="image-20220215183309618"></p><p>如果操作数A和B的符号位相同，但结果的符号位与它们不同，则发生<strong>溢出</strong>。</p></blockquote><h4 id="2-5乘除法简介"><a href="#2-5乘除法简介" class="headerlink" title="2.5乘除法简介"></a>2.5乘除法简介</h4><blockquote><p>除了加减法，计算机还必须实现乘法和除法。这两个操作比加减法复杂得多，<br>所需的完成时间也长得多（或需要更复杂的硬件）。这里仅介绍乘法和除法<br>的基本知识。</p></blockquote><h5 id="2-5-1-移位运算"><a href="#2-5-1-移位运算" class="headerlink" title="2.5.1 移位运算"></a>2.5.1 移位运算</h5><blockquote><p>首先介绍二进制补码的算术移位运算。</p><p>进行移位运算时，一个数的所有位都会向左或向右移动一位，如将00101100<br>左移一位，变为01011000，右移一位，变为00010110。有些计算机每次可以<br>移动多位。</p><p>二进制补码正数<strong>左移一位</strong>等价于该数乘2。如，十进制数39的二进制位<br>00100111，左移一位得到01001110，对应于十进制数78。</p><p>下图描述了算术移位的过程：</p><p><img src="/posts/computermanage/image-20220215183452624.png" alt="image-20220215183452624"></p><p>a）<strong>算术左移</strong>：最低位补0，最高位被复制到进位标志中，如11000101左移一<br>位得到10001010<br>b）<strong>算术右移</strong>：最高位补符号位，所有位右移一位。最低位复制到<strong>进位标志</strong>中。<br>如00100101右移一位得到00010010。11100101右移一位得到11110010。</p><p>二进制数<strong>右移一位</strong>相当于它<strong>除以2</strong>。如00001100（即1210）右移一位得到<br>00000110（即610），注意00001101（即1310）右移一位得到00000110（即<br>610），因为移出的最低位被丢弃了。</p><p>考虑负数右移，11100010（即-30），右移一位得到11110001（即-15）。</p></blockquote><h5 id="2-5-2-无符号二进制乘法"><a href="#2-5-2-无符号二进制乘法" class="headerlink" title="2.5.2 无符号二进制乘法"></a>2.5.2 无符号二进制乘法</h5><blockquote><p>计算机从乘数的最低位开始，每次检查一位，判断它是否为0，如果乘数的当<br>前位为1则写下被乘数，若该位为0则写下n个0。接下来检查乘数的下一位，这<br>时应从上一位数的左边一位开始写下被乘数或0。被写下的这一组数叫作<strong>部分</strong><br><strong>积</strong>。得到所有的部分积后，加到一起，得到乘法结果：</p><p><img src="/posts/computermanage/image-20220215183615239.png" alt="image-20220215183615239"></p><p>乘法结果100000102 = 13010是一个8位二进制数。两个二进制数相乘得到一个2n位的积。</p><p>但是计算机并没有实现上面的算法，这种算法要求计算机存储<strong>n个部分积</strong>，然<br>后将它们<strong>同时相加</strong>。更好的做法是每得到一个部分积就做一次加法。</p><p>下面给出了一个计算<strong>两个n位无符号</strong>二进制数相乘的算法：<br>步骤a：将计数器的值置为n<br>步骤b：将2n位的部分积寄存器清零<br>步骤c：检查乘数的最右位（即最低位），将被乘数与部分积的最低位n位相加<br>步骤d：<strong>将部分积右移一位</strong><br>步骤e：将乘数右移一位（乘数的最右位被丢弃）<br>步骤f：将计数器的值减1，<strong>重复步骤c</strong>直到n个周期后计数器的值变为0。部分<br>积寄存器的内容就是<strong>乘积结果</strong>。</p><p><img src="/posts/computermanage/image-20220215184120355.png" alt="image-20220215184120355"></p></blockquote><h5 id="2-5-3-快速乘法"><a href="#2-5-3-快速乘法" class="headerlink" title="2.5.3 快速乘法"></a>2.5.3 快速乘法</h5><blockquote><p>通过移位和加法实现的乘法速度很慢，实际的计算机采用了多种方法<strong>加快</strong>乘<br>法运算的<strong>速度</strong>。</p><p>有些程序员使用移位和加法等速度相对较快的操作避免使用乘法。<br>考虑P乘以10和P乘以9的两个例子：<br>    10P= 2x(2x2xP+P) ，即将P左移2次，加上P，再将和左移一次<br>    9P= 2x2x2xP + P，即将P左移3次，加上P得到结果</p><p>乘法运算也可以借助<strong>查找表</strong>（look-up table）实现，这种方法将两个数相乘所<br>有可能的积都保存在一个只读存储器内。这样只需简单的用X和Y的值找到表<br>中的对应项就可以得到X和Y的乘积。如，两个8位二进制乘法需要一个16位地<br>址、216项的查找表，每项记录一个16位的积。</p><p>缺点：太占空间了。</p><p><img src="/posts/computermanage/image-20220215184312269.png" alt="image-20220215184312269"></p></blockquote><h5 id="2-5-4-除法"><a href="#2-5-4-除法" class="headerlink" title="2.5.4 除法"></a>2.5.4 除法</h5><blockquote><p><strong>除法</strong>是通过被除数不断地减去除数直到结果为0或小于除数来实现的。减去除<br>数的次数称作商，最后一次减法的差称作<strong>余数</strong>。</p><pre><code>        被除数/除数 = 商 + 余数/除数</code></pre><p>下面描述了575除以25的过程：</p><p><img src="/posts/computermanage/image-20220215184355345.png" alt="image-20220215184355345"></p><p>将被除数的下一个数字5移到7的后面，并比较除数和75，由于75正好是25的<br>整数倍，因此在商的下一位上写下3：</p><p><img src="/posts/computermanage/image-20220215184409369.png" alt="image-20220215184409369"></p><p>因为已经处理到被除数的最后一位且75正好是测试的整数倍。除法结束，商<br>为23，余数为0。</p><p>考虑用无符号<strong>二进制除法</strong>完成同样的例子：</p><p><img src="/posts/computermanage/image-20220215184433192.png" alt="image-20220215184433192"></p><p>被除数的前5位比除数小，因此商的最高位为0并将除数与被除数的前6位比较</p><p>​    <img src="/posts/computermanage/image-20220215184455334.png" alt="image-20220215184455334"></p><p>被除数的前6位中有一个除数，减法后得到新的部分被除数为001010（1111），<br>将被除数的下一位移下来</p><p><img src="/posts/computermanage/image-20220215184514379.png" alt="image-20220215184514379"></p><p>新的部分被除数小于除数，因此商的下一位为0，后续除法过程如下：</p><p><img src="/posts/computermanage/image-20220215184532079.png" alt="image-20220215184532079"></p><p>除法结果商为10111，余数为0。    </p></blockquote><h6 id="2-5-4-1-恢复余数除法"><a href="#2-5-4-1-恢复余数除法" class="headerlink" title="2.5.4.1 恢复余数除法"></a>2.5.4.1 恢复余数除法</h6><blockquote><p>刚刚讨论的除法方法，用计算机实现，需要修改的就是除数与部分被除数的<br>比较方法，计算机减去并检测结果的符号位。如果减法的<strong>结果为正，则商1</strong>，<br>如果<strong>结果为负，则商0</strong>并将部分被除数与除数相加，将其恢复为原先的值。</p><p>恢复余数除法算法：<br>1）将除数的最高位与被除数的最高位对齐<br>2）从部分被除数中减去除数，得到新的部分被除数<br>3）如果新的部分被除数为<strong>负数</strong>，则商0并用新的部分被除数加上除数，恢复<br>原先的部分被除数<br>4）如果新的部分被除数为<strong>正</strong>，则商1<br>5）判断除法是否结束，如果除数的最低位与部分被除数的最低位对齐，则除<br>法结束，最后的部分被除数就是余数。否则，执行第6步<br>6）将除数<strong>右移一位</strong>，从第2步继续执行    </p></blockquote><table><thead><tr><th>下图描述了该算法的流程图：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215184806342.png" alt="image-20220215184806342"></td></tr><tr><td>按照流程图计算</td></tr><tr><td>011001112除以10012，</td></tr><tr><td>即十进制数103除以9，</td></tr><tr><td>结果为商11余4，</td></tr><tr><td>下表列出了除法的过程：</td></tr><tr><td><img src="/posts/computermanage/image-20220215184704936.png" alt="image-20220215184704936"></td></tr></tbody></table><h6 id="2-5-4-2-不恢复余数除法"><a href="#2-5-4-2-不恢复余数除法" class="headerlink" title="2.5.4.2 不恢复余数除法"></a>2.5.4.2 不恢复余数除法</h6><blockquote><p>不恢复余数除法与恢复余数除法基本相同，唯一区别在于取消了恢复余数的<br>操作。</p><p>在恢复余数除法中，在部分被除数与除数相加恢复部分被除数之后的一个周<br>期，部分被除数将减去除数的<strong>二分之一</strong>。每个将除数右移的操作等价于将除<br>数除以2。当前周期恢复部分被除数以及下个周期减去除数一半的操作等价于<br>部分被除数加上除数的一半。即<strong>D – D/2 = +D/2</strong>，D为除数。</p></blockquote><p>| 下图给出了不恢复余数除法的流程图：</p><p>部分被除数减去除数之后，<br>将检测新的部分被除数的符号位。<br>若为负，则商左移1位，商的最低位<br>补0，并将部分被除数加上除数的<br>二分之一。<br>若为正，则商左移1位，商的最低位<br>补1，并将部分被除数减去除数的<br>二分之一。 |<br>| ———————————————————— |<br>| <img src="/posts/computermanage/image-20220215184913885.png" alt="image-20220215184913885"> |<br>| 下表列出了不恢复余数除法的过程：                             |<br>| <img src="/posts/computermanage/image-20220215184930761.png" alt="image-20220215184930761"> |<br>| <img src="/posts/computermanage/image-20220215184948074.png" alt="image-20220215184948074"> |</p><h4 id="2-6-浮点数"><a href="#2-6-浮点数" class="headerlink" title="2.6 浮点数"></a>2.6 浮点数</h4><blockquote><p><strong>浮点数</strong>即实数，实数是所有有理数和无理数的集合。</p><p>之所以叫作浮点数，是因为<strong>小数点</strong>在数中的位置<strong>并不是固定的</strong>。一个浮点数值分为两部分存储 ：数值以及小数点在数值中的位置。</p><p>计算机中的浮点运算的计算结果一般是<strong>不确定的</strong>，一块芯片上的浮点计算结果也许与另一块芯片上的不同。</p><p><strong>科学计数法</strong>：来表示很大或很小的数。<br>十进制浮点数可以被表示为：尾数x10指数，如1.2345x1020<br>二进制浮点数可以被表示为：尾数x2指数，如1.0111x25<br>IEEE 754浮点数标准提供3种浮点数表示：32位单精度浮点数、64位双精度浮点数、128位四精度浮点数</p></blockquote><h6 id="1-规格化浮点数"><a href="#1-规格化浮点数" class="headerlink" title="1.  规格化浮点数"></a>1.  规格化浮点数</h6><blockquote><p>IEEE 754浮点数的尾数总是<strong>规格化</strong>的，其范围为1.000…0x2e到1.111…1x2e，e为指数。<br>规格化浮点数的<strong>最高位总是1</strong>，规格化使尾数的所有位都是有效的，因而尾数精度最高。<br>如：<br>    0.10…x2e规格化为1.10…x2e-1<br>    10.1…2e规格化为1.01…x2e+1</p><p>尾数规格化充分利用了可用的最大精度。如，一个8位非规格化的尾数0.0000101只能有4位有效位，而规格化后的8位尾数1.0100011则有8位有效位。</p></blockquote><h6 id="2-偏置指数"><a href="#2-偏置指数" class="headerlink" title="2. 偏置指数"></a>2. 偏置指数</h6><blockquote><p>IEEE 754浮点数的<strong>尾数</strong>被表示为符号及值的形式，即用一个符号位表示它是正数还是负数。它的指数则用<strong>偏置方式</strong>表示，即给真正的指数加上一个常数。</p><p>假定所用的指数为8位，偏置值为127。如果一个数的指数为0，则被保存为0 + 127=127。如果指数为-2，则被保存为-2 + 127 = 125。</p><p>实数1010.1111规格化的结果为+1.010111x2^3，指数为+3，将被保存为3+127=130，即13010用二进制表示为10000010。</p><p>这种用偏置表示指数的方法优点在于，<strong>最小的负指数被表示为0</strong>，如果不采用这种方法，0的浮点表示为0.0…0x2最小负指数。采用偏置指数，0就可以用尾数0和指数0表示：</p><p><img src="/posts/computermanage/image-20220215210026439.png" alt="image-20220215210026439"></p></blockquote><h5 id="2-6-1-IEEE浮点数"><a href="#2-6-1-IEEE浮点数" class="headerlink" title="2.6.1 IEEE浮点数"></a>2.6.1 IEEE浮点数</h5><blockquote><p>一个<strong>32位</strong>IEEE 754单精度浮点数可以被表示为下面的二进制串：</p><p>S    EEEEEEEE    1.MMMMMMMMMMMMMMMMMMMMMMM</p><p>S为<strong>符号位</strong>，指明这个数是正数还是负数<br>E为8位<strong>偏置指数</strong>，指出了小数点的位置<br>M为23位<strong>尾数</strong></p><p>下图描述了32位浮点数的结构：</p><p><img src="/posts/computermanage/image-20220215210231399.png" alt="image-20220215210231399"></p><p>S位为符号位，决定了数的符号，若S=0，则为正数，若S=1，则为负数。<br>指数E将浮点数的尾数扩大或缩小<strong>2^E倍</strong>，并且<strong>偏置值为127</strong>。<br>如浮点数+1.11001…0x2^12的指数为12+127=139(10)=10001011(2) 。    </p><p>IEEE浮点数的尾数<strong>总是规格化</strong>的，其值范围在1.0000..00~1.1111..11，除非这个浮点数是0，此时尾数为0.000..00。</p><p>由于尾数总是规格化的，且<strong>最高位总是为1</strong>，因此将尾数存入存储器时没有必要保存最高位的1。所以，一个非0的IEEE 754浮点数可被定义为：</p><p><img src="/posts/computermanage/image-20220215210419645.png" alt="image-20220215210419645"></p><p>S：符号位<br>    E：偏置量为B的指数<br>    F：尾数的小数部分（实际的尾数为1.F，有个隐含的1）</p><p>浮点数0被表示为S=0，E=0，M=0（即<strong>浮点数0用全0表示</strong>）</p><p>考虑下面的例子：<br>将一个32位IEEE单精度浮点数X=11000001100110011000000000000000解压为一个符号位、一个偏置指数和一个尾数。</p><p>解压这3个字段得到：S = 1，E=10000011，F=00110011000000000000000<br>实际的尾数为1. 00110011000000000000000，因此这个数为：<br>    -1. 00110011000000000000000 x 2^(10000011 – 01111111 )<br>        = -1.00110011000000000000000 x 2^4<br>         = -10011.0011    </p></blockquote><h6 id="2-6-1-1-IEEE浮点数格式"><a href="#2-6-1-1-IEEE浮点数格式" class="headerlink" title="2.6.1.1 IEEE浮点数格式"></a>2.6.1.1 IEEE浮点数格式</h6><blockquote><p>ANSI/IEEE 745-1985标准定义了基本的和扩展的浮点数格式，以及一组数量有限的算术运算的规则（加、减、乘、除、平方根、求余和比较）。</p><p><strong>非数</strong>（Not a Number，<strong>NaN</strong>）是IEEE 754标准提供的一个专门符号，代表IEEE 754标准格式所<strong>不能表示的数</strong>。</p><p>下图，IEEE 754标准定义了3种浮点数格式：</p><p><img src="/posts/computermanage/image-20220215210546100.png" alt="image-20220215210546100"></p><p>在32位IEEE 754单精度浮点数格式中，<strong>最大指数Emax</strong>为+127，<strong>最小指数Emin</strong>为<br>-126，而不是+128~-127。Emin-1（即-127）用来表示浮点0，<br>Emax+1用来表示正/负无穷大或NaN数。</p><p>下图，描述了IEEE单精度浮点数格式，指数E=0和E=255等特例分别被用于表示浮点0、非规格化小数、正或负无穷大、以及NaN：</p><p><img src="/posts/computermanage/image-20220215210630414.png" alt="image-20220215210630414"></p></blockquote><h6 id="2-6-1-2-十进制数转换为二进制浮点数的实例"><a href="#2-6-1-2-十进制数转换为二进制浮点数的实例" class="headerlink" title="2.6.1.2 十进制数转换为二进制浮点数的实例"></a>2.6.1.2 十进制数转换为二进制浮点数的实例</h6><blockquote><p>将十进制数4100.12510转换为符合IEEE 754标准的32位单精度二进制浮点数？</p><p>步骤：<br>1）将4100.125转换为二进制定点数，整数部分4100(10)=1000000000100(2)，小数部分0.12510=0.0012，则4100.125(10)=1000000000100.001(2)<br>2）将1000000000100.0012规格化为1.000000000100001 x 2(12)，则：<br>    符号位S为0，该数为正数<br>    指数为12 + 127 = 139(10) = 100010112<br>尾数为0000000001000010000000（起始位1被省略，尾数扩展为23位）<br>因此结果为0100010110000000001000010000000</p></blockquote><h6 id="2-6-1-3-二进制浮点数转换为十进制"><a href="#2-6-1-3-二进制浮点数转换为十进制" class="headerlink" title="2.6.1.3  二进制浮点数转换为十进制"></a>2.6.1.3  二进制浮点数转换为十进制</h6><blockquote><p>将二进制浮点数11000100011011000000000000000000转换为十进制？</p><p>步骤：<br>1）分析得到符号位S =1，偏置指数E=10001000，<br>尾数F=11011000000000000000000</p><p>2）偏置指数100010002减去127得到实际指数<br>    100010002-01111111(2)=000001112=7(10)，则：<br>这个数为：-1.11011000000000000000000(2) x 2^7 = -11101100(2) = -236(10)</p></blockquote><h5 id="2-6-2-IEEE浮点数的特点"><a href="#2-6-2-IEEE浮点数的特点" class="headerlink" title="2.6.2 IEEE浮点数的特点"></a>2.6.2 IEEE浮点数的特点</h5><blockquote><p>1）浮点数接近0时的特点，下图描述了一个指数为2位，尾数为2位的浮点数<br>系统。浮点数0表示为00 000，下一个规格化的正数表示为00 100（即2-bx 1.00，<br>b为偏置常量）：</p><p><img src="/posts/computermanage/image-20220215210847718.png" alt="image-20220215210847718"></p><p>浮点数0附近有一块<strong>禁止区</strong>，其中的浮点数都是非规格化的，因此无法被表示<br>为IEEE标准格式。这个数的指数和起始位都是0的区域，也可用来表示浮点数。<br>但是这些数都是非规格化的，其精度比规格化数的进度低，会导致<strong>渐进式下</strong><br><strong>溢。</strong></p><p>2）IEEE标准规定，缺省的<strong>舍入技术</strong>应该向最近的值舍入<br>3）IEEE标准规定了4种比较结果，分别是等于、小于、大于和无序（unordered），无序用于一个操作数是NaN数的情景<br>4）IEEE标准规定了5种异常：<br>    a)<strong>操作数不合法</strong>：当程序员使用一些不合法的操作数。如NaN数、与无穷大数<br>    相加或相减时、求负数的平方根等<br>    b)<strong>除数为0</strong><br>    c)<strong>上溢</strong>：当结果比最大浮点数还大时。处理上溢的方法有终止计算和饱和运算（用最    大值作为结果）等<br>    d)<strong>下溢</strong>：当结果比最小浮点数还小时。也就是说，结果小于2Emin。下溢可以通过将    最小浮点数设为0或用一个小于2Emin的非规格化数表示最小浮点数等方式处理<br>    e)<strong>结果不准确：</strong>当某个操作产生舍入错误时</p></blockquote><h4 id="2-7-浮点运算"><a href="#2-7-浮点运算" class="headerlink" title="2.7 浮点运算"></a>2.7 浮点运算</h4><blockquote><p>浮点数不能直接相加。</p><p>下面以一个简单的8位尾数和一个未对齐的指数为例说明浮点运算，A=1.0101001x2^4，<br>B=1.1001100x2^3。若要计算两个数的乘积，应将尾数相乘，指数相加：</p><p><img src="/posts/computermanage/image-20220215211010279.png" alt="image-20220215211010279"></p><p>浮点数的加法，笔算时，将A与B的小数点对齐：</p><p><img src="/posts/computermanage/image-20220215211019393.png" alt="image-20220215211019393"></p><p>由于浮点操作数已被表示为规格化形式，计算机在进行浮点加法时面临以下问题：</p><p><img src="/posts/computermanage/image-20220215211036566.png" alt="image-20220215211036566"></p><p>为了对齐指数，计算机必须执行下面步骤：<br>第1步，找出指数较小的数<br>第2步，使两个数的指数相同<br>第3步，尾数相加（或相减）<br>第4步，如果有必要，将结果规格化</p><p>因为B的指数比A小，将B转为0.110011x2^4，将A与非规格化的B相加：</p><p><img src="/posts/computermanage/image-20220215211056236.png" alt="image-20220215211056236"></p><p>对结果规格化，得到1.00001111x2^5</p></blockquote><table><thead><tr><th>下图，给出了浮点加法运算的流程：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215211122641.png" alt="image-20220215211122641"></td></tr></tbody></table><blockquote><p>注意：<br>1）因为指数有时与尾数位于同一个字中，在加法过程开始之前必须将它们分离开（减压缩）</p><p>2）如果两个指数的差大于p+1，p为尾数的位数，较小的数由于太小而无法影响较大的数，结果实际就等于较大的数。如，1.1010x2^60+1.01x2^-12的结果为1.1010x2^60，因为指数之差为72</p><p>3）结果规格化时检查指数范围，以分别检测指数下溢或上溢。指数下溢会导致结果为0，而指数上溢会造成错误。</p></blockquote><h6 id="1-舍入和截断误差"><a href="#1-舍入和截断误差" class="headerlink" title="1. 舍入和截断误差"></a>1. 舍入和截断误差</h6><blockquote><p>浮点运算可能引起尾数位数的相加，需要保持尾数位数不变的方法。最简单的技术叫作<strong>截断</strong>。</p><p>如，将0.1101101截断为4位尾数的结果为0.1101。截断会产生诱导误差（即误差是由施加在数上的操作计算所引起的），诱导误差是偏置的，因为截断后的数总比截断前小。</p><p>舍入是一种更好的减少数的位数的技术。如果丢弃的位的值大于剩余数最低位的一半，将剩余数的最低位加1。</p><p>考虑两个数在小数点后第4位上舍入的例子：</p><p><img src="/posts/computermanage/image-20220215211254041.png" alt="image-20220215211254041"></p><p>下图描述了舍入机制：</p><p><img src="/posts/computermanage/image-20220215211305359.png" alt="image-20220215211305359"></p><p>1）最简单的舍入机制是截断或向0舍入。<br>2）“向最近的数舍入”方法会选择距离该数最近的那个浮点数作为结果。<br>3）“向正或负无穷大舍入”方法会选择正或负无穷大方向上最近的有效浮点<br>数作为结果。<br>当要舍入的数位于两个连续浮点数的正中时，IEEE舍入机制选择最低位为0的<br>点（即向偶数舍入）。</p></blockquote><h4 id="2-8-浮点运算和程序员"><a href="#2-8-浮点运算和程序员" class="headerlink" title="2.8 浮点运算和程序员"></a>2.8 浮点运算和程序员</h4><blockquote><p>整数操作时精确、可重复的，浮点数操作是不精确的。</p><p>考虑表达式z = x^2-y^2，x、y、z都是实数。可以将表达式视作x^2-y^2或(x+y)(x-y)计<br>算，整数运算得到相同结果，但浮点数运算可能得到不同结果。</p><p>IEEE要求加、减、乘和除运算结果能够精确计算，并用向偶数舍入的方法将结<br>果舍入为最近的浮点数。</p><p>2.8.1浮点运算中的误差传播<br>2.8.2生成数学函数<br>    sin(x)  —-&gt;泰勒级数</p></blockquote><h1 id="二、指令集体系结构"><a href="#二、指令集体系结构" class="headerlink" title="二、指令集体系结构"></a>二、指令集体系结构</h1><h2 id="三、体系结构与组成"><a href="#三、体系结构与组成" class="headerlink" title="三、体系结构与组成"></a>三、体系结构与组成</h2><blockquote><p>计算机的<strong>指令集体系结构</strong>（<strong>ISA</strong>）从<strong>汇编语言程序员</strong>的角度描述了计算机，并强调了计算机的功能，而不是它的内部组成或实现。ISA说明了计算机能做什么，而计算机组成则说明了它是如何做的。</p></blockquote><h4 id="3-1-存储程序计算机"><a href="#3-1-存储程序计算机" class="headerlink" title="3.1  存储程序计算机"></a>3.1  存储程序计算机</h4><blockquote><p>（1）ARM这一类处理器采用了存储程序体系结构，它将程序和数<br>据放在同一个存储空间内，采用<strong>取指-执行</strong>模式执行，即按照顺序<br>从内存读取指令、译码、执行。</p><p>（2）<strong>寄存器</strong>是位于CPU内部的存储单元，类似于内存中的存储单<br>元。寄存器使用名字而不是地址来访问，如<strong>r0，r1，……，r15</strong><br>（ARM的命名），或是AX，BX，CX，DX，SP，BP，SI（Intel命名），<br>或是D0，D1，……，D7（Freesacle的命名）。</p><p>（3）计算机指令的操作码可以使用<strong>很少的几位</strong>来引用寄存器，指<br>令中用来选择寄存器的字段一般为3~5位，具体数值取决于计算机<br>中程序<strong>可见寄存器</strong>的个数。</p><p>（4）CPU中的寄存器有几个功能，一些寄存器是<strong>高速暂存寄存器</strong>，用于保存数据或数据单元的地址（即指针）。另外一些事<strong>特殊功能寄存器</strong>，如对一个循环的次数进行计数的循环计数器，有的用来记录处理器的状态。CPU中最重要的寄存器是<strong>程序计数器</strong>（PC），它记录了要执行的<strong>下一条指令</strong>的地址。</p><p>（5）计算机指令有多种格式，通用计算机提供了以下3种指令格式：<br>    LDR 寄存器目的,存储单元源<br>    STR 寄存器源,存储单元目的<br>    Operation 寄存器目的,寄存器源1,寄存器源2</p><p>如：<br>    LDR r1,1234        </p><p>​     LDR指令把数据从存储器复制到寄存器，将地址为1234的存储单元中            的数据    读到寄存器r1中</p><p>​    STR r2,2000      </p><p>​    STR指令把数据从寄存器传输到存储器，将寄存器r2的值写入地址为            2000的存    储单元</p><p>​    ADD r1,r2,r3         </p><p>​    将寄存器r2和r3中的内容相加，把结果写入寄存器r1，因此，r2和r3            的内容保    持不变</p></blockquote><table><thead><tr><th>下图，描述了存储程序计算机的功能图：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215211937791.png" alt="image-20220215211937791"></td></tr><tr><td>下图，给出了虚拟的</td></tr><tr><td>存储程序计算机的结构：</td></tr><tr><td><img src="/posts/computermanage/image-20220215211949749.png" alt="image-20220215211949749"></td></tr></tbody></table><blockquote><p>图中寄存器定义如下：<br>MAR： 存储器地址寄存器，保存了读或写操作正在访问的存储单元的地址</p><p>MBR： 存储器数据寄存器，保存了刚从存储器中读出的数据，或将要写入存储器的数据</p><p>PC：   程序计数器，保存了要执行的下一条指令的地址</p><p>IR：  指令寄存器，存放最近从存储器中读出的指令，也就是当前正在执行的指令</p><p>r0-r7：   寄存器文件，包括8个通用目的寄存器r0，r1，…，r7，用于存放临时数据</p></blockquote><table><thead><tr><th>下述RTL表明了下图中的处理器如何读取并</th><th>执行LDR r1,1234的：</th></tr></thead><tbody><tr><td><img src="/posts/computermanage/image-20220215212114071.png" alt="image-20220215212114071"></td><td><img src="/posts/computermanage/image-20220215212120170.png" alt="image-20220215212120170"></td></tr></tbody></table><p><img src="/posts/computermanage/image-20220215212210948.png" alt="image-20220215212210948"></p><h6 id="1-寄存器的可见性"><a href="#1-寄存器的可见性" class="headerlink" title="1. 寄存器的可见性"></a>1. 寄存器的可见性</h6><blockquote><p>寄存器有3种类型：<br><strong>通用寄存器</strong>，用来保存计算过程产生的临时数据。ARM有16个通用寄存器，r0,r1….,r15。寄存器r14和r15是通用寄存器，程序员可以访问这两个寄存器，然而，r14与r15又在ARM体系结构中扮演着特殊角色。</p><p><strong>特殊功能寄存器</strong>，用于特定功能。如，PC指向要执行的下一条执行指令。其他特殊功能寄存器还有状态寄存器、栈指针寄存器以及CPU标识寄存器等。</p><p><strong>不可见寄存器</strong>，不属于处理器体系结构的一部分，不能被程序员直接使用。如，指令寄存器IR和内存地址寄存器MAR等，这些都是实现计算机所必需的，但又不属于ISA的一部分。</p></blockquote><blockquote><ul><li><strong>为什么程序计数器要加4</strong></li></ul><p>计算机存储器按照字节编址，各个字节存储单元依次命名为0，1，2…。但是32位微处理器使用32位指令和32位字数据。</p><p>因此每一次取指后PC必须加4，因为4字节x8位/字节=32位=1指令字。</p></blockquote><h5 id="3-1-1-扩展处理器：常量处理"><a href="#3-1-1-扩展处理器：常量处理" class="headerlink" title="3.1.1 扩展处理器：常量处理"></a>3.1.1 扩展处理器：常量处理</h5><blockquote><p>LDR r1,1234，这里的“1234”是指<strong>地址</strong>为1234的存储单元的内容。假设要将数值1234载入寄存器r1中，这样的数字叫作<strong>立即操作数</strong>。立即数是一个在运算中可以直接使用的数，与存储单元的值完全不同，需要用哈希符号**(#)前缀**来声明。<br>如：<br>        汇编指令            RTL表示<br>        LDR r1,200            [r1]&lt;- [200]<br>        LDR r1,#200            [r1]&lt;-200<br>        ADD r0,r1,#25</p></blockquote><p>| 下图描述了<br>实现立即数操作<br>所需的新数据路径：                   |<br>| ———————————————————— |<br>| <img src="/posts/computermanage/image-20220215212756641.png" alt="image-20220215212756641"> |</p><h6 id="2-一些常用指令"><a href="#2-一些常用指令" class="headerlink" title="2. 一些常用指令"></a>2. 一些常用指令</h6><blockquote><p>类ARM指令：<br>    LDR   r0,address<br>    STR   r0,address<br>    ADD  r0,r1,r2<br>    SUB   r0,r1,r2        ；r0=r2-r1<br>    BPL   target        ; 如果前一个操作结果<strong>大于等于0</strong>，则跳转到                        target处<br>    BEQ   target         ; 如果前一个操作<strong>结果为0</strong>，则跳转到target处<br>    B     target         ; <strong>无条件跳转</strong>到地址为target处</p></blockquote><h5 id="3-1-2-扩展处理器：流控制"><a href="#3-1-2-扩展处理器：流控制" class="headerlink" title="3.1.2 扩展处理器：流控制"></a>3.1.2 扩展处理器：流控制</h5><blockquote><p>流控制是指任意能够改变程序中指令顺序执行的动作，它是指计算机<strong>非顺序执行</strong>指令的能力。</p><p>流控制是指转移到程序中特定位置的分支和跳转指令、子程序/过程调用，返回、中断以及操作系统调用。</p><p>流控制的<strong>典型例子</strong>就是条件行为，它允许处理器在两个可能的动作序列中选择一个执行。</p></blockquote><p>| 下图显示了计算机实现<br>条件控制所需的信息通路：                 |<br>| ———————————————————— |<br>| <img src="/posts/computermanage/image-20220215214056635.png" alt="image-20220215214056635"> |</p><blockquote><p>下述代码段描述了一个条件分支的行为：<br>          SUBS  r5，r5，#1        ; r5减1<br>          BEQ   onZero            ; 如果r5为0则跳到标号onZero处执行<br>             notZero    ADD   r1，r2，r3        ;  否则继续执行<br>            .<br>            .<br>    onZero       SUB    r1, r2, r3            ; 分支的转移目的地<br>伪代码表示：<br>    if zero<br>    then r1 = r2 – r3<br>    else r1 = r2 + r3</p></blockquote><h6 id="3-条件码寄存器（Condition-Code-Register，CCR）"><a href="#3-条件码寄存器（Condition-Code-Register，CCR）" class="headerlink" title="3. 条件码寄存器（Condition Code Register，CCR）"></a>3. 条件码寄存器（Condition Code Register，CCR）</h6><blockquote><p>ALU的信息将被写入条件码寄存器（Condition Code Register，CCR），它保存了各种用于测试的条件（如，零、负、正）。当ALU执行一个操作时，它会更新CCR中的零位、借位位、负位以及溢出位。</p></blockquote><table><thead><tr><th>3.1.2扩展处理器：流控制</th></tr></thead><tbody><tr><td>下图说明了ALU运算的结果如何</td></tr><tr><td>被反馈给程序计数器PC，</td></tr><tr><td>以选择实现控制转移的指令：</td></tr><tr><td><img src="/posts/computermanage/image-20220215214150402.png" alt="image-20220215214150402"></td></tr></tbody></table><blockquote><p>从使用PC中的地址到存储器地址中取出条件分支指令开始。分支指令读出<strong>CCR的内容</strong>，其内容由上一条指令的结果决定。在执行时，条件分支指令将完成以下两个动作中的一个：</p><p>1）如果CCR中的<strong>测试位为false</strong>，则处理器从[PC]+4处取出下一条指令<br>2）如果CCR中的<strong>测试位为true</strong>，则PC从IR的操作数字段载入新的地址，并跳转到新地址处执行</p><p>（1）状态信息<br>计算机执行一个操作时，将状态或条件信息保存在CCR中，处理器记录下结果是否为0（Z），结果的二进制形式是否为负（N），是否产生进位位（C），是否算术溢出（V）。</p><p>考虑下述例子中8位加法对CCR中位的影响：</p><p><img src="/posts/computermanage/image-20220215214235480.png" alt="image-20220215214235480"></p><p><strong>更新CCR还是不更新CCR？</strong><br>CCR中的位会在每次操作后被更新，这一说法并不完全准确。不同处理器的情况完全不同。Intel IA32和Fresscale 68K那样的<strong>CISC处理器</strong>会在每次操作后<strong>自动更新</strong>状态标志，而ARM那样的RISC处理器则需要程序员来强制更新状态标志。ARM处理器，需要在指令中添加后缀“S”（如SUBS、ADDS）来完成。如CMP（比较）和TST（测试），会自动更新状态标志位，不需要添加后缀“S”。</p><p>（2）分支指令例子<br>例1：如何使用<strong>条件分支指令</strong>BEQ address来实现高级语言结构？<br>首先处理器用IR中BEQ指令的操作码字段选出CCR中的一位进行测试（如Z、N<br>或C位），如果被测试的位为1，则PC载入一个新地址（即分支目标地址），<br>否则PC不变。</p><p>​    汇编语言表示：<br>​        BEQ address    ; 如果Z标志位为1，则跳转到address处<br>​<br>​    RTL表示：<br>​        IF [Z] = 1<br>​        THEN  [PC]  &lt;-  </p><address></address><p></p><p><img src="/posts/computermanage/image-20220215214324613.png" alt="image-20220215214324613"></p><p>RTL表示：</p><p><img src="/posts/computermanage/image-20220215214338678.png" alt="image-20220215214338678"></p><p>下图说明了上述代码是如何在虚拟计算机上执行的，它考虑了两种情形：<br>情形1：P = 12，Q = 9，分支转移成功，控制转移到分支目标地址<br>情形2：P = 12，Q = 14，分支转移不成功，控制转移到PC + 4</p><p><img src="/posts/computermanage/image-20220215214351511.png" alt="image-20220215214351511"></p><p>例3：在循环中使用条件分支来计算1+2+3+…+20<br>        LDR        r0,#1        ; 把1放入寄存器r0中<br>        LDR        r1,#0        ; 把0放入寄存器r1中<br>Next        ADD        r1,r1,r0    ; 重复：当前计数值与部分和相加<br>        ADD        r0,r0,#1    ; 计数值加1<br>        CMP         r0,#21        ; 20个数是否都已加完<br>        BNE        Next        ; 直到：完成20次迭代<br>        STOP                ; 若完成，则停止</p></blockquote><h4 id="3-2-ISA的组成"><a href="#3-2-ISA的组成" class="headerlink" title="3.2  ISA的组成"></a>3.2  ISA的组成</h4><blockquote><p>ISA的3个组成部分：寄存器集、寻址方式和指令格式</p></blockquote><h5 id="3-2-1-寄存器"><a href="#3-2-1-寄存器" class="headerlink" title="3.2.1 寄存器"></a>3.2.1 寄存器</h5><blockquote><p>片内的一个指针寄存器保存了存储器中寄存器的地址。</p><p>寄存器对于提高计算机性能和实际指令集设计是很有必要的。</p><p>设计一条ADD P=Q+ R的计算机指令，P、Q、R都是存储地址。<br>假设操作码为16位（ADD部分），地址空间为32位，则指令长度为16 + 32 +<br>32 +32 = 112位，如下图：</p><p><img src="/posts/computermanage/image-20220215214440587.png" alt="image-20220215214440587"></p><p>典型的真实计算机的指令长度为16位或32位，所以112位的指令长<br>度是不可行的。</p><p>实际计算机用寄存器实现片上存储，寄存器的功能与存储单元一样，<strong>唯一的区别</strong>在于访问的<strong>便捷性</strong>和响应时间。仅需很少的指令就可以指定一个片上寄存器。<br>如，某计算机的操作码为8位，带有8个片上寄存器（用3位就可以访问r0-r7中一个），就能用8 + 3+3+3=17位实现指令ADD P = Q+ R。<br>如图：某计算机有3个5位操作数地址字段，可以寻址32个寄存器，32位指令字中余下的17位用于指令操作码和额外的控制字段</p><p><img src="/posts/computermanage/image-20220215214516575.png" alt="image-20220215214516575"></p></blockquote><h5 id="3-2-2-寻址方式概述"><a href="#3-2-2-寻址方式概述" class="headerlink" title="3.2.2 寻址方式概述"></a>3.2.2 寻址方式概述</h5><blockquote><p>指令对数据进行操作，并且必须将数据移动到其被处理的地方。指定数据的方式统称为“寻址方式”。</p><p>3种基本寻址方式为：<br>    1）立即数寻址<br>    2）直接寻址<br>    3）间接寻址</p></blockquote><h6 id="4-立即数寻址"><a href="#4-立即数寻址" class="headerlink" title="4. 立即数寻址"></a>4. 立即数寻址</h6><blockquote><p>最简单的寻址方式，其操作数是指令的一部分。</p><p>如操作P= Q+5，这里的5就是立即数，它没有被保存在存储单元或寄存器中，而是指令的组成部分。</p><p>ARM处理器使用前缀#指定立即操作数，如ADD r1,r2,#5完成了操作[r1] &lt;-[r2]+5</p></blockquote><h6 id="5-直接寻址"><a href="#5-直接寻址" class="headerlink" title="5.直接寻址"></a>5.直接寻址</h6><blockquote><p>也称作绝对寻址。把操作数地址用作指令的一部分。<br>如指令ADD P,Q,R表示将存储单元Q的内容与存储单元R的内容相加，并将结果保存在存储单元P中。</p><p>直接寻址在CISC计算机上得到广泛使用，如Intel IA32或68K系列，Load/store型计算机，如ARM，没有实现直接寻址。</p></blockquote><h6 id="6-间接寻址"><a href="#6-间接寻址" class="headerlink" title="6.间接寻址"></a>6.间接寻址</h6><blockquote><p>更严格地说，叫作寄存器间接寻址。在寄存器间接寻址中，指令给出了包含操作数地址的寄存器的地址。</p><p>获得一个操作数需要3次访问：读指令，读含有操作数地址的寄存器，以及最后读出实际的操作数。</p><p>含有操作数地址的寄存器称作指针寄存器。Load/store型计算机（如ARM），使用这种寻址方式访问存储器操作数。</p><p>如，ARM指令LDR r1,[r2]表示将寄存器r2所指的存储单元的内容加载到寄存器r1中。</p><p>以下分别是ARM、Intel  IA32和Freescale 68K的汇编语言语句：<br>    LDR    r1,[r2]        ; 将寄存器r2所指存储单元的内容复制到寄存器r1中<br>    MOV     ax,[bx]        ; 将寄存器bx所指存储单元的内容复制到寄存器ax中<br>    MOVE    (A5),D2    ; 将寄存器A5所指存储单元的内容复制到寄存器D2中</p><p>寄存器间接寻址有许多变种，最常用的格式是带偏移量的寄存器间接寻址，其中操作数的地址由寄存器内容加上常量或偏移量指定。</p><p>典型格式为：<br>    LDR     r2,[r3,#8]    ; 把寄存器r3+8所指存储单元的内容复制到寄存器r2中<br>    MOV    ax,[12,bx]    ; 把寄存器bx+12所指存储单元的内容复制到寄存器ax中<br>    MOVE    (16,A5),D2    ; 把寄存器A5+16所指存储单元的内容复制到寄存器D2中</p><p>如图，描述了这些寻址方式的处理过程：、</p><p><img src="/posts/computermanage/image-20220215230555113.png" alt="image-20220215230555113"></p></blockquote><h6 id="7-存储器与寄存器寻址"><a href="#7-存储器与寄存器寻址" class="headerlink" title="7. 存储器与寄存器寻址"></a>7. 存储器与寄存器寻址</h6><blockquote><p>寄存器与存储单元之间没有本质区别，其区别主要体现在它们的相对访问速度以及指定一个寄存器和一个存储单元所需的地址位数上。</p><p>由此推出，这些计算机不支持存储器-存储器型寻址方式</p></blockquote><h5 id="3-2-4-操作码与指令"><a href="#3-2-4-操作码与指令" class="headerlink" title="3.2.4 操作码与指令"></a>3.2.4 操作码与指令</h5><blockquote><p>计算机体系结构设计中最重要的一个因素是每条指令中操作数地址的数量。</p><p>如，实现了指令ADD r1,r2,r3的指令集是三地址计算机，而实现了ADD r1,r2指令的计算机是双地址计算机。在此主要介绍三地址、双地址、单地址、零地址的计算机。</p><p>考虑下面例子，指令带有0~3个操作数，操作数P、Q、R是存储单元或寄存器</p><p>​    操作数    指令            作用<br>​    3个        ADD   P,Q,R        Q与R相加，结果存放在P中<br>​    2个        ADD   P,Q        Q与P相加，结果存放在P中<br>​    1个        ADD   P        P与累加器相加，结果存放在累加器中<br>​    0个        ADD            从栈顶弹出两个数相加，结果放在栈顶</p></blockquote><p><strong>204Page</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jwt</title>
      <link href="/posts/jwt/"/>
      <url>/posts/jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="六、设计及实现—用户管理"><a href="#六、设计及实现—用户管理" class="headerlink" title="六、设计及实现—用户管理"></a>六、设计及实现—用户管理</h2><h4 id="6-1-实现流程"><a href="#6-1-实现流程" class="headerlink" title="6.1 实现流程"></a>6.1 实现流程</h4><p><img src="/posts/jwt/1618471168742.png" alt="1618471168742"></p><h4 id="6-2-后端接口开发"><a href="#6-2-后端接口开发" class="headerlink" title="6.2 后端接口开发"></a>6.2 后端接口开发</h4><h6 id="6-2-1-完成DAO操作"><a href="#6-2-1-完成DAO操作" class="headerlink" title="6.2.1 完成DAO操作"></a>6.2.1 完成DAO操作</h6><ol><li><p>创建实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"User对象"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"用户/买家信息"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> realname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userImg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userMobile<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userEmail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userSex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> userBirth<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> userRegtime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> userModtime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建DAO接口、定义操作方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDAO</span> <span class="token punctuation">{</span>    <span class="token comment">//用户注册</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据用户名查询用户信息</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建DAO接口的mapper文件并完成配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.fmmall.dao.UserDAO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into users(username,password,user_regtime,user_modtime)        values(#{username},#{password},#{userRegtime},#{userModtime})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realname<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_img<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userImg<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_mobile<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMobile<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userEmail<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userSex<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_birth<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userBirth<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_regtime<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userRegtime<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_modtime<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userModtime<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryUserByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select            user_id,            username,            password,            nickname,            realname,            user_img,            user_mobile,            user_email,            user_sex,            user_birth,            user_regtime,            user_modtime        from users        where username=#{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="6-2-2-完成Service业务"><a href="#6-2-2-完成Service业务" class="headerlink" title="6.2.2 完成Service业务"></a>6.2.2 完成Service业务</h6><ol><li><p>创建service接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment">//用户注册</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">userResgit</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用户登录</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建service接口实现类，完成业务实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDAO</span> userDAO<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">userResgit</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//1.根据用户查询，这个用户是否已经被注册</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.如果没有被注册则进行保存操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> md5Pwd <span class="token operator">=</span> <span class="token class-name">MD5Utils</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>md5Pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUserRegtime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUserModtime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">"注册成功！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span> <span class="token string">"注册失败！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token string">"用户名已经被注册！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">"登录失败，用户名不存在！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> md5Pwd <span class="token operator">=</span> <span class="token class-name">MD5Utils</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>md5Pwd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">"登录成功！"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">"登录失败，密码错误！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="6-2-3-完成Controller提供接口"><a href="#6-2-3-完成Controller提供接口" class="headerlink" title="6.2.3 完成Controller提供接口"></a>6.2.3 完成Controller提供接口</h6><ol><li><p>创建controller，调用service</p></li><li><p>添加接口注解</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"提供用户的登录和注册接口"</span><span class="token punctuation">,</span>tags <span class="token operator">=</span> <span class="token string">"用户管理"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"用户登录接口"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户登录账号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户登录密码"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"用户注册接口"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户注册账号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户注册密码"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/regist"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">userResgit</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="6-2-4-接口测试"><a href="#6-2-4-接口测试" class="headerlink" title="6.2.4 接口测试"></a>6.2.4 接口测试</h6><ul><li>基于swagger进行测试</li></ul><h4 id="6-3-前端跨域访问"><a href="#6-3-前端跨域访问" class="headerlink" title="6.3 前端跨域访问"></a>6.3 前端跨域访问</h4><h6 id="6-3-1-跨域访问概念"><a href="#6-3-1-跨域访问概念" class="headerlink" title="6.3.1 跨域访问概念"></a>6.3.1 跨域访问概念</h6><ul><li><p>什么时跨域访问？</p><blockquote><p>AJAX 跨域访问是用户访问A网站时所产生的对B网站的跨域访问请求均<a href="https://baike.baidu.com/item/%E6%8F%90%E4%BA%A4/2180896">提交</a>到A网站的指定页面</p></blockquote><p><img src="/posts/jwt/1618561898108.png" alt="1618561898108"></p></li></ul><h6 id="6-3-2-如何解决跨域访问？"><a href="#6-3-2-如何解决跨域访问？" class="headerlink" title="6.3.2 如何解决跨域访问？"></a>6.3.2 如何解决跨域访问？</h6><ul><li>前端使用JSONP设置</li><li>后端使用<code>@CrossOrigin</code>  — 就是设置响应头允许跨域</li></ul><h4 id="6-4-前端页面之间的传值"><a href="#6-4-前端页面之间的传值" class="headerlink" title="6.4 前端页面之间的传值"></a>6.4 前端页面之间的传值</h4><h6 id="6-4-1-cookie"><a href="#6-4-1-cookie" class="headerlink" title="6.4.1 cookie"></a>6.4.1 cookie</h6><ul><li><p>工具方法封装：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> operator <span class="token operator">=</span> <span class="token string">"="</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getCookieValue</span><span class="token punctuation">(</span><span class="token parameter">keyStr</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> s <span class="token operator">=</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> str <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> k <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> v <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> keyStr<span class="token punctuation">)</span><span class="token punctuation">{</span>value <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setCookieValue</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> key<span class="token operator">+</span>operator<span class="token operator">+</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>A页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">setCookieValue</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>userInfo<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCookieValue</span><span class="token punctuation">(</span><span class="token string">"userimg"</span><span class="token punctuation">,</span>userInfo<span class="token punctuation">.</span>userImg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>B页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">getCookieValue</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">getCookieValue</span><span class="token punctuation">(</span><span class="token string">"userimg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h6 id="6-4-2-localStorage"><a href="#6-4-2-localStorage" class="headerlink" title="6.4.2 localStorage"></a>6.4.2 localStorage</h6><ul><li><p>A页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>B页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> jsonStr <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> userInfo <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>jsonStr<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移出localStorage键值对</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="七、前后端分离用户认证-JWT"><a href="#七、前后端分离用户认证-JWT" class="headerlink" title="七、前后端分离用户认证-JWT"></a>七、前后端分离用户认证-JWT</h2><h4 id="7-1-基于session实现单体项目用户认证"><a href="#7-1-基于session实现单体项目用户认证" class="headerlink" title="7.1 基于session实现单体项目用户认证"></a>7.1 基于session实现单体项目用户认证</h4><blockquote><p>在单体项目中如何保证受限资源在用户未登录的情况下不允许访问？</p></blockquote><p><img src="/posts/jwt/1619158116136.png" alt="1619158116136"></p><blockquote><p>在单体项目中，视图资源（页面）和接口（控制器）都在同一台服务器，用户的多次请求都是基于同一个会话（session），因此可以借助session来进行用户认证判断：</p><p>1.当用户登录成功之后，将用户信息存放到session</p><p>2.当用户再次访问受限资源时，验证session中是否存在用户信息，可以根据session有无用户信息来判断用户是否登录</p></blockquote><h4 id="7-2-基于token实现前后端分离用户认证"><a href="#7-2-基于token实现前后端分离用户认证" class="headerlink" title="7.2 基于token实现前后端分离用户认证"></a>7.2 基于token实现前后端分离用户认证</h4><blockquote><p>由于在前后端分离项目开发中，前后端之间是通过异步交互完成数据访问的，请求是无状态的，因此不能基于session实现用户的认证。</p></blockquote><p><img src="/posts/jwt/1619149656171.png" alt="1619149656171"></p><h4 id="7-3-基于token的用户认证的实现"><a href="#7-3-基于token的用户认证的实现" class="headerlink" title="7.3 基于token的用户认证的实现"></a>7.3 基于token的用户认证的实现</h4><h6 id="7-3-1-登录认证接口生成token"><a href="#7-3-1-登录认证接口生成token" class="headerlink" title="7.3.1 登录认证接口生成token"></a>7.3.1 登录认证接口生成token</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// UserController</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultVO<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// UserServiceImpl</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Example<span class="token punctuation">.</span>Criteria</span> criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> usersMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"登录失败，用户名不存在！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> md5Pwd <span class="token operator">=</span> <span class="token class-name">MD5Utils</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>md5Pwd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//如果登录验证成功，则需要生成令牌token（token就是按照特定规则生成的字符串）</span>            <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span>token<span class="token punctuation">,</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"登录失败，密码错误！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-3-2-登录页面接收到token存储到cookie"><a href="#7-3-2-登录页面接收到token存储到cookie" class="headerlink" title="7.3.2 登录页面接收到token存储到cookie"></a>7.3.2 登录页面接收到token存储到cookie</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// login.html</span><span class="token function-variable function">doSubmit</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>isRight<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> baseUrl<span class="token operator">+</span><span class="token string">"user/login"</span><span class="token punctuation">;</span>        axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">{</span>            <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token literal-property property">username</span><span class="token operator">:</span>vm<span class="token punctuation">.</span>username<span class="token punctuation">,</span>                <span class="token literal-property property">password</span><span class="token operator">:</span>vm<span class="token punctuation">.</span>password            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> vo <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vo<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//如果登录成功，就把token存储到cookie</span>                <span class="token function">setCookieValue</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span>vo<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"index.html"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                vm<span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">"登录失败，账号或密码错误！"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        vm<span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">"请正确输入帐号和密码！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-3-3-购物车页面加载时访问购物车列表接口"><a href="#7-3-3-购物车页面加载时访问购物车列表接口" class="headerlink" title="7.3.3 购物车页面加载时访问购物车列表接口"></a>7.3.3 购物车页面加载时访问购物车列表接口</h6><ul><li>获取token</li><li>携带token访问接口</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> baseUrl <span class="token operator">=</span> <span class="token string">"http://localhost:8080/"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">token</span><span class="token operator">:</span><span class="token string">""</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//当进入到购物车页面时，就要查询购物车列表（访问购物车列表接口）</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>token <span class="token operator">=</span> <span class="token function">getCookieValue</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"token:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>                <span class="token literal-property property">url</span><span class="token operator">:</span>baseUrl<span class="token operator">+</span><span class="token string">"shopcart/list"</span><span class="token punctuation">,</span>                <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>                    <span class="token literal-property property">token</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>token                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-3-4-在购物车列表接口校验token"><a href="#7-3-4-在购物车列表接口校验token" class="headerlink" title="7.3.4 在购物车列表接口校验token"></a>7.3.4 在购物车列表接口校验token</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"授权令牌"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResultVO</span> <span class="token function">listCarts</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//1.获取token</span>    <span class="token comment">//2.校验token</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"请先登录"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> decode <span class="token operator">=</span> <span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>decode<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//token校验成功</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"登录过期，请重新登录！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-4-JWT"><a href="#7-4-JWT" class="headerlink" title="7.4 JWT"></a>7.4 JWT</h4><blockquote><p>如果按照上述规则生成token：</p><p>1.简易的token生成规则安全性较差，如果要生成安全性很高的token对加密算法要求较高；</p><p>2.无法完成时效性的校验（登录过期）</p></blockquote><h6 id="7-4-1-JWT简介"><a href="#7-4-1-JWT简介" class="headerlink" title="7.4.1 JWT简介"></a>7.4.1 JWT简介</h6><ul><li><p>JWT： Json Web Token</p></li><li><p>官网：<a href="https://jwt.io/">https://jwt.io</a></p></li><li><p>jwt的结构</p><p><img src="/posts/jwt/1619161525439.png" alt="1619161525439"></p></li></ul><h6 id="7-4-2-生成JWT"><a href="#7-4-2-生成JWT" class="headerlink" title="7.4.2 生成JWT"></a>7.4.2 生成JWT</h6><ul><li><p>添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.10.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成token</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> token <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>                 <span class="token comment">//主题，就是token中携带的数据</span>    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token comment">//设置token的生成时间</span>    <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span>               <span class="token comment">//设置用户id为token  id</span>    <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>                                     <span class="token comment">//map中可以存放用户的角色权限信息</span>    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//设置过期时间</span>    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> <span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span>     <span class="token comment">//设置加密方式和加密密码</span>    <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="7-4-3-JWT校验"><a href="#7-4-3-JWT校验" class="headerlink" title="7.4.3 JWT校验"></a>7.4.3 JWT校验</h6><ul><li><p>如果token正确则正常解析，如果token不正确或者过期，则通过抛出的异常进行识别</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">//验证token</span>    <span class="token class-name">JwtParser</span> parser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parser<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解析token的SigningKey必须和生成token时设置密码一致</span>    <span class="token comment">//如果token正确（密码正确，有效期内）则正常执行，否则抛出异常</span>    <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">&gt;</span></span> claimsJws <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Claims</span> body <span class="token operator">=</span> claimsJws<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取token中用户数据</span>    <span class="token class-name">String</span> subject <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取生成token设置的subject</span>    <span class="token class-name">String</span> v1 <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取生成token时存储的Claims的map中的值</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"登录过期，请重新登录！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"Tonken不合法，请自重！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"请重新登录！"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="7-4-4-拦截器校验Token"><a href="#7-4-4-拦截器校验Token" class="headerlink" title="7.4.4 拦截器校验Token"></a>7.4.4 拦截器校验Token</h6><ul><li><p>创建拦截器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckTokenInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"请先登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//提示请先登录</span>            <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//验证token</span>                <span class="token class-name">JwtParser</span> parser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//解析token的SigningKey必须和生成token时设置密码一致</span>                parser<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//如果token正确（密码正确，有效期内）则正常执行，否则抛出异常</span>                <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">&gt;</span></span> claimsJws <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"登录过期，请重新登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"Token不合法，请自重！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"请先登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">ResultVO</span> resultVO<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置拦截器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CheckTokenInterceptor</span> checkTokenInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>checkTokenInterceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-5-请求头传递token"><a href="#7-5-请求头传递token" class="headerlink" title="7.5 请求头传递token"></a>7.5 请求头传递token</h4><blockquote><p>前端但凡访问受限资源，都必须携带token发送请求；token可以通过请求行(params)、请求头（header）以及请求体（data）传递，但是习惯性使用header传递</p></blockquote><h6 id="7-5-1-axios通过请求头传值"><a href="#7-5-1-axios通过请求头传值" class="headerlink" title="7.5.1 axios通过请求头传值"></a>7.5.1 axios通过请求头传值</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span>baseUrl<span class="token operator">+</span><span class="token string">"shopcart/list"</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">token</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>token    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-5-2-在拦截器中放行options请求"><a href="#7-5-2-在拦截器中放行options请求" class="headerlink" title="7.5.2 在拦截器中放行options请求"></a>7.5.2 在拦截器中放行options请求</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckTokenInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token comment">//放行options请求</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"OPTIONS"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token operator">+</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"请先登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//提示请先登录</span>            <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//验证token</span>                <span class="token class-name">JwtParser</span> parser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//解析token的SigningKey必须和生成token时设置密码一致</span>                parser<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"QIANfeng6666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//如果token正确（密码正确，有效期内）则正常执行，否则抛出异常</span>                <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">&gt;</span></span> claimsJws <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"登录过期，请重新登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"Token不合法，请自重！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ResultVO</span> resultVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token class-name">ResStatus</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"请先登录！"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">ResultVO</span> resultVO<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shop </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/posts/784dd132/"/>
      <url>/posts/784dd132/</url>
      
        <content type="html"><![CDATA[<p>1</p><p><img src="/posts/784dd132/4.webp" alt="4"></p><p>2<img src="/posts/784dd132/wallhaven-dpdxjj_1920x1080.png" alt="wallhaven-dpdxjj_1920x1080"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/posts/c0add594/"/>
      <url>/posts/c0add594/</url>
      
        <content type="html"><![CDATA[<h2 id="一、VUE简介"><a href="#一、VUE简介" class="headerlink" title="一、VUE简介"></a>一、VUE简介</h2><blockquote><p>项目结构经历的三个阶段</p></blockquote><p><strong>后端MVC</strong>：它是单体结构，流程控制是由后端控制器来完成的</p><p><strong>前端MVC</strong>：前后端分离开发，后端只负责接收响应请求</p><p><strong>MVVM</strong>：前端请求后端接口，后端返回数据，前端接收数据，并将接收的数据的数据设置“VM”，HTML从vm中取值。</p><ul><li>M model 数据模型，指的是从后端接口返回的数据 (前端发送请求，后端接收数据)</li><li>V view 视图（HTML）</li><li>VM ViewModel（js） 视图模型，数据模型与视图之间的桥梁，后端返回的model转换前端所需的vm，视图层可以直接从vm中提取数据。</li></ul><table><thead><tr><th>MVC</th><th>MVVM</th></tr></thead><tbody><tr><td><img src="/posts/c0add594/image-20220108003130919.png" alt="image-20220108003130919"></td><td><img src="/posts/c0add594/image-20220108003146516.png" alt="image-20220108003146516"></td></tr></tbody></table><h2 id="二、-vue的入门使用"><a href="#二、-vue的入门使用" class="headerlink" title="二、 vue的入门使用"></a>二、 vue的入门使用</h2><blockquote><p>Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合.</p></blockquote><h4 id="2-1-vue的引入"><a href="#2-1-vue的引入" class="headerlink" title="2.1 vue的引入"></a>2.1 vue的引入</h4><ul><li><p>离线引用：下载vue的js文件，添加到前端项目，在网页中通过script标签引用vue.js文件</p></li><li><p>CDN引用：</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-入门案例"><a href="#2-2-入门案例" class="headerlink" title="2.2 入门案例"></a>2.2 入门案例</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>从vm中获取的数据为：{{str}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">str</span><span class="token operator">:</span><span class="token string">"从前有座山"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、-vue的语法"><a href="#三、-vue的语法" class="headerlink" title="三、 vue的语法"></a>三、 vue的语法</h2><h4 id="3-1-基本类型数据和字符串"><a href="#3-1-基本类型数据和字符串" class="headerlink" title="3.1 基本类型数据和字符串"></a>3.1 基本类型数据和字符串</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">{{code}}{{str}}-------------------------data:{code:10,str:"test"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-对象类型数据"><a href="#3-2-对象类型数据" class="headerlink" title="3.2 对象类型数据"></a>3.2 对象类型数据</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">{{stu.stuNum}}{{stu.stuName}}-----------------------------data{    stu:{        stuNum:"100001",        stuName:"张三",        stuGender:"M",        stuAge:20    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-循环-v-for"><a href="#3-4-循环-v-for" class="headerlink" title="3.4 循环 v-for"></a>3.4 循环 v-for</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>学号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s,index in stus<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{index+1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{s.stuNum}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{s.stuName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s.stuGender == <span class="token punctuation">'</span>M<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s.stuGender == <span class="token punctuation">'</span>F<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{s.stuAge}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>---------------------------------------------------------------------data:{    stus:[        {            stuNum:"100001",            stuName:"张大三",            stuGender:"M",            stuAge:23        },        {            stuNum:"100002",            stuName:"张中三",            stuGender:"M",            stuAge:22        },        {            stuNum:"100003",            stuName:"张小三",            stuGender:"F",            stuAge:20        }    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-v-bind绑定标签属性"><a href="#3-5-v-bind绑定标签属性" class="headerlink" title="3.5 v-bind绑定标签属性"></a>3.5 v-bind绑定标签属性</h4><ul><li><code>v-bind:</code>  可简写为 <code>:</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu.stuImg<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>------------------------------------data{str:"从前有座山",stu:{        stuImg:"img/01.jpg"       }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-表单标签的双向绑定-v-model"><a href="#3-6-表单标签的双向绑定-v-model" class="headerlink" title="3.6 表单标签的双向绑定 v-model"></a>3.6 表单标签的双向绑定 v-model</h4><ul><li>只能使用在表单输入标签</li><li>v-model:value  可以简写为  v-model</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>------------------------------------data{str:"从前有座山"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、vue实例"><a href="#四、vue实例" class="headerlink" title="四、vue实例"></a>四、vue实例</h2><blockquote><p>每个使用vue进行数据渲染的网页文档都需要创建一个Vue实例 —— ViewModel</p></blockquote><h4 id="4-1-Vue实例的生命周期"><a href="#4-1-Vue实例的生命周期" class="headerlink" title="4.1 Vue实例的生命周期"></a>4.1 Vue实例的生命周期</h4><blockquote><p>vue实例生命周期——vue实例从创建到销毁的过程</p></blockquote><ul><li>创建vue实例（初始化data、加载el）</li><li>数据挂载（将vue实例data中的数据渲染到网页HTML标签）</li><li>重新渲染（当vue的data数据发生变化，会重新渲染到HTML标签）</li><li>销毁实例</li></ul><h4 id="4-2-钩子函数"><a href="#4-2-钩子函数" class="headerlink" title="4.2 钩子函数"></a>4.2 钩子函数</h4><blockquote><p>为了便于开发者在vue实例生命周期的不同阶段进行特定的操作，vue在生命周期四个阶段的前后分别提供了一个函数，这个函数无需开发者调用，当vue实例到达生命周期的指定阶段会自动调用对应的函数。</p></blockquote><p><img src="/posts/c0add594/lifecycle.png" alt="lifecycle"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{str}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>{{str}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">beforeCreate</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//1.data初始化之前执行，不能操作data</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//2.data初始化之后执行，模板加载之前，可以修改/获取data中的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this.str = "山里有座庙";</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">beforeMount</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//3.模板加载之后，数据初始渲染（挂载）之前，可以修改/获取data中的值</span><span class="token comment">//this.str = "庙里有口井";</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">mounted</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//4.数据初始渲染（挂载）之后，可以对data中的变量进行修改，但是不会影响v-once的渲染</span><span class="token comment">//this.str = "井里有只蛙";</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">beforeUpdate</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//5.数据渲染之后，当data中的数据发生变化触发重新渲染，渲染之前执行此函数 </span><span class="token comment">//  data数据被修改之后，重新渲染到页面之前</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"-----"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token string">"从前有座山2"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">updated</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//6.data数据被修改之后，重新渲染到页面之后</span><span class="token comment">//this.str = "从前有座山3";</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">beforeDestroy</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//7.实例销毁之前</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">destroyed</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//8.实例销毁之后</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、计算属性和侦听器"><a href="#五、计算属性和侦听器" class="headerlink" title="五、计算属性和侦听器"></a>五、计算属性和侦听器</h2><h4 id="5-1-计算属性"><a href="#5-1-计算属性" class="headerlink" title="5.1 计算属性"></a>5.1 计算属性</h4><blockquote><p>data中的属性可以通过声明获得，也可以通过在computed通过计算获得</p><p>特性：计算属性所依赖的属性值发生变化会影响计算属性的值同时发生变化</p></blockquote><p><strong>示例</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>{{str3}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">str1</span><span class="token operator">:</span><span class="token string">"千锋"</span><span class="token punctuation">,</span> <span class="token literal-property property">str2</span><span class="token operator">:</span><span class="token string">"武汉"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function-variable function">str3</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>str1<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>str2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-侦听器"><a href="#5-2-侦听器" class="headerlink" title="5.2 侦听器"></a>5.2 侦听器</h4><blockquote><p>侦听器，就是data中属性的监听器，当data中的属性值发生变化就会触发侦听器函数的执行 </p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>{{str3}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">str1</span><span class="token operator">:</span><span class="token string">"千锋"</span><span class="token punctuation">,</span><span class="token literal-property property">str2</span><span class="token operator">:</span><span class="token string">"武汉"</span><span class="token punctuation">,</span><span class="token literal-property property">str3</span><span class="token operator">:</span><span class="token string">"千锋武汉"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function-variable function">str1</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>str3 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>str1 <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>str2<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token function">str1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                            <span class="token punctuation">}</span><span class="token function-variable function">str2</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>str3 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>str1 <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>str2<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、class与style绑定"><a href="#六、class与style绑定" class="headerlink" title="六、class与style绑定"></a>六、class与style绑定</h2><blockquote><p>我们可以使用mustache语法将vue中data的数据绑定到HTML标签及标签的属性，如何将data中的值绑定到标签的class及style属性呢？</p></blockquote><h4 id="6-1-class绑定"><a href="#6-1-class绑定" class="headerlink" title="6.1 class绑定"></a>6.1 class绑定</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.mystyle1</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.mystyle3</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.my-style2</span><span class="token punctuation">{</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--如果b1为true就加载 mystyle1；如果b2为true，则加载my-style2--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{mystyle1:b1,<span class="token punctuation">'</span>my-style2<span class="token punctuation">'</span>:b2}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--为class属性加载多个样式名 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[chooseStyle1,chooseStyle2]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--如果b3为true，则class='mystyle3'; 否则class='mystyle1'如果在三目运算中使用样式名则需加单引号，不加单引号则表示从data变量中获取样式名--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[b3 ? <span class="token punctuation">'</span>mystyle3<span class="token punctuation">'</span> : <span class="token punctuation">'</span>mystyle1<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[b3 ? chooseStyle3 : chooseStyle1]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">b1</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">b2</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">b3</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">chooseStyle1</span><span class="token operator">:</span><span class="token string">"mystyle1"</span><span class="token punctuation">,</span><span class="token literal-property property">chooseStyle2</span><span class="token operator">:</span><span class="token string">"my-style2"</span><span class="token punctuation">,</span><span class="token literal-property property">chooseStyle3</span><span class="token operator">:</span><span class="token string">"mystyle3"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-style绑定"><a href="#6-2-style绑定" class="headerlink" title="6.2 style绑定"></a>6.2 style绑定</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--当使用v-bind绑定内联样式时：1. 使用{}定义style样式，才能获取data中的值，{}要遵循JSON格式2. {}中不在使用style样式属性名“font-size”,而要使用对应的js属性名border-style-width ---  borderStyleWidth--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{color: colorname,fontSize: fontsize+<span class="token punctuation">'</span>px<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>WH2010<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--我们可以直接为style属性绑定一个data中定义好的内联样式的字符串--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mystyle1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>千锋Java-WH2010<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--我们可以直接为style属性绑定一个data中定义好的内联样式的对象--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mystyle2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>千锋Java-WH2010<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--可以在同一个style上通过数组引用多个内联样式的对象--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[mystyle2,mystyle3]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>千锋Java-WH2010<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">colorname</span><span class="token operator">:</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token literal-property property">fontsize</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token literal-property property">mystyle1</span><span class="token operator">:</span><span class="token string">"color:orange;font-size:45px"</span><span class="token punctuation">,</span><span class="token literal-property property">mystyle2</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token literal-property property">fontSize</span><span class="token operator">:</span><span class="token string">"40px"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">mystyle3</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">textShadow</span><span class="token operator">:</span><span class="token string">"orange 3px 3px 5px"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、条件与列表渲染"><a href="#七、条件与列表渲染" class="headerlink" title="七、条件与列表渲染"></a>七、条件与列表渲染</h2><h4 id="7-1-条件渲染"><a href="#7-1-条件渲染" class="headerlink" title="7.1 条件渲染"></a>7.1 条件渲染</h4><h6 id="7-1-1-v-if"><a href="#7-1-1-v-if" class="headerlink" title="7.1.1 v-if"></a>7.1.1 v-if</h6><blockquote><p>在html标签可以添加v-if指令指定一个条件，如果条件成立则显示此HTML标签，如果不成立则不显示当前标签；</p><p>条件可以是一个表达式也可以是一个具体的bool类型值</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>从前有座山<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code == 1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>从前有座山<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">code</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-1-2-v-else"><a href="#7-1-2-v-else" class="headerlink" title="7.1.2 v-else"></a>7.1.2 v-else</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--v-else标签需要紧跟在v-if的标签之后，中间不能有其他标签--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code == 1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>从前有座山<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>山里有座庙<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">code</span><span class="token operator">:</span><span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-1-3-v-else-if"><a href="#7-1-3-v-else-if" class="headerlink" title="7.1.3 v-else-if"></a>7.1.3 v-else-if</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code &gt;= 90<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>优秀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code &gt;= 80<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>良好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code &gt;= 70<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>中等<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code &gt;= 60<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>不想理你<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">code</span><span class="token operator">:</span><span class="token number">85</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-1-4-v-show"><a href="#7-1-4-v-show" class="headerlink" title="7.1.4 v-show"></a>7.1.4 v-show</h6><blockquote><p>从功能上将v-show和v-if作用是相同的，渲染过程有区别</p></blockquote><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h4 id="7-2-列表渲染"><a href="#7-2-列表渲染" class="headerlink" title="7.2 列表渲染"></a>7.2 列表渲染</h4><blockquote><p>将集合数据以表格、列表的形式显示</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/bootstrap.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-3.4.1.min.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/bootstrap.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c in categories<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>query?cid=<span class="token punctuation">'</span>+c.cid<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{c.cname}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-bordered<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>学号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>照片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s,index in stus<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>tr<span class="token punctuation">'</span>+s.stuNum<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{s.stuNum}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s.stuImg<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{s.stuName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--{{s.stuGender=='M'?'男':'女'}}--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s.stuGender==<span class="token punctuation">'</span>M<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/m.bmp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-else</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/f.bmp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{s.stuAge}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-danger btn-xs<span class="token punctuation">"</span></span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>stu/delete?cid=<span class="token punctuation">'</span>+s.stuNum<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success btn-xs<span class="token punctuation">"</span></span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>stu/update?cid=<span class="token punctuation">'</span>+s.stuNum<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">categories</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">cid</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">cname</span><span class="token operator">:</span><span class="token string">"华为"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">cid</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">cname</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">cid</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">cname</span><span class="token operator">:</span><span class="token string">"OPPO"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">cid</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token literal-property property">cname</span><span class="token operator">:</span><span class="token string">"VIVO"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">stus</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">stuNum</span><span class="token operator">:</span><span class="token string">"10010"</span><span class="token punctuation">,</span><span class="token literal-property property">stuImg</span><span class="token operator">:</span><span class="token string">"img/01.jpg"</span><span class="token punctuation">,</span><span class="token literal-property property">stuName</span><span class="token operator">:</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token literal-property property">stuGender</span><span class="token operator">:</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token literal-property property">stuAge</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">stuNum</span><span class="token operator">:</span><span class="token string">"10011"</span><span class="token punctuation">,</span><span class="token literal-property property">stuImg</span><span class="token operator">:</span><span class="token string">"img/02.jpg"</span><span class="token punctuation">,</span><span class="token literal-property property">stuName</span><span class="token operator">:</span><span class="token string">"LiLei"</span><span class="token punctuation">,</span><span class="token literal-property property">stuGender</span><span class="token operator">:</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token literal-property property">stuAge</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">stuNum</span><span class="token operator">:</span><span class="token string">"10012"</span><span class="token punctuation">,</span><span class="token literal-property property">stuImg</span><span class="token operator">:</span><span class="token string">"img/03.jpg"</span><span class="token punctuation">,</span><span class="token literal-property property">stuName</span><span class="token operator">:</span><span class="token string">"Lucy"</span><span class="token punctuation">,</span><span class="token literal-property property">stuGender</span><span class="token operator">:</span><span class="token string">"F"</span><span class="token punctuation">,</span><span class="token literal-property property">stuAge</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">stuNum</span><span class="token operator">:</span><span class="token string">"10013"</span><span class="token punctuation">,</span><span class="token literal-property property">stuImg</span><span class="token operator">:</span><span class="token string">"img/04.jpg"</span><span class="token punctuation">,</span><span class="token literal-property property">stuName</span><span class="token operator">:</span><span class="token string">"Polly"</span><span class="token punctuation">,</span><span class="token literal-property property">stuGender</span><span class="token operator">:</span><span class="token string">"F"</span><span class="token punctuation">,</span><span class="token literal-property property">stuAge</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、事件处理"><a href="#八、事件处理" class="headerlink" title="八、事件处理"></a>八、事件处理</h2><ul><li><p>在使用vue进行数据渲染时，如果使用原生js事件绑定(例如onclick)，如果需要获取vue实例中的数据并传参则需要通过拼接来完成</p></li><li><p>vue提供了v-on指令用于绑定各种事件（v-on:click），简化了从vue取值的过程，但是触发的方法需要定义在vue实例的 methods中</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doDelete(s.stuNum,s.stuName)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">doDelete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">snum<span class="token punctuation">,</span>sname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"----delete:"</span><span class="token operator">+</span>snum<span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>sname<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>v-on:clicl</code>可以缩写为`@click</strong></p><h4 id="8-1-使用JS函数传值"><a href="#8-1-使用JS函数传值" class="headerlink" title="8.1 使用JS函数传值"></a>8.1 使用JS函数传值</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-danger btn-xs<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doDelete(s.stuNum,s.stuName)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">doDelete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">snum<span class="token punctuation">,</span>sname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"----delete:"</span><span class="token operator">+</span>snum<span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>sname<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-使用dataset对象传值"><a href="#8-2-使用dataset对象传值" class="headerlink" title="8.2 使用dataset对象传值"></a>8.2 使用dataset对象传值</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success btn-xs<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doUpdate<span class="token punctuation">"</span></span> <span class="token attr-name">:data-snum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s.stuNum<span class="token punctuation">"</span></span><span class="token attr-name">:data-sname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s.stuName<span class="token punctuation">"</span></span> <span class="token attr-name">:data-simg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s.stuImg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">doUpdate</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment">//如果v-on绑定的js函数没有参数，调用的时候可以省略()，同时可以给js函数一个event参数(事件对象)</span>                <span class="token comment">// 1. event 表示触发当前函数的事件</span>                <span class="token comment">// 2. event.srcElement 表示发生事件的元素---修改按钮</span>                <span class="token comment">// 3. event.srcElement.dataset 表示按钮上绑定的数据集（data-开头的属性）</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"-----update"</span><span class="token punctuation">)</span>                <span class="token keyword">var</span> stu <span class="token operator">=</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>dataset<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-混合使用"><a href="#8-3-混合使用" class="headerlink" title="8.3 混合使用"></a>8.3 混合使用</h4><ul><li><code>$event</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-danger btn-xs<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doDelete(s.stuNum,s.stuName,$event)<span class="token punctuation">"</span></span><span class="token attr-name">:data-simg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s.stuImg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">doDelete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">snum<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"----delete:"</span><span class="token operator">+</span>snum<span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>sname<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-4-事件修饰符"><a href="#8-4-事件修饰符" class="headerlink" title="8.4 事件修饰符"></a>8.4 事件修饰符</h4><blockquote><p>当使用v-on进行事件绑定的时候，可以添加特定后缀，设置事件触发的特性</p></blockquote><h6 id="8-4-1-事件修饰符使用示例"><a href="#8-4-1-事件修饰符使用示例" class="headerlink" title="8.4.1 事件修饰符使用示例"></a>8.4.1 事件修饰符使用示例</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>事件函数<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="8-4-2-事件修饰符"><a href="#8-4-2-事件修饰符" class="headerlink" title="8.4.2 事件修饰符"></a>8.4.2 事件修饰符</h6><p><strong>.prevent</strong>  消除元素的默认事件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success btn-xs<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">test</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"---test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>.stop</strong> 阻止事件冒泡（阻止子标签向上冒泡）</p><p><strong>.self</strong> 设置只能自己触发事件（子标签不能触发）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">@click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">method1</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">method2</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">method3</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>.once</strong> 限定事件只触发一次</p><h6 id="8-4-3-按键修饰符"><a href="#8-4-3-按键修饰符" class="headerlink" title="8.4.3 按键修饰符"></a>8.4.3 按键修饰符</h6><blockquote><p>按键修饰符就是针对键盘事件的修饰符，限定哪个按键会触发事件</p></blockquote><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>除了以上vue提供按钮的别名之外，我们还可以根据键盘为按键自定义别名</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">键盘码</a></p><p><strong>示例</strong>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--2.使用自定义的按键别名aaa作为修饰符--&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.aaa</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method4<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//1.为按键J定于别名为  aaa</span>    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>aaa <span class="token operator">=</span><span class="token number">74</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">method4</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="8-4-3-系统修饰符"><a href="#8-4-3-系统修饰符" class="headerlink" title="8.4.3 系统修饰符"></a>8.4.3 系统修饰符</h6><blockquote><p>组合键</p></blockquote><p><strong>示例</strong>  ctrl+j触发事件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.ctrl.j</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method4<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>j <span class="token operator">=</span><span class="token number">74</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">method4</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code> windows键</li></ul><h2 id="九、表单输入绑定"><a href="#九、表单输入绑定" class="headerlink" title="九、表单输入绑定"></a>九、表单输入绑定</h2><blockquote><p>表单输入绑定，即双向绑定：就是能够将vue实例的data数据渲染到表单输入视图（input\textarea\select），也能够将输入视图的数据同步更新到vue实例的data中</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/bootstrap.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-3.4.1.min.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/bootstrap.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--文本输入框、密码输入框--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--单选按钮--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>A  3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>B  4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>C  5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>D  6  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--复选框，绑定的是一个数组--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>篮球<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>篮球 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>足球<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>足球 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>羽毛球<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>羽毛球 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>乒乓球<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>乒乓球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--下拉菜单select：绑定一个字符串--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BJ<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SH<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GZ<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SZ<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--下拉菜单select：如果有multiple表示可多选，需要绑定一个数组--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cities<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BJ<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SH<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GZ<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SZ<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSearch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">text</span><span class="token operator">:</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token literal-property property">pwd</span><span class="token operator">:</span><span class="token string">"111111"</span><span class="token punctuation">,</span><span class="token literal-property property">opt1</span><span class="token operator">:</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token literal-property property">opt2</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"篮球"</span><span class="token punctuation">,</span><span class="token string">"羽毛球"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">city</span><span class="token operator">:</span><span class="token string">"SZ"</span><span class="token punctuation">,</span><span class="token literal-property property">cities</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"BJ"</span><span class="token punctuation">,</span><span class="token string">"SZ"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function-variable function">doSearch</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>cities<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、vue使用案例"><a href="#十、vue使用案例" class="headerlink" title="十、vue使用案例"></a>十、vue使用案例</h2><h4 id="10-1-接口说明"><a href="#10-1-接口说明" class="headerlink" title="10.1 接口说明"></a>10.1 接口说明</h4><table><thead><tr><th>接口名称</th><th></th></tr></thead><tbody><tr><td>功能描述</td><td>根据关键字搜索音乐信息</td></tr><tr><td>请求URL</td><td><a href="http://47.96.11.185:9999/music/search">http://47.96.11.185:9999/music/search</a></td></tr><tr><td>请求方式</td><td>GET | POST</td></tr><tr><td>请求参数</td><td>s              string      [必须]      搜索关键字<br>limit       int            [可选]      返回的搜索结果的条数，默认为10<br>type        int            [可选]      搜索类型(1单曲    10歌单)，默认为1<br>offset      int            [可选]     搜索结果的偏移</td></tr><tr><td>返回结果</td><td><img src="/posts/c0add594/1618910014977.png" alt="1618910014977"></td></tr></tbody></table><h4 id="10-2-如何部署jar文件"><a href="#10-2-如何部署jar文件" class="headerlink" title="10.2 如何部署jar文件"></a>10.2 如何部署jar文件</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -jar music-1.0.0.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-3-案例目标"><a href="#10-3-案例目标" class="headerlink" title="10.3 案例目标"></a>10.3 案例目标</h4><p>请大家根据以上接口实现搜索和列表显示功能</p><h4 id="10-4-案例实现"><a href="#10-4-案例实现" class="headerlink" title="10.4 案例实现"></a>10.4 案例实现</h4><h6 id="10-4-1-音乐搜索"><a href="#10-4-1-音乐搜索" class="headerlink" title="10.4.1 音乐搜索"></a>10.4.1 音乐搜索</h6><h6 id="10-4-2-音乐播放"><a href="#10-4-2-音乐播放" class="headerlink" title="10.4.2 音乐播放"></a>10.4.2 音乐播放</h6><p>在music.html中定义音频播放器(定义在vue的容器之外)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">controls</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>100%</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>player<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给播放按钮绑定点击事件触发的函数doPlay</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success btn-xs<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doPlay<span class="token punctuation">"</span></span> <span class="token attr-name">:data-mid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>song.id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在doPlay中执行播放</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> player <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"player"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">keyword</span><span class="token operator">:</span><span class="token string">"张韶涵"</span><span class="token punctuation">,</span>        <span class="token literal-property property">songs</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">currentid</span><span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function-variable function">doSearch</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9999/music/search"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">s</span><span class="token operator">:</span>vm<span class="token punctuation">.</span>keyword<span class="token punctuation">,</span><span class="token literal-property property">limit</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token literal-property property">offset</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">//获取此关键词搜索的总记录数</span>                    <span class="token keyword">var</span> count <span class="token operator">=</span> res<span class="token punctuation">.</span>result<span class="token punctuation">.</span>songCount<span class="token punctuation">;</span>                    <span class="token comment">//获取音乐集合</span>                    <span class="token keyword">var</span> arr <span class="token operator">=</span> res<span class="token punctuation">.</span>result<span class="token punctuation">.</span>songs<span class="token punctuation">;</span>                    vm<span class="token punctuation">.</span>songs <span class="token operator">=</span> arr<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    vm<span class="token punctuation">.</span>songs <span class="token operator">=</span> data<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">doPlay</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vm<span class="token punctuation">.</span>currentid <span class="token operator">=</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>mid<span class="token punctuation">;</span>            <span class="token comment">//网易云音乐播放地址： http://music.163.com/song/media/outer/url?id=songId</span>            player<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://music.163.com/song/media/outer/url?id="</span><span class="token operator">+</span>vm<span class="token punctuation">.</span>currentid<span class="token punctuation">;</span>            player<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.4.3 播放暂停切换</p><h1 id="十一、组件"><a href="#十一、组件" class="headerlink" title="十一、组件"></a>十一、组件</h1><h4 id="11-1-组件介绍及示例"><a href="#11-1-组件介绍及示例" class="headerlink" title="11.1 组件介绍及示例"></a>11.1 组件介绍及示例</h4><blockquote><p>组件，就是将通用的HTML模块进行封装——可复用</p></blockquote><h6 id="11-1-1-组件注册"><a href="#11-1-1-组件注册" class="headerlink" title="11.1.1 组件注册"></a>11.1.1 组件注册</h6><blockquote><p>将通用的HTML模块封装注册到vue中</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"header-bar"</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="11-1-2-组件引用"><a href="#11-1-2-组件引用" class="headerlink" title="11.1.2 组件引用"></a>11.1.2 组件引用</h6><ul><li>定义组件需要依赖vue.js，在引用自定义组件的js文件之前要先引用vue.js</li><li>组件的引用必须在vue实例el指定的容器中</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-bar</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-bar</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/my-components.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-2-组件注册"><a href="#11-2-组件注册" class="headerlink" title="11.2 组件注册"></a>11.2 组件注册</h4><h6 id="11-2-1-自定义组件的结构"><a href="#11-2-1-自定义组件的结构" class="headerlink" title="11.2.1 自定义组件的结构"></a>11.2.1 自定义组件的结构</h6><ul><li><p><code>data</code> 定义组件的模板渲染的数据</p></li><li><p><code>template</code> 组件的HTML模块（HTML标签\css样式）</p></li><li><p><code>methods</code>  定义组件中的标签事件绑定的JS函数</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"header-bar"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//组件中的data是通过函数返回的对象</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"Java2010电商平台"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div style="width: 100%; height: 80px; background: lightyellow;"&gt;&lt;table width="100%"&gt;&lt;tr&gt;&lt;td width="200" align="right" valign="middle"&gt;&lt;img src="img/logo.png" height="80"&gt;&lt;/td&gt;&lt;td&gt;&lt;label style="color: deepskyblue;font-size:32px; font-family: 华文行楷; margin-left: 30px;"&gt;{{title}}&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;button @click="test"&gt;组件中的按钮&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function-variable function">test</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"组件中定义的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="11-2-2-组件的封装"><a href="#11-2-2-组件的封装" class="headerlink" title="11.2.2 组件的封装"></a>11.2.2 组件的封装</h6><ul><li>将模版中的css样式提出取来，单独定义到css文件存储在css目录</li><li>将模版中的图片存在在img目录</li><li>将定义组件的js文件和vue的文件存放到js目录</li></ul><table><thead><tr><th>vue组件封装的目录结构</th></tr></thead><tbody><tr><td><img src="/posts/c0add594/1618976058692.png" alt="1618976058692"></td></tr></tbody></table><p>11.2.3 组件的复用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/my-components.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-bar</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-bar</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/my-components.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-3-组件通信"><a href="#11-3-组件通信" class="headerlink" title="11.3 组件通信"></a>11.3 组件通信</h4><blockquote><p>vue实例本身就是一个组件（模板就是el指定容器 ,data就是组件数据,methods就是组件的事件函数）<br>在vue实例指定的el容器中引用的组件称为子组件 ,当前vue实例就是父组件</p></blockquote><h6 id="11-3-1-父传子"><a href="#11-3-1-父传子" class="headerlink" title="11.3.1 父传子"></a>11.3.1 父传子</h6><blockquote><p>vue实例引用组件的时候，传递数据到引用的组件中</p></blockquote><table><thead><tr><th>示意图</th></tr></thead><tbody><tr><td><img src="/posts/c0add594/1618977261480.png" alt="1618977261480"></td></tr></tbody></table><h6 id="11-3-2-子传父"><a href="#11-3-2-子传父" class="headerlink" title="11.3.2 子传父"></a>11.3.2 子传父</h6><blockquote><p>通过子组件的按钮“调用”父组件的函数，通过函数传值  </p></blockquote><table><thead><tr><th>调用流程示意图</th></tr></thead><tbody><tr><td><img src="/posts/c0add594/1618978096426.png" alt="1618978096426"></td></tr></tbody></table><h4 id="11-4-组件插槽"><a href="#11-4-组件插槽" class="headerlink" title="11.4 组件插槽"></a>11.4 组件插槽</h4><blockquote><p>当我们自定义vue组件时，允许组件中的部分内容在调用组件时进行定义——插槽</p></blockquote><h6 id="11-4-1-插槽的使用"><a href="#11-4-1-插槽的使用" class="headerlink" title="11.4.1 插槽的使用"></a>11.4.1 插槽的使用</h6><p>在自定义组件时通过<code>slot</code>标签在组件的模版中定义插槽</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"header-bar"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//组件中的data是通过函数返回的对象</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">str2</span><span class="token operator">:</span><span class="token string">"子组件中的数据"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="divStyle"&gt;&lt;table class="tableStyle"&gt;&lt;tr&gt;&lt;td width="200" align="right" valign="middle"&gt;&lt;img src="img/logo.png" class="logoImg"&gt;&lt;/td&gt;&lt;td&gt;&lt;label class="titleStyle"&gt;{{title}}&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/td&gt;&lt;td&gt;&lt;button @click="childMethod"&gt;子组件中的按钮&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function-variable function">childMethod</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"my-event"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在父组件中调用此组件时，指定插槽填充的模版</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/bootstrap.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/my-components.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-3.4.1.min.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/bootstrap.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-bar</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sss<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--组件标签包含的HTML默认为填充到插槽的模版--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-bar</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/my-components.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">sss</span><span class="token operator">:</span><span class="token string">"自定义标题"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="11-4-2-具名插槽"><a href="#11-4-2-具名插槽" class="headerlink" title="11.4.2 具名插槽"></a>11.4.2 具名插槽</h6><blockquote><p>当组件中的插槽数量&gt;1时，需要给组件中的slot标签添加name属性指定插槽的名字</p></blockquote><ul><li>定义组件：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"page-frame"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;&lt;div id="header" style="width:100%; height:100px;background:pink"&gt;&lt;slot name="s1"&gt;&lt;/slot&gt;&lt;/div&gt;&lt;div style="width:100%; height:580px"&gt;&lt;slot name="s2"&gt;&lt;/slot&gt;&lt;/div&gt;&lt;div id="footer" style="width:100%; height:40px;background:lightgray"&gt;{{cr}}&lt;/div&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"cr"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引用组件  <code>template</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>page-frame</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span> <span class="token attr-name">cr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>千锋武汉<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--定义一个模版，填充到组件的name=s1的 插槽--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>歌曲名、歌手<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSearch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--定义一个模版，填充到组件的name=s2的 插槽--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-bordered table-condensed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>歌曲ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>歌曲名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>歌手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>专辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>时长<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>page-frame</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="11-4-3-插槽作用域"><a href="#11-4-3-插槽作用域" class="headerlink" title="11.4.3 插槽作用域"></a>11.4.3 插槽作用域</h6><ul><li>定义组件时，将组件中的数据绑定到<code>slot</code>标签</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"page-frame"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;&lt;div id="header" style="width:100%; height:100px;background:pink"&gt;&lt;slot name="s1"&gt;&lt;/slot&gt;&lt;/div&gt;&lt;div style="width:100%; height:580px"&gt;&lt;slot name="s2" v-bind:musics="songs"&gt;&lt;/slot&gt;&lt;/div&gt;&lt;div id="footer" style="width:100%; height:40px;background:lightgray"&gt;{{cr}}&lt;/div&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"cr"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">songs</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引用组件时，在填充插槽的模版上使用<code>slot-scopt</code>属性获取插槽绑定的值</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>page-frame</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span> <span class="token attr-name">cr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>千锋武汉<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>歌曲名、歌手<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSearch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--在使用模版填充组件插槽时，可以使用slot-scope属性获取组件插槽绑定的数据的集合 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>res<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-bordered table-condensed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>歌曲ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>歌曲名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>歌手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>专辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>时长<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>song,index in res.musics<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{index+1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{song.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                    {{song.name}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>artist in song.artists<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>{{artist.name}}                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{song.album.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    {{   Math.floor( Math.round(song.duration/1000)/60) &lt; 10 ? '0'+Math.floor( Math.round(song.duration/1000)/60) : Math.floor( Math.round(song.duration/1000)/60)    }}                                                                            :                                                                            {{   Math.round(song.duration/1000)%60 &lt;10 ? '0'+( Math.round(song.duration/1000)%60 ) : Math.round(song.duration/1000)%60  }}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary btn-xs<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>page-frame</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十二、axios"><a href="#十二、axios" class="headerlink" title="十二、axios"></a>十二、axios</h2><h4 id="12-1-axios介绍"><a href="#12-1-axios介绍" class="headerlink" title="12.1 axios介绍"></a>12.1 axios介绍</h4><blockquote><p>vue可以实现数据的渲染，但是如何获取数据呢？</p><p>vue本身不具备通信能力，通常结合axios—一个专注于异步通信的js框架来使用</p><ul><li>axios 数据通信</li><li>vue 数据渲染</li></ul></blockquote><h4 id="12-2-axios入门使用"><a href="#12-2-axios入门使用" class="headerlink" title="12.2 axios入门使用"></a>12.2 axios入门使用</h4><ul><li>原生ajax — 实现步骤复杂</li><li>jQuery  笨重  </li><li>axios    简洁、高效，对RESTful支持良好</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/axios.min.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function-variable function">test1</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//发送异步请求</span><span class="token comment">//  axios.get(url).then(fn);</span><span class="token comment">//  axios.get(url,{}).then(fn)</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9999/music/detail"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">"25640392"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-3-axios异步请求方法"><a href="#12-3-axios异步请求方法" class="headerlink" title="12.3 axios异步请求方法"></a>12.3 axios异步请求方法</h4><blockquote><p>axios提供了多种异步请求方法，实现对RESTful风格的支持</p></blockquote><h6 id="12-3-1-get请求"><a href="#12-3-1-get请求" class="headerlink" title="12.3.1 get请求"></a>12.3.1 get请求</h6><ul><li><p>axios.get(url).then(fn);</p></li><li><p>axios.get(url,{}).then(fn)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用axios的get请求传递参数，需要将参数设置在params下</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9999/music/detail"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">"25640392"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="12-3-2-post请求"><a href="#12-3-2-post请求" class="headerlink" title="12.3.2 post请求"></a>12.3.2 post请求</h6><ul><li><p>axios.post(url,{}).then(fn)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9999/music/search"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">s</span><span class="token operator">:</span><span class="token string">"阿刁"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="12-3-3-自定义请求"><a href="#12-3-3-自定义请求" class="headerlink" title="12.3.3 自定义请求"></a>12.3.3 自定义请求</h6><blockquote><p>自定义请求：自定义请求方式、请求参数、请求头、请求体（post）</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"http://localhost:9999/music/search"</span><span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">//设置请求行传值</span>        <span class="token literal-property property">s</span><span class="token operator">:</span><span class="token string">"成都"</span><span class="token punctuation">,</span>        <span class="token literal-property property">limit</span><span class="token operator">:</span><span class="token number">15</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">//设置请求头</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">//设置请求体（post/put）</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="12-3-4-其他"><a href="#12-3-4-其他" class="headerlink" title="12.3.4 其他"></a>12.3.4 其他</h6><ul><li>delete</li><li>put</li><li>option</li></ul><h4 id="12-4-并发请求"><a href="#12-4-并发请求" class="headerlink" title="12.4 并发请求"></a>12.4 并发请求</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">test1</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//发送异步请求</span>               axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">listMusics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getMusicDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r1<span class="token punctuation">,</span> r2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 两个请求现在都执行完成</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">listMusics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:9999/music/search?s=成都'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getMusicDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:9999/music/detail?id=25640392'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-5-箭头函数"><a href="#12-5-箭头函数" class="headerlink" title="12.5 箭头函数"></a>12.5 箭头函数</h4><h6 id="12-5-1-axios回调函数的参数res"><a href="#12-5-1-axios回调函数的参数res" class="headerlink" title="12.5.1 axios回调函数的参数res"></a>12.5.1 axios回调函数的参数res</h6><blockquote><p>res并不是接口返回的数据，而是表示一个响应对象；res.data才表示接口响应的数据</p></blockquote><h6 id="12-5-2-箭头函数"><a href="#12-5-2-箭头函数" class="headerlink" title="12.5.2 箭头函数"></a>12.5.2 箭头函数</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">song</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">test1</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//发送异步请求</span>                axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9999/music/detail?id=25640392"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                    <span class="token comment">// res并不是接口返回的数据，而是表示一个响应对象；res.data才表示接口响应的数据</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>song <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>songs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十三、路由-router"><a href="#十三、路由-router" class="headerlink" title="十三、路由 router"></a>十三、路由 router</h2><blockquote><p>router是由vue官方提供的用于实现组件跳转的插件</p></blockquote><h4 id="13-1-路由插件的引用"><a href="#13-1-路由插件的引用" class="headerlink" title="13.1 路由插件的引用"></a>13.1 路由插件的引用</h4><h6 id="13-3-1-离线"><a href="#13-3-1-离线" class="headerlink" title="13.3.1 离线"></a>13.3.1 离线</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="13-3-2-在线CDN"><a href="#13-3-2-在线CDN" class="headerlink" title="13.3.2 在线CDN"></a>13.3.2 在线CDN</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue-router/dist/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="13-2-路由使用案例"><a href="#13-2-路由使用案例" class="headerlink" title="13.2 路由使用案例"></a>13.2 路由使用案例</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">padding</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul</span><span class="token punctuation">{</span><span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li</span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li a</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span> <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li a:hover</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> #00BFFF<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-left</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/c<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>HTML5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/d<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 680px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> lemonchiffon<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// vue的路由旨在为单页面应用开发提供便捷</span><span class="token comment">//1.定义链接跳转的模板（组件）</span><span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;index&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> t2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;Java&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> t3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;HTML5&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> t4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;PYTHON&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>t1<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/b"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>t2<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/c"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>t3<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/d"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>t4<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span><span class="token literal-property property">router</span><span class="token operator">:</span>myrouter<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-3-动态路由匹配"><a href="#13-3-动态路由匹配" class="headerlink" title="13.3 动态路由匹配"></a>13.3 动态路由匹配</h4><h6 id="13-3-1-通配符"><a href="#13-3-1-通配符" class="headerlink" title="13.3.1 通配符"></a>13.3.1 通配符</h6><blockquote><p><code>*</code>可以匹配任意路径</p></blockquote><p>例如：</p><ul><li><code>/user-*</code> 匹配所有以<code>user-</code>开头的任意路径</li><li><code>/*</code> 匹配所有路径</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/user-*"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/*"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意</code>如果使用通配符定义路径，需要注意路由声明的顺序</p><h6 id="13-3-2-路由参数"><a href="#13-3-2-路由参数" class="headerlink" title="13.3.2 路由参数"></a>13.3.2 路由参数</h6><ul><li><code>/a/:id</code> 可以匹配 <code>/a/</code>开头的路径</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a/101<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;index:{{$route.params.id}}&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a/:id"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>t1<span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">router</span><span class="token operator">:</span>myrouter    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="13-3-3-优先级"><a href="#13-3-3-优先级" class="headerlink" title="13.3.3 优先级"></a>13.3.3 优先级</h6><p>如果一个路径匹配了多个路由，则按照路由的配置顺序：路由定义的越早优先级就越高。</p><h4 id="13-4-嵌套路由"><a href="#13-4-嵌套路由" class="headerlink" title="13.4 嵌套路由"></a>13.4 嵌套路由</h4><blockquote><p>在一级路由的组件中显示二级路由</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a/c1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>首页-c1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a/c2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>首页-c2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;div style='width:400px; height:200px; border:blue 1px solid'&gt;index&lt;hr/&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> t2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;t2&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> t3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;t3&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span>                <span class="token literal-property property">component</span><span class="token operator">:</span>t1<span class="token punctuation">,</span>                <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"c1"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">component</span><span class="token operator">:</span>t2                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"c2"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">component</span><span class="token operator">:</span>t3                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">router</span><span class="token operator">:</span>myrouter    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-5-编程式导航"><a href="#13-5-编程式导航" class="headerlink" title="13.5 编程式导航"></a>13.5 编程式导航</h4><h6 id="13-5-1-push"><a href="#13-5-1-push" class="headerlink" title="13.5.1 push()"></a>13.5.1 push()</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;div style='width:400px; height:200px; border:blue 1px solid'&gt;index&lt;/div&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span>                <span class="token literal-property property">component</span><span class="token operator">:</span>t1            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">router</span><span class="token operator">:</span>myrouter<span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">test</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//js代码实现路由跳转：编程式导航</span>                myrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="13-5-2-push-参数"><a href="#13-5-2-push-参数" class="headerlink" title="13.5.2 push()参数"></a>13.5.2 push()参数</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.字符串</span>myrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.对象</span>myrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.命名的路由  name参数指的是定义路由时指定的名字</span>myrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"r1"</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">101</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.URL传值，相当于/a?id=101</span>myrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span><span class="token literal-property property">query</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">101</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="13-5-3-replace"><a href="#13-5-3-replace" class="headerlink" title="13.5.3 replace()"></a>13.5.3 replace()</h6><blockquote><p>功能与push一致，区别在于replace()不会向history添加新的浏览记录</p></blockquote><h6 id="13-5-4-go"><a href="#13-5-4-go" class="headerlink" title="13.5.4 go()"></a>13.5.4 go()</h6><blockquote><p>参数为一个整数，表示在浏览器历史记录中前后/后退多少步    相当于<code>window.history.go(-1)</code>的作用</p></blockquote><h4 id="13-6-命名路由"><a href="#13-6-命名路由" class="headerlink" title="13.6 命名路由"></a>13.6 命名路由</h4><blockquote><p>命名路由：在定义路由的时候可以给路由指定name，我们在进行路由导航时可以通过路由的名字导航</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rname<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:rname}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>t1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;div style='width:400px; height:200px; border:blue 1px solid'&gt;t1&lt;/div&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> t2 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;div style='width:400px; height:200px; border:red 1px solid'&gt;t2&lt;/div&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"r1"</span><span class="token punctuation">,</span>                <span class="token literal-property property">component</span><span class="token operator">:</span>t1            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/b"</span><span class="token punctuation">,</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"r2"</span><span class="token punctuation">,</span>                <span class="token literal-property property">component</span><span class="token operator">:</span>t2            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">rname</span><span class="token operator">:</span><span class="token string">"r1"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">router</span><span class="token operator">:</span>myrouter<span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">test</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                myrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span>vm<span class="token punctuation">.</span>rname<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-7-命名路由视图"><a href="#13-7-命名路由视图" class="headerlink" title="13.7 命名路由视图"></a>13.7 命名路由视图</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>t1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>t2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--路由视图--&gt;</span>    <span class="token comment">&lt;!--如果在HTML中有一个以上的路由视图router-view，需要给router-view指定name，在路由中使用components映射多个组件根据name设置组件与router-view绑定关系--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> t11 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;div style='width:400px; height:200px; border:blue 1px solid'&gt;t11&lt;/div&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> t12 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;div style='width:400px; height:200px; background:pink'&gt;t12&lt;/div&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> t21 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;div style='width:400px; height:200px; border:red 1px solid'&gt;t21&lt;/div&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> t22 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;div style='width:400px; height:200px; background:yellow'&gt;t22&lt;/div&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span>                <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>                    <span class="token literal-property property">v1</span><span class="token operator">:</span>t11<span class="token punctuation">,</span>                    <span class="token literal-property property">v2</span><span class="token operator">:</span>t12                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/b"</span><span class="token punctuation">,</span>                <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>                    <span class="token literal-property property">v1</span><span class="token operator">:</span>t21<span class="token punctuation">,</span>                    <span class="token literal-property property">v2</span><span class="token operator">:</span>t22                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">router</span><span class="token operator">:</span>myrouter    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-8-重定向和别名"><a href="#13-8-重定向和别名" class="headerlink" title="13.8 重定向和别名"></a>13.8 重定向和别名</h4><h6 id="13-8-1-重定向"><a href="#13-8-1-重定向" class="headerlink" title="13.8.1 重定向"></a>13.8.1 重定向</h6><p>访问<code>/b</code>，重定向到<code>/a</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>路径A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>路径B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;div style='width:400px; height:200px; border:blue 1px solid'&gt;index&lt;/div&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span>                <span class="token literal-property property">component</span><span class="token operator">:</span>t1            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/b"</span><span class="token punctuation">,</span>                <span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">"/a"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">router</span><span class="token operator">:</span>myrouter    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>根据路由命名重定向</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"r1"</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>t1        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/b"</span><span class="token punctuation">,</span>            <span class="token comment">//redirect:"/a"   //根据路由路径重定向</span>            <span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"r1"</span><span class="token punctuation">}</span>  <span class="token comment">//根据路由命名重定向</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="13-8-2-路由别名"><a href="#13-8-2-路由别名" class="headerlink" title="13.8.2 路由别名"></a>13.8.2 路由别名</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>路径A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/wahaha<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>路径wahaha（别名）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;div style='width:400px; height:200px; border:blue 1px solid'&gt;index&lt;/div&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span>                <span class="token literal-property property">alias</span><span class="token operator">:</span><span class="token string">"/wahaha"</span><span class="token punctuation">,</span>                <span class="token literal-property property">component</span><span class="token operator">:</span>t1            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">router</span><span class="token operator">:</span>myrouter    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-9-路由组件传参"><a href="#13-9-路由组件传参" class="headerlink" title="13.9 路由组件传参"></a>13.9 路由组件传参</h4><p>可以通过<code>/url/:attr</code>方式实现通过路由传值给组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a/101<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>路径A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div style='width:400px; height:200px; border:blue 1px solid'&gt;                    index：{{$route.params.id}}                    &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a/:id"</span><span class="token punctuation">,</span>                    <span class="token literal-property property">component</span><span class="token operator">:</span>t1                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>            <span class="token literal-property property">router</span><span class="token operator">:</span>myrouter        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>通过props传参</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a/102<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>路径A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div style='width:400px; height:200px; border:blue 1px solid'&gt;index：{{id}}    &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> myrouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a/:id"</span><span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">component</span><span class="token operator">:</span>t1            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>        <span class="token literal-property property">router</span><span class="token operator">:</span>myrouter    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试博客</title>
      <link href="/posts/d9407122/"/>
      <url>/posts/d9407122/</url>
      
        <content type="html"><![CDATA[<p>TT</p><blockquote><p>title: 博客与博主<br>comments: true<br>toc: true<br>cover: <a href="https://s4.ax1x.com/2022/01/28/7x30g0.png">https://s4.ax1x.com/2022/01/28/7x30g0.png</a><br>categories: 生活<br>tags:</p><ul><li>想法<br>abbrlink: 1<br>date: 2021-5-27 21:00:00</li></ul></blockquote><blockquote><ol><li><p><strong>设置站点配置<code>_config.yml</code></strong>:</p><p>将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code></p></li><li><p><strong>安装插件</strong>:</p><p><code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></p></li><li><p><strong>运行<code>hexo n "XXXXXX"</code></strong>,</p><p>生成XXXXX.md博文时就会在<code>/source/_posts</code>目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p></li><li><p><strong>添加图片</strong>:</p><p>在想添加的位置写入<code>![](图片名字.图片格式)</code>,例如<code>![](1.png)</code>。图片的路径和你写入的路径一致。</p></li></ol></blockquote><blockquote><p> hexo-abbrlink导致图片不能显示</p><p> 在安装了<code>hexo-abbrlink</code>后博客图片无法正常显示（用的是<code>hexo-asset-image</code>）<br> 之前<code>_config.yml</code>中配置如下</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">permalink: archives/:abbrlink.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在<code>hexo g</code>后时观察到，文章中的连接被<a href="https://so.csdn.net/so/search?q=%E9%87%8D%E5%AE%9A%E5%90%91&amp;spm=1001.2101.3001.7020">重定向</a>的位置，与图片在<code>public</code>中的文件位置不相符<br>解决：<br>根据<a href="https://segmentfault.com/a/1190000005799711">参考</a>重写<code>_config.yml</code></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">permalink: posts/:abbrlink/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>删除文件命令行</p><p>rm -rf xxx （xxx - 文件名）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GG </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
